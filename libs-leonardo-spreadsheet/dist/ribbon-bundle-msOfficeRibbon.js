window["Leonardo"] =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 105);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Constants_1 = __webpack_require__(8);
exports.Constants = Constants_1.Constants;
var Events_1 = __webpack_require__(10);
exports.InternalEvents = Events_1.InternalEvents;
var RibbonClasses_1 = __webpack_require__(11);
exports.RibbonClasses = RibbonClasses_1.RibbonClasses;
var FilterMaps_1 = __webpack_require__(13);
exports.menuItemFilterMap = FilterMaps_1.menuItemFilterMap;
var Contracts_1 = __webpack_require__(25);
exports.ControlEventArg = Contracts_1.ControlEventArg;
exports.ItemEventArg = Contracts_1.ItemEventArg;
exports.ItemEventExtArg = Contracts_1.ItemEventExtArg;
exports.ColorItemEventArg = Contracts_1.ColorItemEventArg;
exports.InputDropdownItemEventArg = Contracts_1.InputDropdownItemEventArg;
var RenderEnums_1 = __webpack_require__(6);
exports.RendererType = RenderEnums_1.RendererType;
exports.RibbonControlType = RenderEnums_1.RibbonControlType;
exports.MenuItemType = RenderEnums_1.MenuItemType;
var TypeInfoMaps_1 = __webpack_require__(26);
exports.SpliButtonModes = TypeInfoMaps_1.SpliButtonModes;
exports.ButtonDropdownModes = TypeInfoMaps_1.ButtonDropdownModes;
exports.MenuItemModes = TypeInfoMaps_1.MenuItemModes;
exports.MenuItemToggleableModes = TypeInfoMaps_1.MenuItemToggleableModes;
exports.MenuItemWithIconModes = TypeInfoMaps_1.MenuItemWithIconModes;
exports.MenuItemWithItemsModes = TypeInfoMaps_1.MenuItemWithItemsModes;
exports.MenuItemSeparatorModes = TypeInfoMaps_1.MenuItemSeparatorModes;
var Enums_1 = __webpack_require__(14);
exports.ErrorType = Enums_1.ErrorType;
exports.OrientationType = Enums_1.OrientationType;
exports.Keycodes = Enums_1.Keycodes;
var ModelUtil_1 = __webpack_require__(20);
exports.ModelUtil = ModelUtil_1.default;
var Util_1 = __webpack_require__(22);
exports.Util = Util_1.default;
var ViewUtil_1 = __webpack_require__(48);
exports.ViewUtil = ViewUtil_1.default;
var TypeInfoUtil_1 = __webpack_require__(49);
exports.TypeInfoUtil = TypeInfoUtil_1.default;
var MyContext_1 = __webpack_require__(15);
exports.MyContext = MyContext_1.MyContext;


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return h; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createElement", function() { return h; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cloneElement", function() { return cloneElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Component", function() { return Component; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rerender", function() { return rerender; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "options", function() { return options; });
/** Virtual DOM Node */
function VNode() {}

/** Global options
 *	@public
 *	@namespace options {Object}
 */
var options = {

	/** If `true`, `prop` changes trigger synchronous component updates.
  *	@name syncComponentUpdates
  *	@type Boolean
  *	@default true
  */
	//syncComponentUpdates: true,

	/** Processes all created VNodes.
  *	@param {VNode} vnode	A newly-created VNode to normalize/process
  */
	//vnode(vnode) { }

	/** Hook invoked after a component is mounted. */
	// afterMount(component) { }

	/** Hook invoked after the DOM is updated with a component's latest render. */
	// afterUpdate(component) { }

	/** Hook invoked immediately before a component is unmounted. */
	// beforeUnmount(component) { }
};

var stack = [];

var EMPTY_CHILDREN = [];

/**
 * JSX/hyperscript reviver.
 * @see http://jasonformat.com/wtf-is-jsx
 * Benchmarks: https://esbench.com/bench/57ee8f8e330ab09900a1a1a0
 *
 * Note: this is exported as both `h()` and `createElement()` for compatibility reasons.
 *
 * Creates a VNode (virtual DOM element). A tree of VNodes can be used as a lightweight representation
 * of the structure of a DOM tree. This structure can be realized by recursively comparing it against
 * the current _actual_ DOM structure, and applying only the differences.
 *
 * `h()`/`createElement()` accepts an element name, a list of attributes/props,
 * and optionally children to append to the element.
 *
 * @example The following DOM tree
 *
 * `<div id="foo" name="bar">Hello!</div>`
 *
 * can be constructed using this function as:
 *
 * `h('div', { id: 'foo', name : 'bar' }, 'Hello!');`
 *
 * @param {string} nodeName	An element name. Ex: `div`, `a`, `span`, etc.
 * @param {Object} attributes	Any attributes/props to set on the created element.
 * @param rest			Additional arguments are taken to be children to append. Can be infinitely nested Arrays.
 *
 * @public
 */
function h(nodeName, attributes) {
	var children = EMPTY_CHILDREN,
	    lastSimple,
	    child,
	    simple,
	    i;
	for (i = arguments.length; i-- > 2;) {
		stack.push(arguments[i]);
	}
	if (attributes && attributes.children != null) {
		if (!stack.length) stack.push(attributes.children);
		delete attributes.children;
	}
	while (stack.length) {
		if ((child = stack.pop()) && child.pop !== undefined) {
			for (i = child.length; i--;) {
				stack.push(child[i]);
			}
		} else {
			if (typeof child === 'boolean') child = null;

			if (simple = typeof nodeName !== 'function') {
				if (child == null) child = '';else if (typeof child === 'number') child = String(child);else if (typeof child !== 'string') simple = false;
			}

			if (simple && lastSimple) {
				children[children.length - 1] += child;
			} else if (children === EMPTY_CHILDREN) {
				children = [child];
			} else {
				children.push(child);
			}

			lastSimple = simple;
		}
	}

	var p = new VNode();
	p.nodeName = nodeName;
	p.children = children;
	p.attributes = attributes == null ? undefined : attributes;
	p.key = attributes == null ? undefined : attributes.key;

	// if a "vnode hook" is defined, pass every created VNode to it
	if (options.vnode !== undefined) options.vnode(p);

	return p;
}

/**
 *  Copy all properties from `props` onto `obj`.
 *  @param {Object} obj		Object onto which properties should be copied.
 *  @param {Object} props	Object from which to copy properties.
 *  @returns obj
 *  @private
 */
function extend(obj, props) {
  for (var i in props) {
    obj[i] = props[i];
  }return obj;
}

/**
 * Call a function asynchronously, as soon as possible. Makes
 * use of HTML Promise to schedule the callback if available,
 * otherwise falling back to `setTimeout` (mainly for IE<11).
 *
 * @param {Function} callback
 */
var defer = typeof Promise == 'function' ? Promise.resolve().then.bind(Promise.resolve()) : setTimeout;

/**
 * Clones the given VNode, optionally adding attributes/props and replacing its children.
 * @param {VNode} vnode		The virtual DOM element to clone
 * @param {Object} props	Attributes/props to add when cloning
 * @param {VNode} rest		Any additional arguments will be used as replacement children.
 */
function cloneElement(vnode, props) {
  return h(vnode.nodeName, extend(extend({}, vnode.attributes), props), arguments.length > 2 ? [].slice.call(arguments, 2) : vnode.children);
}

// DOM properties that should NOT have "px" added when numeric
var IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i;

/** Managed queue of dirty components to be re-rendered */

var items = [];

function enqueueRender(component) {
	if (!component._dirty && (component._dirty = true) && items.push(component) == 1) {
		(options.debounceRendering || defer)(rerender);
	}
}

function rerender() {
	var p,
	    list = items;
	items = [];
	while (p = list.pop()) {
		if (p._dirty) renderComponent(p);
	}
}

/**
 * Check if two nodes are equivalent.
 *
 * @param {Node} node			DOM Node to compare
 * @param {VNode} vnode			Virtual DOM node to compare
 * @param {boolean} [hydrating=false]	If true, ignores component constructors when comparing.
 * @private
 */
function isSameNodeType(node, vnode, hydrating) {
  if (typeof vnode === 'string' || typeof vnode === 'number') {
    return node.splitText !== undefined;
  }
  if (typeof vnode.nodeName === 'string') {
    return !node._componentConstructor && isNamedNode(node, vnode.nodeName);
  }
  return hydrating || node._componentConstructor === vnode.nodeName;
}

/**
 * Check if an Element has a given nodeName, case-insensitively.
 *
 * @param {Element} node	A DOM Element to inspect the name of.
 * @param {String} nodeName	Unnormalized name to compare against.
 */
function isNamedNode(node, nodeName) {
  return node.normalizedNodeName === nodeName || node.nodeName.toLowerCase() === nodeName.toLowerCase();
}

/**
 * Reconstruct Component-style `props` from a VNode.
 * Ensures default/fallback values from `defaultProps`:
 * Own-properties of `defaultProps` not present in `vnode.attributes` are added.
 *
 * @param {VNode} vnode
 * @returns {Object} props
 */
function getNodeProps(vnode) {
  var props = extend({}, vnode.attributes);
  props.children = vnode.children;

  var defaultProps = vnode.nodeName.defaultProps;
  if (defaultProps !== undefined) {
    for (var i in defaultProps) {
      if (props[i] === undefined) {
        props[i] = defaultProps[i];
      }
    }
  }

  return props;
}

/** Create an element with the given nodeName.
 *	@param {String} nodeName
 *	@param {Boolean} [isSvg=false]	If `true`, creates an element within the SVG namespace.
 *	@returns {Element} node
 */
function createNode(nodeName, isSvg) {
	var node = isSvg ? document.createElementNS('http://www.w3.org/2000/svg', nodeName) : document.createElement(nodeName);
	node.normalizedNodeName = nodeName;
	return node;
}

/** Remove a child node from its parent if attached.
 *	@param {Element} node		The node to remove
 */
function removeNode(node) {
	var parentNode = node.parentNode;
	if (parentNode) parentNode.removeChild(node);
}

/** Set a named attribute on the given Node, with special behavior for some names and event handlers.
 *	If `value` is `null`, the attribute/handler will be removed.
 *	@param {Element} node	An element to mutate
 *	@param {string} name	The name/key to set, such as an event or attribute name
 *	@param {any} old	The last value that was set for this name/node pair
 *	@param {any} value	An attribute value, such as a function to be used as an event handler
 *	@param {Boolean} isSvg	Are we currently diffing inside an svg?
 *	@private
 */
function setAccessor(node, name, old, value, isSvg) {
	if (name === 'className') name = 'class';

	if (name === 'key') {
		// ignore
	} else if (name === 'ref') {
		if (old) old(null);
		if (value) value(node);
	} else if (name === 'class' && !isSvg) {
		node.className = value || '';
	} else if (name === 'style') {
		if (!value || typeof value === 'string' || typeof old === 'string') {
			node.style.cssText = value || '';
		}
		if (value && typeof value === 'object') {
			if (typeof old !== 'string') {
				for (var i in old) {
					if (!(i in value)) node.style[i] = '';
				}
			}
			for (var i in value) {
				node.style[i] = typeof value[i] === 'number' && IS_NON_DIMENSIONAL.test(i) === false ? value[i] + 'px' : value[i];
			}
		}
	} else if (name === 'dangerouslySetInnerHTML') {
		if (value) node.innerHTML = value.__html || '';
	} else if (name[0] == 'o' && name[1] == 'n') {
		var useCapture = name !== (name = name.replace(/Capture$/, ''));
		name = name.toLowerCase().substring(2);
		if (value) {
			if (!old) node.addEventListener(name, eventProxy, useCapture);
		} else {
			node.removeEventListener(name, eventProxy, useCapture);
		}
		(node._listeners || (node._listeners = {}))[name] = value;
	} else if (name !== 'list' && name !== 'type' && !isSvg && name in node) {
		setProperty(node, name, value == null ? '' : value);
		if (value == null || value === false) node.removeAttribute(name);
	} else {
		var ns = isSvg && name !== (name = name.replace(/^xlink:?/, ''));
		if (value == null || value === false) {
			if (ns) node.removeAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase());else node.removeAttribute(name);
		} else if (typeof value !== 'function') {
			if (ns) node.setAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase(), value);else node.setAttribute(name, value);
		}
	}
}

/** Attempt to set a DOM property to the given value.
 *	IE & FF throw for certain property-value combinations.
 */
function setProperty(node, name, value) {
	try {
		node[name] = value;
	} catch (e) {}
}

/** Proxy an event to hooked event handlers
 *	@private
 */
function eventProxy(e) {
	return this._listeners[e.type](options.event && options.event(e) || e);
}

/** Queue of components that have been mounted and are awaiting componentDidMount */
var mounts = [];

/** Diff recursion count, used to track the end of the diff cycle. */
var diffLevel = 0;

/** Global flag indicating if the diff is currently within an SVG */
var isSvgMode = false;

/** Global flag indicating if the diff is performing hydration */
var hydrating = false;

/** Invoke queued componentDidMount lifecycle methods */
function flushMounts() {
	var c;
	while (c = mounts.pop()) {
		if (options.afterMount) options.afterMount(c);
		if (c.componentDidMount) c.componentDidMount();
	}
}

/** Apply differences in a given vnode (and it's deep children) to a real DOM Node.
 *	@param {Element} [dom=null]		A DOM node to mutate into the shape of the `vnode`
 *	@param {VNode} vnode			A VNode (with descendants forming a tree) representing the desired DOM structure
 *	@returns {Element} dom			The created/mutated element
 *	@private
 */
function diff(dom, vnode, context, mountAll, parent, componentRoot) {
	// diffLevel having been 0 here indicates initial entry into the diff (not a subdiff)
	if (!diffLevel++) {
		// when first starting the diff, check if we're diffing an SVG or within an SVG
		isSvgMode = parent != null && parent.ownerSVGElement !== undefined;

		// hydration is indicated by the existing element to be diffed not having a prop cache
		hydrating = dom != null && !('__preactattr_' in dom);
	}

	var ret = idiff(dom, vnode, context, mountAll, componentRoot);

	// append the element if its a new parent
	if (parent && ret.parentNode !== parent) parent.appendChild(ret);

	// diffLevel being reduced to 0 means we're exiting the diff
	if (! --diffLevel) {
		hydrating = false;
		// invoke queued componentDidMount lifecycle methods
		if (!componentRoot) flushMounts();
	}

	return ret;
}

/** Internals of `diff()`, separated to allow bypassing diffLevel / mount flushing. */
function idiff(dom, vnode, context, mountAll, componentRoot) {
	var out = dom,
	    prevSvgMode = isSvgMode;

	// empty values (null, undefined, booleans) render as empty Text nodes
	if (vnode == null || typeof vnode === 'boolean') vnode = '';

	// Fast case: Strings & Numbers create/update Text nodes.
	if (typeof vnode === 'string' || typeof vnode === 'number') {

		// update if it's already a Text node:
		if (dom && dom.splitText !== undefined && dom.parentNode && (!dom._component || componentRoot)) {
			/* istanbul ignore if */ /* Browser quirk that can't be covered: https://github.com/developit/preact/commit/fd4f21f5c45dfd75151bd27b4c217d8003aa5eb9 */
			if (dom.nodeValue != vnode) {
				dom.nodeValue = vnode;
			}
		} else {
			// it wasn't a Text node: replace it with one and recycle the old Element
			out = document.createTextNode(vnode);
			if (dom) {
				if (dom.parentNode) dom.parentNode.replaceChild(out, dom);
				recollectNodeTree(dom, true);
			}
		}

		out['__preactattr_'] = true;

		return out;
	}

	// If the VNode represents a Component, perform a component diff:
	var vnodeName = vnode.nodeName;
	if (typeof vnodeName === 'function') {
		return buildComponentFromVNode(dom, vnode, context, mountAll);
	}

	// Tracks entering and exiting SVG namespace when descending through the tree.
	isSvgMode = vnodeName === 'svg' ? true : vnodeName === 'foreignObject' ? false : isSvgMode;

	// If there's no existing element or it's the wrong type, create a new one:
	vnodeName = String(vnodeName);
	if (!dom || !isNamedNode(dom, vnodeName)) {
		out = createNode(vnodeName, isSvgMode);

		if (dom) {
			// move children into the replacement node
			while (dom.firstChild) {
				out.appendChild(dom.firstChild);
			} // if the previous Element was mounted into the DOM, replace it inline
			if (dom.parentNode) dom.parentNode.replaceChild(out, dom);

			// recycle the old element (skips non-Element node types)
			recollectNodeTree(dom, true);
		}
	}

	var fc = out.firstChild,
	    props = out['__preactattr_'],
	    vchildren = vnode.children;

	if (props == null) {
		props = out['__preactattr_'] = {};
		for (var a = out.attributes, i = a.length; i--;) {
			props[a[i].name] = a[i].value;
		}
	}

	// Optimization: fast-path for elements containing a single TextNode:
	if (!hydrating && vchildren && vchildren.length === 1 && typeof vchildren[0] === 'string' && fc != null && fc.splitText !== undefined && fc.nextSibling == null) {
		if (fc.nodeValue != vchildren[0]) {
			fc.nodeValue = vchildren[0];
		}
	}
	// otherwise, if there are existing or new children, diff them:
	else if (vchildren && vchildren.length || fc != null) {
			innerDiffNode(out, vchildren, context, mountAll, hydrating || props.dangerouslySetInnerHTML != null);
		}

	// Apply attributes/props from VNode to the DOM Element:
	diffAttributes(out, vnode.attributes, props);

	// restore previous SVG mode: (in case we're exiting an SVG namespace)
	isSvgMode = prevSvgMode;

	return out;
}

/** Apply child and attribute changes between a VNode and a DOM Node to the DOM.
 *	@param {Element} dom			Element whose children should be compared & mutated
 *	@param {Array} vchildren		Array of VNodes to compare to `dom.childNodes`
 *	@param {Object} context			Implicitly descendant context object (from most recent `getChildContext()`)
 *	@param {Boolean} mountAll
 *	@param {Boolean} isHydrating	If `true`, consumes externally created elements similar to hydration
 */
function innerDiffNode(dom, vchildren, context, mountAll, isHydrating) {
	var originalChildren = dom.childNodes,
	    children = [],
	    keyed = {},
	    keyedLen = 0,
	    min = 0,
	    len = originalChildren.length,
	    childrenLen = 0,
	    vlen = vchildren ? vchildren.length : 0,
	    j,
	    c,
	    f,
	    vchild,
	    child;

	// Build up a map of keyed children and an Array of unkeyed children:
	if (len !== 0) {
		for (var i = 0; i < len; i++) {
			var _child = originalChildren[i],
			    props = _child['__preactattr_'],
			    key = vlen && props ? _child._component ? _child._component.__key : props.key : null;
			if (key != null) {
				keyedLen++;
				keyed[key] = _child;
			} else if (props || (_child.splitText !== undefined ? isHydrating ? _child.nodeValue.trim() : true : isHydrating)) {
				children[childrenLen++] = _child;
			}
		}
	}

	if (vlen !== 0) {
		for (var i = 0; i < vlen; i++) {
			vchild = vchildren[i];
			child = null;

			// attempt to find a node based on key matching
			var key = vchild.key;
			if (key != null) {
				if (keyedLen && keyed[key] !== undefined) {
					child = keyed[key];
					keyed[key] = undefined;
					keyedLen--;
				}
			}
			// attempt to pluck a node of the same type from the existing children
			else if (!child && min < childrenLen) {
					for (j = min; j < childrenLen; j++) {
						if (children[j] !== undefined && isSameNodeType(c = children[j], vchild, isHydrating)) {
							child = c;
							children[j] = undefined;
							if (j === childrenLen - 1) childrenLen--;
							if (j === min) min++;
							break;
						}
					}
				}

			// morph the matched/found/created DOM child to match vchild (deep)
			child = idiff(child, vchild, context, mountAll);

			f = originalChildren[i];
			if (child && child !== dom && child !== f) {
				if (f == null) {
					dom.appendChild(child);
				} else if (child === f.nextSibling) {
					removeNode(f);
				} else {
					dom.insertBefore(child, f);
				}
			}
		}
	}

	// remove unused keyed children:
	if (keyedLen) {
		for (var i in keyed) {
			if (keyed[i] !== undefined) recollectNodeTree(keyed[i], false);
		}
	}

	// remove orphaned unkeyed children:
	while (min <= childrenLen) {
		if ((child = children[childrenLen--]) !== undefined) recollectNodeTree(child, false);
	}
}

/** Recursively recycle (or just unmount) a node and its descendants.
 *	@param {Node} node						DOM node to start unmount/removal from
 *	@param {Boolean} [unmountOnly=false]	If `true`, only triggers unmount lifecycle, skips removal
 */
function recollectNodeTree(node, unmountOnly) {
	var component = node._component;
	if (component) {
		// if node is owned by a Component, unmount that component (ends up recursing back here)
		unmountComponent(component);
	} else {
		// If the node's VNode had a ref function, invoke it with null here.
		// (this is part of the React spec, and smart for unsetting references)
		if (node['__preactattr_'] != null && node['__preactattr_'].ref) node['__preactattr_'].ref(null);

		if (unmountOnly === false || node['__preactattr_'] == null) {
			removeNode(node);
		}

		removeChildren(node);
	}
}

/** Recollect/unmount all children.
 *	- we use .lastChild here because it causes less reflow than .firstChild
 *	- it's also cheaper than accessing the .childNodes Live NodeList
 */
function removeChildren(node) {
	node = node.lastChild;
	while (node) {
		var next = node.previousSibling;
		recollectNodeTree(node, true);
		node = next;
	}
}

/** Apply differences in attributes from a VNode to the given DOM Element.
 *	@param {Element} dom		Element with attributes to diff `attrs` against
 *	@param {Object} attrs		The desired end-state key-value attribute pairs
 *	@param {Object} old			Current/previous attributes (from previous VNode or element's prop cache)
 */
function diffAttributes(dom, attrs, old) {
	var name;

	// remove attributes no longer present on the vnode by setting them to undefined
	for (name in old) {
		if (!(attrs && attrs[name] != null) && old[name] != null) {
			setAccessor(dom, name, old[name], old[name] = undefined, isSvgMode);
		}
	}

	// add new & update changed attributes
	for (name in attrs) {
		if (name !== 'children' && name !== 'innerHTML' && (!(name in old) || attrs[name] !== (name === 'value' || name === 'checked' ? dom[name] : old[name]))) {
			setAccessor(dom, name, old[name], old[name] = attrs[name], isSvgMode);
		}
	}
}

/** Retains a pool of Components for re-use, keyed on component name.
 *	Note: since component names are not unique or even necessarily available, these are primarily a form of sharding.
 *	@private
 */
var components = {};

/** Reclaim a component for later re-use by the recycler. */
function collectComponent(component) {
	var name = component.constructor.name;
	(components[name] || (components[name] = [])).push(component);
}

/** Create a component. Normalizes differences between PFC's and classful Components. */
function createComponent(Ctor, props, context) {
	var list = components[Ctor.name],
	    inst;

	if (Ctor.prototype && Ctor.prototype.render) {
		inst = new Ctor(props, context);
		Component.call(inst, props, context);
	} else {
		inst = new Component(props, context);
		inst.constructor = Ctor;
		inst.render = doRender;
	}

	if (list) {
		for (var i = list.length; i--;) {
			if (list[i].constructor === Ctor) {
				inst.nextBase = list[i].nextBase;
				list.splice(i, 1);
				break;
			}
		}
	}
	return inst;
}

/** The `.render()` method for a PFC backing instance. */
function doRender(props, state, context) {
	return this.constructor(props, context);
}

/** Set a component's `props` (generally derived from JSX attributes).
 *	@param {Object} props
 *	@param {Object} [opts]
 *	@param {boolean} [opts.renderSync=false]	If `true` and {@link options.syncComponentUpdates} is `true`, triggers synchronous rendering.
 *	@param {boolean} [opts.render=true]			If `false`, no render will be triggered.
 */
function setComponentProps(component, props, opts, context, mountAll) {
	if (component._disable) return;
	component._disable = true;

	if (component.__ref = props.ref) delete props.ref;
	if (component.__key = props.key) delete props.key;

	if (!component.base || mountAll) {
		if (component.componentWillMount) component.componentWillMount();
	} else if (component.componentWillReceiveProps) {
		component.componentWillReceiveProps(props, context);
	}

	if (context && context !== component.context) {
		if (!component.prevContext) component.prevContext = component.context;
		component.context = context;
	}

	if (!component.prevProps) component.prevProps = component.props;
	component.props = props;

	component._disable = false;

	if (opts !== 0) {
		if (opts === 1 || options.syncComponentUpdates !== false || !component.base) {
			renderComponent(component, 1, mountAll);
		} else {
			enqueueRender(component);
		}
	}

	if (component.__ref) component.__ref(component);
}

/** Render a Component, triggering necessary lifecycle events and taking High-Order Components into account.
 *	@param {Component} component
 *	@param {Object} [opts]
 *	@param {boolean} [opts.build=false]		If `true`, component will build and store a DOM node if not already associated with one.
 *	@private
 */
function renderComponent(component, opts, mountAll, isChild) {
	if (component._disable) return;

	var props = component.props,
	    state = component.state,
	    context = component.context,
	    previousProps = component.prevProps || props,
	    previousState = component.prevState || state,
	    previousContext = component.prevContext || context,
	    isUpdate = component.base,
	    nextBase = component.nextBase,
	    initialBase = isUpdate || nextBase,
	    initialChildComponent = component._component,
	    skip = false,
	    rendered,
	    inst,
	    cbase;

	// if updating
	if (isUpdate) {
		component.props = previousProps;
		component.state = previousState;
		component.context = previousContext;
		if (opts !== 2 && component.shouldComponentUpdate && component.shouldComponentUpdate(props, state, context) === false) {
			skip = true;
		} else if (component.componentWillUpdate) {
			component.componentWillUpdate(props, state, context);
		}
		component.props = props;
		component.state = state;
		component.context = context;
	}

	component.prevProps = component.prevState = component.prevContext = component.nextBase = null;
	component._dirty = false;

	if (!skip) {
		rendered = component.render(props, state, context);

		// context to pass to the child, can be updated via (grand-)parent component
		if (component.getChildContext) {
			context = extend(extend({}, context), component.getChildContext());
		}

		var childComponent = rendered && rendered.nodeName,
		    toUnmount,
		    base;

		if (typeof childComponent === 'function') {
			// set up high order component link

			var childProps = getNodeProps(rendered);
			inst = initialChildComponent;

			if (inst && inst.constructor === childComponent && childProps.key == inst.__key) {
				setComponentProps(inst, childProps, 1, context, false);
			} else {
				toUnmount = inst;

				component._component = inst = createComponent(childComponent, childProps, context);
				inst.nextBase = inst.nextBase || nextBase;
				inst._parentComponent = component;
				setComponentProps(inst, childProps, 0, context, false);
				renderComponent(inst, 1, mountAll, true);
			}

			base = inst.base;
		} else {
			cbase = initialBase;

			// destroy high order component link
			toUnmount = initialChildComponent;
			if (toUnmount) {
				cbase = component._component = null;
			}

			if (initialBase || opts === 1) {
				if (cbase) cbase._component = null;
				base = diff(cbase, rendered, context, mountAll || !isUpdate, initialBase && initialBase.parentNode, true);
			}
		}

		if (initialBase && base !== initialBase && inst !== initialChildComponent) {
			var baseParent = initialBase.parentNode;
			if (baseParent && base !== baseParent) {
				baseParent.replaceChild(base, initialBase);

				if (!toUnmount) {
					initialBase._component = null;
					recollectNodeTree(initialBase, false);
				}
			}
		}

		if (toUnmount) {
			unmountComponent(toUnmount);
		}

		component.base = base;
		if (base && !isChild) {
			var componentRef = component,
			    t = component;
			while (t = t._parentComponent) {
				(componentRef = t).base = base;
			}
			base._component = componentRef;
			base._componentConstructor = componentRef.constructor;
		}
	}

	if (!isUpdate || mountAll) {
		mounts.unshift(component);
	} else if (!skip) {
		// Ensure that pending componentDidMount() hooks of child components
		// are called before the componentDidUpdate() hook in the parent.
		// Note: disabled as it causes duplicate hooks, see https://github.com/developit/preact/issues/750
		// flushMounts();

		if (component.componentDidUpdate) {
			component.componentDidUpdate(previousProps, previousState, previousContext);
		}
		if (options.afterUpdate) options.afterUpdate(component);
	}

	if (component._renderCallbacks != null) {
		while (component._renderCallbacks.length) {
			component._renderCallbacks.pop().call(component);
		}
	}

	if (!diffLevel && !isChild) flushMounts();
}

/** Apply the Component referenced by a VNode to the DOM.
 *	@param {Element} dom	The DOM node to mutate
 *	@param {VNode} vnode	A Component-referencing VNode
 *	@returns {Element} dom	The created/mutated element
 *	@private
 */
function buildComponentFromVNode(dom, vnode, context, mountAll) {
	var c = dom && dom._component,
	    originalComponent = c,
	    oldDom = dom,
	    isDirectOwner = c && dom._componentConstructor === vnode.nodeName,
	    isOwner = isDirectOwner,
	    props = getNodeProps(vnode);
	while (c && !isOwner && (c = c._parentComponent)) {
		isOwner = c.constructor === vnode.nodeName;
	}

	if (c && isOwner && (!mountAll || c._component)) {
		setComponentProps(c, props, 3, context, mountAll);
		dom = c.base;
	} else {
		if (originalComponent && !isDirectOwner) {
			unmountComponent(originalComponent);
			dom = oldDom = null;
		}

		c = createComponent(vnode.nodeName, props, context);
		if (dom && !c.nextBase) {
			c.nextBase = dom;
			// passing dom/oldDom as nextBase will recycle it if unused, so bypass recycling on L229:
			oldDom = null;
		}
		setComponentProps(c, props, 1, context, mountAll);
		dom = c.base;

		if (oldDom && dom !== oldDom) {
			oldDom._component = null;
			recollectNodeTree(oldDom, false);
		}
	}

	return dom;
}

/** Remove a component from the DOM and recycle it.
 *	@param {Component} component	The Component instance to unmount
 *	@private
 */
function unmountComponent(component) {
	if (options.beforeUnmount) options.beforeUnmount(component);

	var base = component.base;

	component._disable = true;

	if (component.componentWillUnmount) component.componentWillUnmount();

	component.base = null;

	// recursively tear down & recollect high-order component children:
	var inner = component._component;
	if (inner) {
		unmountComponent(inner);
	} else if (base) {
		if (base['__preactattr_'] && base['__preactattr_'].ref) base['__preactattr_'].ref(null);

		component.nextBase = base;

		removeNode(base);
		collectComponent(component);

		removeChildren(base);
	}

	if (component.__ref) component.__ref(null);
}

/** Base Component class.
 *	Provides `setState()` and `forceUpdate()`, which trigger rendering.
 *	@public
 *
 *	@example
 *	class MyFoo extends Component {
 *		render(props, state) {
 *			return <div />;
 *		}
 *	}
 */
function Component(props, context) {
	this._dirty = true;

	/** @public
  *	@type {object}
  */
	this.context = context;

	/** @public
  *	@type {object}
  */
	this.props = props;

	/** @public
  *	@type {object}
  */
	this.state = this.state || {};
}

extend(Component.prototype, {

	/** Returns a `boolean` indicating if the component should re-render when receiving the given `props` and `state`.
  *	@param {object} nextProps
  *	@param {object} nextState
  *	@param {object} nextContext
  *	@returns {Boolean} should the component re-render
  *	@name shouldComponentUpdate
  *	@function
  */

	/** Update component state by copying properties from `state` to `this.state`.
  *	@param {object} state		A hash of state properties to update with new values
  *	@param {function} callback	A function to be called once component state is updated
  */
	setState: function setState(state, callback) {
		var s = this.state;
		if (!this.prevState) this.prevState = extend({}, s);
		extend(s, typeof state === 'function' ? state(s, this.props) : state);
		if (callback) (this._renderCallbacks = this._renderCallbacks || []).push(callback);
		enqueueRender(this);
	},


	/** Immediately perform a synchronous re-render of the component.
  *	@param {function} callback		A function to be called after component is re-rendered.
  *	@private
  */
	forceUpdate: function forceUpdate(callback) {
		if (callback) (this._renderCallbacks = this._renderCallbacks || []).push(callback);
		renderComponent(this, 2);
	},


	/** Accepts `props` and `state`, and returns a new Virtual DOM tree to build.
  *	Virtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).
  *	@param {object} props		Props (eg: JSX attributes) received from parent element/component
  *	@param {object} state		The component's current state
  *	@param {object} context		Context object (if a parent component has provided context)
  *	@returns VNode
  */
	render: function render() {}
});

/** Render JSX into a `parent` Element.
 *	@param {VNode} vnode		A (JSX) VNode to render
 *	@param {Element} parent		DOM element to render into
 *	@param {Element} [merge]	Attempt to re-use an existing DOM tree rooted at `merge`
 *	@public
 *
 *	@example
 *	// render a div into <body>:
 *	render(<div id="hello">hello!</div>, document.body);
 *
 *	@example
 *	// render a "Thing" component into #foo:
 *	const Thing = ({ name }) => <span>{ name }</span>;
 *	render(<Thing name="one" />, document.querySelector('#foo'));
 */
function render(vnode, parent, merge) {
  return diff(merge, vnode, {}, false, parent, false);
}

var preact = {
	h: h,
	createElement: h,
	cloneElement: cloneElement,
	Component: Component,
	render: render,
	rerender: rerender,
	options: options
};

/* harmony default export */ __webpack_exports__["default"] = (preact);

//# sourceMappingURL=preact.esm.js.map


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if (typeof module !== 'undefined' && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if (true) {
		// register as 'classnames', consistent with npm package name
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
			return classNames;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		window.classNames = classNames;
	}
}());


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Constants_1 = __webpack_require__(8);
exports.Constants = Constants_1.Constants;
var Events_1 = __webpack_require__(10);
exports.InternalEvents = Events_1.InternalEvents;
var RibbonClasses_1 = __webpack_require__(11);
exports.RibbonClasses = RibbonClasses_1.RibbonClasses;
var FilterMaps_1 = __webpack_require__(13);
exports.controlFilterMap = FilterMaps_1.controlFilterMap;
var RenderEnums_1 = __webpack_require__(6);
exports.RendererType = RenderEnums_1.RendererType;
var Enums_1 = __webpack_require__(14);
exports.OrientationType = Enums_1.OrientationType;
exports.ErrorType = Enums_1.ErrorType;
exports.SectionControlSpacingMode = Enums_1.SectionControlSpacingMode;
exports.Keycodes = Enums_1.Keycodes;
var ModelUtil_1 = __webpack_require__(20);
exports.ModelUtil = ModelUtil_1.default;
var Util_1 = __webpack_require__(22);
exports.Util = Util_1.default;
var MyContext_1 = __webpack_require__(15);
exports.MyContext = MyContext_1.MyContext;
var RibbonConfiguration_1 = __webpack_require__(16);
exports.RibbonConfiguration = RibbonConfiguration_1.RibbonConfiguration;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var Ribbon_1 = __webpack_require__(21);
var TabContainer_1 = __webpack_require__(33);
var Tab_1 = __webpack_require__(35);
var TabPanel_1 = __webpack_require__(36);
var Panel_1 = __webpack_require__(23);
var Section_1 = __webpack_require__(37);
var SectionWithFooter_1 = __webpack_require__(38);
var SectionBody_1 = __webpack_require__(17);
var SectionFooter_1 = __webpack_require__(24);
var Envelop_1 = __webpack_require__(39);
var PinButton_1 = __webpack_require__(40);
var HorizontalScroll_1 = __webpack_require__(41);
var SectionSeparator_1 = __webpack_require__(42);
var ControlSeparator_1 = __webpack_require__(43);
var Tooltip_1 = __webpack_require__(44);
var AccessKeyTooltip_1 = __webpack_require__(45);
var ControlFactory_1 = __webpack_require__(46);
var RenderEnums_1 = __webpack_require__(6);
var RenderMap = /** @class */ (function () {
    function RenderMap() {
    }
    RenderMap.Map = {};
    return RenderMap;
}());
RenderMap.Map[RenderEnums_1.RendererType.ribbon.toLowerCase()] = Ribbon_1.default;
RenderMap.Map[RenderEnums_1.RendererType.tabContainer.toLowerCase()] = TabContainer_1.default;
RenderMap.Map[RenderEnums_1.RendererType.tab.toLowerCase()] = Tab_1.default;
RenderMap.Map[RenderEnums_1.RendererType.tabPanel.toLowerCase()] = TabPanel_1.default;
RenderMap.Map[RenderEnums_1.RendererType.panel.toLowerCase()] = Panel_1.default;
RenderMap.Map[RenderEnums_1.RendererType.section.toLowerCase()] = Section_1.default;
RenderMap.Map[RenderEnums_1.RendererType.sectionWithFooter.toLowerCase()] = SectionWithFooter_1.default;
RenderMap.Map[RenderEnums_1.RendererType.sectionBody.toLowerCase()] = SectionBody_1.default;
RenderMap.Map[RenderEnums_1.RendererType.sectionFooter.toLowerCase()] = SectionFooter_1.default;
RenderMap.Map[RenderEnums_1.RendererType.envelop.toLowerCase()] = Envelop_1.default;
RenderMap.Map[RenderEnums_1.RendererType.pin.toLowerCase()] = PinButton_1.default;
RenderMap.Map[RenderEnums_1.RendererType.horizontalScroll.toLowerCase()] = HorizontalScroll_1.default;
RenderMap.Map[RenderEnums_1.RendererType.sectionSeparator.toLowerCase()] = SectionSeparator_1.default;
RenderMap.Map[RenderEnums_1.RendererType.controlSeparator.toLowerCase()] = ControlSeparator_1.default;
RenderMap.Map[RenderEnums_1.RendererType.tooltip.toLowerCase()] = Tooltip_1.default;
RenderMap.Map[RenderEnums_1.RendererType.accessKeyTooltip.toLowerCase()] = AccessKeyTooltip_1.default;
var Factory = /** @class */ (function (_super) {
    __extends(Factory, _super);
    function Factory() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.factoriedRef = undefined;
        return _this;
    }
    Factory.prototype.render = function (props) {
        var _this = this;
        var tag = null;
        if (props.ftype) {
            var GTag = ControlFactory_1.default.getTagByType(props.ftype);
            if (!GTag) {
                GTag = RenderMap.Map[props.ftype.toLowerCase()];
            }
            if (GTag) {
                tag = GTag;
            }
        }
        if (tag) {
            var GTag = tag;
            return preact_1.h(GTag, __assign({ ref: function (ref) { return _this.factoriedRef = ref; } }, props));
        }
        return null;
    };
    return Factory;
}(preact_1.Component));
exports.default = Factory;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var CommonImport_1 = __webpack_require__(0);
var CommonImport_2 = __webpack_require__(0);
//DONE
var BaseMenuItem = /** @class */ (function (_super) {
    __extends(BaseMenuItem, _super);
    function BaseMenuItem(props) {
        var _this = _super.call(this, props) || this;
        _this.selfCls = [CommonImport_2.RibbonClasses.menuitem];
        _this.id = "";
        _this.type = "";
        _this.id = props.id;
        _this.type = props.type;
        return _this;
    }
    BaseMenuItem.prototype.getCls = function (inputCls, props) {
        var itemId = CommonImport_1.ModelUtil.getId(props);
        var itemVisState = undefined;
        if (props.contextData && props.contextData.compositeVisData
            && props.contextData.compositeVisData.items
            && props.contextData.compositeVisData.items.length) {
            itemVisState = CommonImport_1.ModelUtil.getItemInArr('id', itemId, props.contextData.compositeVisData.items);
        }
        var cls = classNames(inputCls, CommonImport_2.RibbonClasses.tooltipWrapper, (props.layoutData && props.layoutData.customCls), (_a = {},
            _a["" + CommonImport_2.RibbonClasses.disable] = (itemVisState && itemVisState.enable == false),
            _a["" + CommonImport_2.RibbonClasses.hidden] = (itemVisState && itemVisState.visible == false),
            _a));
        return cls;
        var _a;
    };
    BaseMenuItem.prototype.isDisabled = function () {
        var itemId = CommonImport_1.ModelUtil.getId(this.props);
        var itemVisState = undefined;
        if (this.props.contextData && this.props.contextData.compositeVisData
            && this.props.contextData.compositeVisData.items
            && this.props.contextData.compositeVisData.items.length) {
            itemVisState = CommonImport_1.ModelUtil.getItemInArr('id', itemId, this.props.contextData.compositeVisData.items);
        }
        return (itemVisState && itemVisState.enable == false);
    };
    return BaseMenuItem;
}(preact_1.Component)); //end of class
exports.default = BaseMenuItem;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var RibbonControlType;
(function (RibbonControlType) {
    RibbonControlType["button"] = "button";
    RibbonControlType["buttonDropdown"] = "buttonDropdown";
    RibbonControlType["splitButton"] = "splitButton";
    RibbonControlType["colorPickerControl"] = "colorPickerControl";
    RibbonControlType["verticalSplitButton"] = "verticalSplitButton";
    RibbonControlType["inputDropdown"] = "inputDropdown";
})(RibbonControlType = exports.RibbonControlType || (exports.RibbonControlType = {}));
var MenuItemType;
(function (MenuItemType) {
    MenuItemType["menuitemHeader"] = "menuitemHeader";
    MenuItemType["menuitemHeaderNew"] = "menuitemHeaderNew";
    MenuItemType["menuitemSeparator"] = "menuitemSeparator";
    MenuItemType["MenuItemSeparatorNew"] = "MenuItemSeparatorNew";
    MenuItemType["menuitemWithItems"] = "menuitemWithItems";
    MenuItemType["menuitemWithModes"] = "menuitemWithModes";
    MenuItemType["menuitemColorgrid"] = "menuitemColorgrid";
    MenuItemType["menuItemColorRow"] = "menuItemColorRow";
    MenuItemType["menuItemColorCell"] = "menuItemColorCell";
    MenuItemType["menuItemMultiItem"] = "menuItemMultiItem";
    MenuItemType["menuItemImageButton"] = "menuItemImageButton";
    MenuItemType["inputDropdownMenuItem"] = "inputDropdownMenuItem";
    MenuItemType["colorPicker"] = "colorPicker";
    MenuItemType["colorPickerHeader"] = "ColorPickerHeader";
    MenuItemType["colorPickerGrid"] = "ColorPickerGrid";
    MenuItemType["colorPickerMenuItem"] = "colorPickerMenuItem";
})(MenuItemType = exports.MenuItemType || (exports.MenuItemType = {}));
var RendererType;
(function (RendererType) {
    RendererType["ribbon"] = "ribbon";
    RendererType["tabContainer"] = "tabContainer";
    RendererType["tab"] = "tab";
    RendererType["groupTab"] = "groupTab";
    RendererType["tabPanel"] = "tabPanel";
    RendererType["panel"] = "panel";
    RendererType["section"] = "section";
    RendererType["sectionWithFooter"] = "sectionWithFooter";
    RendererType["sectionBody"] = "sectionBody";
    RendererType["sectionFooter"] = "sectionFooter";
    RendererType["sectionSeparator"] = "sectionSeparator";
    RendererType["envelop"] = "envelop";
    RendererType["pin"] = "pin";
    RendererType["horizontalScroll"] = "horizontalScroll";
    RendererType["menu"] = "menu";
    RendererType["submenu"] = "submenu";
    RendererType["buttonPart"] = "buttonPart";
    RendererType["buttonPartWithColorDiv"] = "buttonPartWithColorDiv";
    RendererType["inputPart"] = "inputPart";
    RendererType["sectionLauncher"] = "sectionLauncher";
    RendererType["imageButton"] = "imageButton";
    RendererType["menuOpenerPart"] = "menuOpenerPart";
    RendererType["menuOpenerPartWithText"] = "menuOpenerPartWithText";
    RendererType["input"] = "input";
    RendererType["controlSeparator"] = "controlSeparator";
    RendererType["tooltip"] = "tooltip";
    RendererType["tooltipWithHeaderAndIconText"] = "tooltipWithHeaderAndIconText";
    RendererType["accessKeyTooltip"] = "accessKeyTooltip";
    RendererType["tooltipAccessKey"] = "tooltipAccessKey";
    RendererType["icon"] = "icon";
    RendererType["text"] = "text";
    RendererType["selectableButton"] = "selectable";
    RendererType["retainSelectionButton"] = "retainSelection";
    RendererType["statelessButton"] = "stateless";
    RendererType["inputDropdownMenu"] = "inputDropdownMenu";
})(RendererType = exports.RendererType || (exports.RendererType = {}));


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var CommonImport_1 = __webpack_require__(0);
var CommonImport_2 = __webpack_require__(0);
var BaseRibbonControl = /** @class */ (function (_super) {
    __extends(BaseRibbonControl, _super);
    function BaseRibbonControl(props) {
        var _this = _super.call(this, props) || this;
        _this.id = "";
        _this.type = "";
        _this.eventHandlerMap = {};
        _this.subscriptionMap = {};
        _this.type = props.type;
        _this.id = CommonImport_1.ModelUtil.getId(props);
        _this.pubSub = _this.props.pubSub;
        return _this;
    }
    BaseRibbonControl.prototype.componentDidMount = function () {
        if (this.props.controlMap) {
            this.props.controlMap.add("", this.id, this);
        }
        for (var key in this.eventHandlerMap) {
            this.subscriptionMap[key] = this.pubSub.subscribe(key, this.eventHandlerMap[key]);
        }
    };
    BaseRibbonControl.prototype.componentWillUnmount = function () {
        if (this.props.controlMap) {
            this.props.controlMap.remove("", this.id);
        }
        for (var key in this.subscriptionMap) {
            this.pubSub.unsubscribe(this.subscriptionMap[key]);
        }
    };
    BaseRibbonControl.prototype.triggerControlEvent = function (data) {
        this.pubSub.publish((CommonImport_2.Constants.nsControlAction + this.id), [data]);
    };
    return BaseRibbonControl;
}(preact_1.Component)); //end of class
exports.default = BaseRibbonControl;


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Constants = /** @class */ (function () {
    function Constants() {
    }
    Constants.nsControlAction = "nsControlAction/";
    Constants.nsRibbonAction = "nsRibbonAction/";
    Constants.themePrefix = "theme_";
    Constants.defaultTheme = "defaultTheme";
    Constants.scrollMargin = 50;
    Constants.underlineMark = "~";
    Constants.itemRefDefaultKey = "default";
    return Constants;
}());
exports.Constants = Constants;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var CommonImport_1 = __webpack_require__(0);
var BaseMenuItemNew = /** @class */ (function (_super) {
    __extends(BaseMenuItemNew, _super);
    function BaseMenuItemNew(props) {
        var _this = _super.call(this, props) || this;
        _this.id = "";
        _this.type = "";
        _this.type = props.type;
        _this.id = CommonImport_1.ModelUtil.getId(props);
        return _this;
    }
    return BaseMenuItemNew;
}(preact_1.Component)); //end of class
exports.default = BaseMenuItemNew;


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var InternalEvents;
(function (InternalEvents) {
    InternalEvents["elementClick"] = "elementClick";
    InternalEvents["elementDblClick"] = "elementDblClick";
    InternalEvents["elementHoverIn"] = "elementHoverIn";
    InternalEvents["elementHoverOut"] = "elementHoverOut";
    InternalEvents["menuOpenerClick"] = "menuOpenerClick";
    InternalEvents["menuItemClick"] = "menuItemClick";
    InternalEvents["menuItemMouseOver"] = "menuItemMouseOver";
    InternalEvents["menuItemMouseOut"] = "menuItemMouseOut";
    InternalEvents["activeTabChange"] = "activeTabChange";
    InternalEvents["tabStateChange"] = "tabStateChange";
    InternalEvents["pinStateChange"] = "pinStateChange";
    InternalEvents["containerResize"] = "containerResize";
    InternalEvents["focusChange"] = "focusChange";
    InternalEvents["hidemenu"] = "hidemenu";
    InternalEvents["showAccessKey"] = "showAccessKey";
    InternalEvents["hideAccessKey"] = "hideAccessKey";
    InternalEvents["nextControl"] = "nextControl";
    InternalEvents["previousControl"] = "previousControl";
})(InternalEvents = exports.InternalEvents || (exports.InternalEvents = {}));
var ExternalEvents;
(function (ExternalEvents) {
    ExternalEvents["onRibbonControlClick"] = "onRibbonControlClick";
    ExternalEvents["onRibbonControlDblClick"] = "onRibbonControlDblClick";
    ExternalEvents["onRibbonControlHoverIn"] = "onRibbonControlHoverIn";
    ExternalEvents["onRibbonControlHoverOut"] = "onRibbonControlHoverOut";
    ExternalEvents["onRibbonControlMenuOpenerClick"] = "onRibbonControlMenuOpenerClick";
    ExternalEvents["onRibbonPinned"] = "onRibbonPinned";
    ExternalEvents["onRibbonCollapsed"] = "onRibbonCollapsed";
    ExternalEvents["onContainerResize"] = "onContainerResize";
    ExternalEvents["onRibbonTabChange"] = "onRibbonTabChange";
    ExternalEvents["onRibbonLoaded"] = "onRibbonLoaded";
})(ExternalEvents = exports.ExternalEvents || (exports.ExternalEvents = {}));


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var RibbonClasses;
(function (RibbonClasses) {
    RibbonClasses["ribbonContainer"] = "lr_ribbonContainer";
    RibbonClasses["sectionLayout2Rows"] = "layout_2row";
    RibbonClasses["sectionLayout3Rows"] = "layout_3row";
    RibbonClasses["menusContainer"] = "lr_menusContainer";
    RibbonClasses["ribbon"] = "lr_ribbon";
    RibbonClasses["tabContainer"] = "lr_tabbar";
    RibbonClasses["tab"] = "lr_tab";
    RibbonClasses["tabpanel"] = "lr_tabpanel";
    RibbonClasses["panel"] = "lr_panel";
    RibbonClasses["sectionContainer"] = "lr_sectionCnt";
    RibbonClasses["sectionWrapper"] = "lr_sectionWrapper";
    RibbonClasses["section"] = "lr_section";
    RibbonClasses["section_separator"] = "lr_sectionseparator";
    RibbonClasses["sectionBody"] = "lr_sectionbody";
    RibbonClasses["sectionFooter"] = "lr_sectionfooter";
    RibbonClasses["sectionFooterWithLauncher"] = "lr_sectionFooterWithLauncher";
    RibbonClasses["sectionName"] = "lr_sectionName";
    RibbonClasses["sectionLauncher"] = "lr_sectionlauncher";
    RibbonClasses["sectionLauncherBtn"] = "lr_sectionLauncherBtn";
    RibbonClasses["envelop"] = "lr_envelop";
    RibbonClasses["envelop_vertical"] = "lr_envelop_v";
    RibbonClasses["envelop_horizontal"] = "lr_envelop_h";
    RibbonClasses["envelop_cell"] = "lr_envelop_cell";
    RibbonClasses["control"] = "lr_control";
    RibbonClasses["controlSeparator"] = "lr_separator_v";
    RibbonClasses["pin"] = "lr_pin";
    RibbonClasses["emptySpace"] = "lr_emptySpace";
    RibbonClasses["horizontalScroll"] = "lr_horizontalScroll";
    RibbonClasses["leftScrollButton"] = "lr_leftScrollButton";
    RibbonClasses["rightScrollButton"] = "lr_rightScrollButton";
    RibbonClasses["scrollContent"] = "lr_scrollContent";
    RibbonClasses["unpinnedState"] = "lr_unpinnedState";
    RibbonClasses["buttonControl"] = "lr_buttonControl";
    RibbonClasses["splitButtonDropdownControl"] = "lr_splitButtonDropdownControl";
    RibbonClasses["splitButtonControl"] = "lr_splitButtonControl";
    RibbonClasses["colorPickerControl"] = "lr_colorPickerControl";
    RibbonClasses["verticalSplitButtonControl"] = "lr_verticalSplitButtonControl";
    RibbonClasses["ButtonDropdownControl"] = "lr_buttonDropdownControl";
    RibbonClasses["button"] = "lr_button";
    RibbonClasses["buttonWrapper"] = "lr_buttonWrapper";
    RibbonClasses["menuopenerWrapper"] = "lr_menuopenerWrapper";
    RibbonClasses["tooltipWrapper"] = "lr_tooltipWrapper";
    RibbonClasses["controlPartButton"] = "lr_controlPartButton";
    RibbonClasses["controlPartInput"] = "lr_controlPartInput";
    RibbonClasses["controlPartColorDiv"] = "changingColor ";
    RibbonClasses["menu_opener"] = "lr_menuopener";
    RibbonClasses["menu_openerWithText"] = "lr_menuopenerWithText";
    RibbonClasses["menu"] = "lr_menu";
    RibbonClasses["menuitem"] = "lr_menuitem";
    RibbonClasses["menuitemIconText"] = "lr_menuitemIconText";
    RibbonClasses["menuitemText"] = "lr_menuitemText";
    RibbonClasses["menuitemWithSubmenu"] = "lr_menuitemWithSubmenu";
    RibbonClasses["menuitemTextWithSubmenu"] = "lr_menuitemTextWithSubmenu";
    RibbonClasses["multiItemMultiItem"] = "lr_multiItemMultiItem";
    RibbonClasses["multiItemWrapper"] = "lr_multiItemWrapper";
    RibbonClasses["menuitemColorGrid"] = "lr_menuitemColorGrid";
    RibbonClasses["menuitemLinestyle"] = "lr_menuitemLinestyle";
    RibbonClasses["menuItemHeader"] = "lr_menuItemHeader";
    RibbonClasses["colorGrid"] = "lr_colorGrid";
    RibbonClasses["colorRowWrapper"] = "lr_colorRowWrapper";
    RibbonClasses["colorCell"] = "lr_colorCell";
    RibbonClasses["menuitem_separator"] = "lr_menuitem_separator";
    RibbonClasses["menuitem_separator_fullWidth"] = "lr_menuitem_separator_fullWidth";
    RibbonClasses["menuitem_separator_withOffset"] = "lr_menuitem_separator_withOffset";
    RibbonClasses["submenu"] = "lr_submenu";
    RibbonClasses["menuItemImageButton"] = "lr_menuItemImageButton";
    RibbonClasses["icon"] = "lr_icon";
    RibbonClasses["text"] = "lr_text";
    RibbonClasses["active"] = "active";
    RibbonClasses["toggled"] = "lr_toggled";
    RibbonClasses["disable"] = "lr_disable";
    RibbonClasses["hidden"] = "lr_hidden";
    RibbonClasses["focused"] = "lr_focused";
    RibbonClasses["menuOpenInControl"] = "lr_menuOpenInControl";
    RibbonClasses["icon_wrapper"] = "icon-wrapper";
    RibbonClasses["icon_binder"] = "icon-binder";
    RibbonClasses["icon_img"] = "icon";
    RibbonClasses["tooltip"] = "lr_tooltip";
    RibbonClasses["tooltipWithImg"] = "lr_tooltipWithImg";
    RibbonClasses["tooltipWithNoHeader"] = "lr_tooltipWithNoHeader";
    RibbonClasses["itemTooltip"] = "itemTooltip";
    RibbonClasses["accessKeyTooltip"] = "lr_accesskeytooltip ";
    RibbonClasses["inputDropdown"] = "lr_inputDropdown";
    RibbonClasses["menuListOpened"] = "lr_menuListOpened";
    RibbonClasses["inputDropdownMenu"] = "lr_inputDropdownMenu";
    RibbonClasses["inputDropdownMenuItem"] = "lr_inputDropdownMenuItem";
    RibbonClasses["inputMenuItem"] = "lr_inputMenuItem";
    RibbonClasses["inputDropdownMenuItemText"] = "lr_inputDropdownMenuItemText";
    RibbonClasses["fontFamilyMode"] = "lr_fontFamilyMode";
    RibbonClasses["fontSizeMode"] = "lr_fontSizeMode";
    RibbonClasses["inputMenuItemFocused"] = "lr_inputMenuItemFocused";
    RibbonClasses["buttonSelected"] = "lr_buttonSelected";
    RibbonClasses["selectableButton"] = "lr_selectableButton";
    RibbonClasses["retainSelectionButton"] = "lr_retainSelectionButton";
    RibbonClasses["statelessButton"] = "lr_statelessButton";
    RibbonClasses["imageButton"] = "lr_imageButton";
    RibbonClasses["bottomColor"] = "lr_bottomColor";
    RibbonClasses["colorPicker"] = "lr_colorpicker";
    RibbonClasses["colorPickerGrid"] = "lr_colorpicker_grid";
    RibbonClasses["colorPickerHeader"] = "lr_colorpicker_header";
    RibbonClasses["colorPickerMenuItem"] = "lr_colorpicker_menuItem";
    RibbonClasses["colorPickerRow"] = "lr_colorpicker_row";
    RibbonClasses["colorPickerCell"] = "lr_colorpicker_cell";
    RibbonClasses["colorPickerMultipleRow"] = "lr_colorpicker_multiple_rows";
    RibbonClasses["colorPickerSingleRow"] = "lr_colorpicker_single_row";
    RibbonClasses["colorPickerHighlight"] = "lr_colorpicker_highlight";
    RibbonClasses["colorPickerCellInnerDiv"] = "lr_colorpicker_cell_inner_div";
    RibbonClasses["colorPickerFocusedItem"] = "lr_colorPicker_focused_item";
    RibbonClasses["menuColorpicker"] = "lr_menu_colorpicker";
    RibbonClasses["menuInputDropdown"] = "lr_menu_inputDropdown";
    RibbonClasses["FontColor"] = "lr_fontColor";
    RibbonClasses["FillColor"] = "lr_fillColor";
})(RibbonClasses = exports.RibbonClasses || (exports.RibbonClasses = {}));


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var IdEnum;
(function (IdEnum) {
    IdEnum["TAB_HOME"] = "id_home";
    IdEnum["TAB_INSERT"] = "id_insert";
    IdEnum["TAB_PAGE_LAYOUT"] = "id_pageLayout";
    IdEnum["TAB_FORMULAS"] = "id_formulas";
    IdEnum["TAB_DATA"] = "id_data";
    IdEnum["TAB_REVIEW"] = "id_review";
    IdEnum["TAB_VIEW"] = "id_view";
    IdEnum["TAB_DEVELOPER"] = "id_developer";
    IdEnum["TAB_TEAM"] = "id_team";
    IdEnum["TAB_CHART_TOOLS_DESIGN"] = "id___";
    IdEnum["TAB_CHART_TOOLS_FORMAT"] = "id___";
    IdEnum["CONTROL_PASTE"] = "id_paste";
    IdEnum["ITEM_PASTE_PASTE"] = "id_Paste_Options_3";
    IdEnum["ITEM_PASTE_FORMULA"] = "id_Paste_Options_4";
    IdEnum["ITEM_PASTE_FORMULA_AND_NUMBER_FORMATTING"] = "id_Paste_Options_5";
    IdEnum["ITEM_PASTE_NO_BORDER"] = "id_Paste_Options_6";
    IdEnum["ITEM_PASTE_KEEP_SOURCE_COL_WIDTH"] = "id_Paste_Options_7";
    IdEnum["ITEM_PASTE_KEEP_SOURCE_FORMATTING"] = "id_Paste_Options_8";
    IdEnum["ITEM_PASTE_MATCH_DESTINATION_FORMATTING"] = "id_Paste_Options_9";
    IdEnum["ITEM_PASTE_SPECIAL"] = "id_Paste_Options_Paste_special";
    IdEnum["CONTROL_CUT"] = "id_cut";
    IdEnum["CONTROL_COPY"] = "id_copy";
    IdEnum["ITEM_COPY_COPY"] = "id_item_copy";
    IdEnum["ITEM_COPY_COPY_AS_PICTURE"] = "id_item_copyAsPicture";
    IdEnum["CONTROL_FORMATPAINTER"] = "id_formatpainter";
    IdEnum["CONTROL_CLIPBOARD_SECTION_LAUNCHER"] = "id_clipboard_section_launcher";
    IdEnum["CONTROL_FONTFAMILY"] = "id_fontFamily";
    IdEnum["ITEM_FONTFAMILY_CALIBRI_LIGHT"] = "id_item_CalibriLight";
    IdEnum["ITEM_FONTFAMILY_CALIBRI"] = "id_item_Calibri";
    IdEnum["ITEM_FONTFAMILY_AGENCYFB"] = "id_item_AgencyFB";
    IdEnum["ITEM_FONTFAMILY_ALGERIAN"] = "id_item_Algerian";
    IdEnum["ITEM_FONTFAMILY_ARIAL"] = "id_item_Arial";
    IdEnum["ITEM_FONTFAMILY_ARIALBLACK"] = "id_item_ArialBlack";
    IdEnum["ITEM_FONTFAMILY_BELLMT"] = "id_item_BellMT";
    IdEnum["ITEM_FONTFAMILY_BERLINSANFB"] = "lrc_font_BerlinSansFb";
    IdEnum["ITEM_FONTFAMILY_BROADWAY"] = "lrc_font_Broadway";
    IdEnum["ITEM_FONTFAMILY_CAMBRIA"] = "id_item_Cambria";
    IdEnum["ITEM_FONTFAMILY_CENTURY"] = "id_item_Century";
    IdEnum["ITEM_FONTFAMILY_FORTE"] = "id_item_Forte";
    IdEnum["ITEM_FONTFAMILY_GEORGIA"] = "id_item_Georgia";
    IdEnum["ITEM_FONTFAMILY_IMPACT"] = "id_item_Impact";
    IdEnum["ITEM_FONTFAMILY_JOKERMAN"] = "id_item_Jokerman";
    IdEnum["ITEM_FONTFAMILY_LUCIDA_SANS"] = "id_item_Lucida_Sans";
    IdEnum["ITEM_FONTFAMILY_SEGOEUI"] = "id_item_Segoe_UI";
    IdEnum["ITEM_FONTFAMILY_TAHOMA"] = "id_item_Tahoma";
    IdEnum["ITEM_FONTFAMILY_TIMES_NEW_ROMAN"] = "id_item_Times_New_Roman";
    IdEnum["ITEM_FONTFAMILY_VERDANA"] = "id_item_Verdana";
    IdEnum["CONTROL_FONTSIZE"] = "id_fontsize";
    IdEnum["ITEM_FONTSIZE_8"] = "id_item_8";
    IdEnum["ITEM_FONTSIZE_9"] = "id_item_9";
    IdEnum["ITEM_FONTSIZE_10"] = "id_item_10";
    IdEnum["ITEM_FONTSIZE_11"] = "id_item_11";
    IdEnum["ITEM_FONTSIZE_12"] = "id_item_12";
    IdEnum["ITEM_FONTSIZE_14"] = "id_item_14";
    IdEnum["ITEM_FONTSIZE_16"] = "id_item_16";
    IdEnum["ITEM_FONTSIZE_18"] = "id_item_18";
    IdEnum["ITEM_FONTSIZE_20"] = "id_item_20";
    IdEnum["ITEM_FONTSIZE_22"] = "id_item_22";
    IdEnum["ITEM_FONTSIZE_24"] = "id_item_24";
    IdEnum["ITEM_FONTSIZE_26"] = "id_item_26";
    IdEnum["ITEM_FONTSIZE_28"] = "id_item_28";
    IdEnum["ITEM_FONTSIZE_36"] = "id_item_36";
    IdEnum["ITEM_FONTSIZE_48"] = "id_item_48";
    IdEnum["ITEM_FONTSIZE_72"] = "id_item_72";
    IdEnum["CONTROL_INCREASE_FONT"] = "id_increasefont";
    IdEnum["CONTROL_DECREASE_FONT"] = "id_decreasefont";
    IdEnum["CONTROL_BOLD"] = "id_bold";
    IdEnum["CONTROL_ITALIC"] = "id_italic";
    IdEnum["CONTROL_UNDERLINE"] = "id_underline";
    IdEnum["ITEM_UNDERLINE_SINGLE"] = "id_underline_single";
    IdEnum["ITEM_UNDERLINE_DOUBLE"] = "id_underline_double";
    IdEnum["CONTROL_BORDER"] = "id_border";
    IdEnum["ITEM_BORDER_BOTTOM_BORDER"] = "id_item_BottomBorder";
    IdEnum["ITEM_BORDER_TOP_BORDER"] = "id_item_TopBorder";
    IdEnum["ITEM_BORDER_LEFT_BORDER"] = "id_item_LeftBorder";
    IdEnum["ITEM_BORDER_RIGHT_BORDER"] = "id_item_RightBorder";
    IdEnum["ITEM_BORDER_NO_BORDERS"] = "id_item_NoBorder";
    IdEnum["ITEM_BORDER_ALL_BORDERS"] = "id_item_AllBorders";
    IdEnum["ITEM_BORDER_OUTSIDE_BORDERS"] = "id_item_OutsideBorders";
    IdEnum["ITEM_BORDER_THICK_OUTSIDE_BORDERS"] = "id_item_ThickOutsideBorder";
    IdEnum["ITEM_BORDER_BOTTOM_DOUBLE_BORDER"] = "id_item_BottomDoubleBorder";
    IdEnum["ITEM_BORDER_THICK_BOTTOM_BORDER"] = "id_item_ThickBottomBorder";
    IdEnum["ITEM_BORDER_TOP_N_BOTTOM_BORDER"] = "id_item_TopAndBottomBorder";
    IdEnum["ITEM_BORDER_TOP_N_THICK_BOTTOM_BORDER"] = "id_item_TopAndThickBottomBorder";
    IdEnum["ITEM_BORDER_TOP_N_DOUBLE_BOTTOM_BORDER"] = "id_item_TopAndDoubleBottomBorder";
    IdEnum["ITEM_BORDER_DRAW_BORDER"] = "id_item_DrawBorder";
    IdEnum["ITEM_BORDER_DRAW_BORDER_GRID"] = "id_item_DrawBorderGrid";
    IdEnum["ITEM_BORDER_ERASE_BORDER"] = "id_item_EraseBorder";
    IdEnum["ITEM_BORDER_LINECOLOR"] = "id_item_LineColor";
    IdEnum["ITEM_BORDER_LINECOLOR_COLORGRID"] = "color_picker_2";
    IdEnum["ITEM_BORDER_LINESTYLE"] = "id_item_LineStyle";
    IdEnum["ITEM_BORDER_LINESTYLE_TYPE0"] = "id_linestyle0";
    IdEnum["ITEM_BORDER_LINESTYLE_TYPE1"] = "id_linestyle1";
    IdEnum["ITEM_BORDER_LINESTYLE_TYPE2"] = "id_linestyle2";
    IdEnum["ITEM_BORDER_LINESTYLE_TYPE3"] = "id_linestyle3";
    IdEnum["ITEM_BORDER_LINESTYLE_TYPE4"] = "id_linestyle4";
    IdEnum["ITEM_BORDER_LINESTYLE_TYPE5"] = "id_linestyle5";
    IdEnum["ITEM_BORDER_LINESTYLE_TYPE6"] = "id_linestyle6";
    IdEnum["ITEM_BORDER_LINESTYLE_TYPE7"] = "id_linestyle7";
    IdEnum["ITEM_BORDER_LINESTYLE_TYPE8"] = "id_linestyle8";
    IdEnum["ITEM_BORDER_LINESTYLE_TYPE9"] = "id_linestyle9";
    IdEnum["ITEM_BORDER_LINESTYLE_TYPE10"] = "id_linestyle10";
    IdEnum["ITEM_BORDER_LINESTYLE_TYPE11"] = "id_linestyle11";
    IdEnum["ITEM_BORDER_LINESTYLE_TYPE12"] = "id_linestyle12";
    IdEnum["ITEM_BORDER_LINESTYLE_TYPE13"] = "id_linestyle13";
    IdEnum["ITEM_BORDER_MORE_BORDERS"] = "id_item_MoreBorders";
    IdEnum["CONTROL_FILLCOLOR"] = "id_fillcolor";
    IdEnum["CONTROL_FONTCOLOR"] = "id_fontcolor";
    IdEnum["CONTROL_FONT_SECTION_LAUNCHER"] = "id_font_section_launcher";
    IdEnum["CONTROL_ALIGN_TOP"] = "id_topAlign";
    IdEnum["CONTROL_ALIGN_MIDDLE"] = "id_middlealign";
    IdEnum["CONTROL_ALIGN_BOTTOM"] = "id_bottomAlign";
    IdEnum["CONTROL_ALIGN_LEFT"] = "id_leftAlign";
    IdEnum["CONTROL_ALIGN_CENTER"] = "id_centerAlign";
    IdEnum["CONTROL_ALIGN_RIGHT"] = "id_rightAlign";
    IdEnum["CONTROL_ORIENTATION"] = "id_orientation";
    IdEnum["CONTROL_DECREASE_INDENT"] = "id_decreaseIndent";
    IdEnum["CONTROL_INCREASE_INDENT"] = "id_increaseIndent";
    IdEnum["CONTROL_WRAPTEXT"] = "id_wrapText";
    IdEnum["CONTROL_MERGE_N_CENTER"] = "id_mergeAndCenter";
    IdEnum["ITEM_MERGE_N_CENTER"] = "id_item_mergeAndCenter";
    IdEnum["ITEM_MERGE_ACROSS"] = "id_item_MergeAcross";
    IdEnum["ITEM_MERGE_CELLS"] = "id_item_MergeCells";
    IdEnum["ITEM_UNMERGE_CELLS"] = "id_item_Unmerge";
    IdEnum["CONTROL_ALIGNMENT_SECTION_LAUNCHER"] = "id_alignment_section_launcher";
    IdEnum["CONTROL_NUMBER_FORMAT"] = "id_numberFormat";
    IdEnum["ITEM_NUMBER_FORMAT_GENERAL"] = "id_item_General";
    IdEnum["ITEM_NUMBER_FORMAT_NUMBER"] = "id_item_Number";
    IdEnum["ITEM_NUMBER_FORMAT_CURRENCY"] = "id_item_Currency";
    IdEnum["ITEM_NUMBER_FORMAT_ACCOUNTING"] = "id_item_Accounting";
    IdEnum["ITEM_NUMBER_FORMAT_SHORTDATE"] = "id_item_ShortDate";
    IdEnum["ITEM_NUMBER_FORMAT_LONGDATE"] = "id_item_LongDate";
    IdEnum["ITEM_NUMBER_FORMAT_TIME"] = "id_item_Time";
    IdEnum["ITEM_NUMBER_FORMAT_PERCENTAGE"] = "id_item_Percentage";
    IdEnum["ITEM_NUMBER_FORMAT_FRACTION"] = "id_item_Fraction";
    IdEnum["ITEM_NUMBER_FORMAT_SCIENTIFIC"] = "id_item_Scientific";
    IdEnum["ITEM_NUMBER_FORMAT_TEXT"] = "id_item_Text";
    IdEnum["ITEM_NUMBER_FORMAT_CUSTOM"] = "id_item_Custom";
    IdEnum["CONTROL_ACCOUNTING_NUMBER_FORMAT"] = "id_AccountingNumberFormat";
    IdEnum["CONTROL_PERCENT_STYLE"] = "id_PercentStyle";
    IdEnum["CONTROL_COMMA_STYLE"] = "id_CommaStyle";
    IdEnum["CONTROL_INCREASE_DECIMAL"] = "id_IncreaseDecimal";
    IdEnum["CONTROL_DECREASE_DECIMAL"] = "id_DecreaseDecimal";
    IdEnum["CONTROL_NUMBER_SECTION_LAUNCHER"] = "id_number_section_launcher";
    IdEnum["CONTROL_CONDITIONAL_FORMATTING"] = "id_conditionalFormatting";
    IdEnum["CONTROL_FORMAT_AS_TABLE"] = "id_FormatAsTable";
    IdEnum["CONTROL_STYLES"] = "id_CellStyles";
    IdEnum["CONTROL_INSERT"] = "id_insert";
    IdEnum["ITEM_INSERT_CELLS"] = "id_item_insert_cells";
    IdEnum["ITEM_INSERT_SHEET_ROWS"] = "id_item_insert_sheet_rows";
    IdEnum["ITEM_INSERT_SHEET_COLUMNS"] = "id_item_insert_sheet_columns";
    IdEnum["ITEM_INSERT_SHEET"] = "id_item_insert_sheet";
    IdEnum["CONTROL_DELETE"] = "id_delete";
    IdEnum["ITEM_DELETE_CELLS"] = "id_item_delete_cells";
    IdEnum["ITEM_DELETE_SHEET_ROWS"] = "id_item_delete_sheet_rows";
    IdEnum["ITEM_DELETE_SHEET_COLUMNS"] = "id_item_delete_sheet_columns";
    IdEnum["ITEM_DELETE_SHEET"] = "id_item_delete_sheet";
    IdEnum["CONTROL_FORMAT"] = "id_format";
    IdEnum["CONTROL_AUTOSUM"] = "id_AutoSum";
    IdEnum["ITEM_AUTOSUM_SUM"] = "id_item_sum";
    IdEnum["ITEM_AUTOSUM_AVERAGE"] = "id_item_average";
    IdEnum["ITEM_AUTOSUM_COUNT_NUMBERS"] = "id_item_countNumbers";
    IdEnum["ITEM_AUTOSUM_MAX"] = "id_item_max";
    IdEnum["ITEM_AUTOSUM_MIN"] = "id_item_min";
    IdEnum["CONTROL_FILL"] = "id_Fill";
    IdEnum["CONTROL_CLEAR"] = "id_Clear";
    IdEnum["ITEM_CLEAR_ALL"] = "id_item_clear_all";
    IdEnum["ITEM_CLEAR_FORMATS"] = "id_item_clear_formats";
    IdEnum["ITEM_CLEAR_CONTENTS"] = "id_item_clear_contents";
    IdEnum["ITEM_CLEAR_COMMENTS"] = "id_item_clear_comments";
    IdEnum["ITEM_CLEAR_HYPERLINKS"] = "id_item_clear_hyperlinks";
    IdEnum["ITEM_CLEAR_REMOVE_HYPERLINKS"] = "id_item_clear_remove_hyperlinks";
    IdEnum["CONTROL_SORT_AND_FILTER"] = "id_SortFilter";
    IdEnum["CONTROL_FIND_AND_SELECT"] = "id_FindNSelect";
    //formula tab
    IdEnum["CONTROL_INSERT_FUNCTION"] = "id_insertFunction";
    IdEnum["CONTROL_FORMULA_AUTOSUM"] = "id_formula_AutoSum";
    IdEnum["CONTROL_RECENTLY_USED"] = "id_RecentlyUsed";
    IdEnum["CONTROL_FINANCIAL"] = "id_Financial";
    IdEnum["CONTROL_LOGICAL"] = "id_Logical";
    IdEnum["CONTROL_TEXT"] = "id_formula_text";
    IdEnum["CONTROL_DATE_AND_TIME"] = "id_DateNTime";
    IdEnum["CONTROL_LOOKUP_AND_REFERENCE"] = "id_LookupNReference";
    IdEnum["CONTROL_MATH_AND_TRIGONOMETRY"] = "id_MathNTrig";
    IdEnum["CONTROL_MORE_FUNCTIONS"] = "id_MoreFunctions";
})(IdEnum = exports.IdEnum || (exports.IdEnum = {}));


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var RenderEnums_1 = __webpack_require__(6);
var menuItemFilterMap = /** @class */ (function () {
    function menuItemFilterMap() {
    }
    menuItemFilterMap.itemTypeFocusable = [RenderEnums_1.MenuItemType.menuItemColorCell,
        RenderEnums_1.MenuItemType.menuItemImageButton
    ];
    menuItemFilterMap.itemTypeToggleable = [];
    menuItemFilterMap.validTypeForItemIconTooltipMap = [];
    menuItemFilterMap.validTypeForItemTooltipMap = [RenderEnums_1.MenuItemType.menuItemImageButton,
        RenderEnums_1.MenuItemType.menuItemColorCell,
    ];
    menuItemFilterMap.validTypeForDisplayTextMap = [];
    menuItemFilterMap.validTypeForItemVisDataMap = [RenderEnums_1.MenuItemType.menuitemHeader,
        RenderEnums_1.MenuItemType.menuitemSeparator
    ];
    menuItemFilterMap.allValidMenuItemTypeMap = [RenderEnums_1.MenuItemType.menuitemHeader,
        RenderEnums_1.MenuItemType.menuitemSeparator,
        //MenuItemType.menuitemWithColorgrid,
        RenderEnums_1.MenuItemType.menuitemColorgrid,
    ];
    /* static validMultiItemArr= [MenuItemType.menuitemColorgrid,MenuItemType.menuItemColorRow,
        MenuItemType.menuItemMultiItem]; */
    menuItemFilterMap.itemTypeForKeyboard = [];
    return menuItemFilterMap;
}());
exports.menuItemFilterMap = menuItemFilterMap;
var controlFilterMap = /** @class */ (function () {
    function controlFilterMap() {
    }
    controlFilterMap.allValidControlTypesMap = [RenderEnums_1.RibbonControlType.button,
        RenderEnums_1.RibbonControlType.buttonDropdown,
        RenderEnums_1.RibbonControlType.splitButton,
        RenderEnums_1.RibbonControlType.inputDropdown];
    return controlFilterMap;
}());
exports.controlFilterMap = controlFilterMap;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SectionControlSpacingMode;
(function (SectionControlSpacingMode) {
    SectionControlSpacingMode["twoRows"] = "2rows";
    SectionControlSpacingMode["threeRows"] = "3rows";
})(SectionControlSpacingMode = exports.SectionControlSpacingMode || (exports.SectionControlSpacingMode = {}));
var OrientationType;
(function (OrientationType) {
    OrientationType["horizontal"] = "horizontal";
    OrientationType["vertical"] = "vertical";
})(OrientationType = exports.OrientationType || (exports.OrientationType = {}));
var AccessKeyLevel;
(function (AccessKeyLevel) {
    AccessKeyLevel["tab"] = "tab";
    AccessKeyLevel["panel"] = "panel";
    AccessKeyLevel["menu"] = "menu";
})(AccessKeyLevel = exports.AccessKeyLevel || (exports.AccessKeyLevel = {}));
var themeNames;
(function (themeNames) {
    themeNames["default"] = "default";
})(themeNames = exports.themeNames || (exports.themeNames = {}));
var ErrorType;
(function (ErrorType) {
    ErrorType["incorrectTypeInNode"] = "this json node has incorrect type {0}";
})(ErrorType = exports.ErrorType || (exports.ErrorType = {}));
var Keycodes;
(function (Keycodes) {
    Keycodes[Keycodes["BACKSPACE"] = 8] = "BACKSPACE";
    Keycodes[Keycodes["TAB"] = 9] = "TAB";
    Keycodes[Keycodes["ENTER"] = 13] = "ENTER";
    Keycodes[Keycodes["SHIFT"] = 16] = "SHIFT";
    Keycodes[Keycodes["CTRL"] = 17] = "CTRL";
    Keycodes[Keycodes["ALT"] = 18] = "ALT";
    Keycodes[Keycodes["ESCAPE"] = 27] = "ESCAPE";
    Keycodes[Keycodes["SPACE"] = 32] = "SPACE";
    Keycodes[Keycodes["PAGE_UP"] = 33] = "PAGE_UP";
    Keycodes[Keycodes["PAGE_DOWN"] = 34] = "PAGE_DOWN";
    Keycodes[Keycodes["END"] = 35] = "END";
    Keycodes[Keycodes["HOME"] = 36] = "HOME";
    Keycodes[Keycodes["LEFT_ARROW"] = 37] = "LEFT_ARROW";
    Keycodes[Keycodes["UP_ARROW"] = 38] = "UP_ARROW";
    Keycodes[Keycodes["RIGHT_ARROW"] = 39] = "RIGHT_ARROW";
    Keycodes[Keycodes["DOWN_ARROW"] = 40] = "DOWN_ARROW";
    Keycodes[Keycodes["INSERT"] = 45] = "INSERT";
    Keycodes[Keycodes["DELETE"] = 46] = "DELETE";
    Keycodes[Keycodes["F4"] = 115] = "F4";
    Keycodes[Keycodes["F10"] = 121] = "F10";
})(Keycodes = exports.Keycodes || (exports.Keycodes = {}));
;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var preact_context_1 = __webpack_require__(34);
var defaultArgs = {
    ribbonModel: undefined,
    controlMap: undefined,
    pubSub: undefined
};
exports.MyContext = preact_context_1.createContext(defaultArgs);


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var RibbonConfiguration = /** @class */ (function () {
    function RibbonConfiguration() {
    }
    RibbonConfiguration.enableTooltip = true;
    RibbonConfiguration.enableAccessKey = false;
    RibbonConfiguration.enableScroll = true;
    return RibbonConfiguration;
}());
exports.RibbonConfiguration = RibbonConfiguration;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var Factory_1 = __webpack_require__(4);
var CommonViewImport_1 = __webpack_require__(3);
var CommonViewImport_2 = __webpack_require__(3);
var CommonViewImport_3 = __webpack_require__(3);
var SectionBody = /** @class */ (function (_super) {
    __extends(SectionBody, _super);
    function SectionBody() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selfCls = [CommonViewImport_1.RibbonClasses.sectionBody];
        return _this;
    }
    SectionBody.prototype.getCls = function (props) {
        var cls = classNames(this.selfCls, (_a = {},
            _a["" + CommonViewImport_1.RibbonClasses.sectionLayout2Rows] = (props.layoutData
                && props.layoutData.controlSpacingMode == CommonViewImport_2.SectionControlSpacingMode.twoRows),
            _a["" + CommonViewImport_1.RibbonClasses.sectionLayout3Rows] = (props.layoutData
                && props.layoutData.controlSpacingMode == CommonViewImport_2.SectionControlSpacingMode.threeRows),
            _a));
        return cls;
        var _a;
    };
    SectionBody.prototype.render = function (props) {
        var cls = this.getCls(props);
        return preact_1.h("div", { className: cls }, props.items.map(function (item, i) {
            var isValidTypeNode = CommonViewImport_3.Util.isValidNodeType(item, [CommonViewImport_2.RendererType.envelop]); //and controls
            if (!isValidTypeNode) {
                CommonViewImport_3.Util.raiseError(CommonViewImport_2.ErrorType.incorrectTypeInNode, item.type);
            }
            var newProps = __assign({}, item);
            newProps.ftype = item.type;
            return preact_1.h(Factory_1.default, __assign({}, newProps));
        }));
    };
    return SectionBody;
}(preact_1.Component));
exports.default = SectionBody;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CommonImport_1 = __webpack_require__(0);
var BaseButtonControl_1 = __webpack_require__(19);
var classNames = __webpack_require__(2);
var StatelessButton = /** @class */ (function (_super) {
    __extends(StatelessButton, _super);
    function StatelessButton(props) {
        var _this = _super.call(this, props) || this;
        _this.selfCls = [CommonImport_1.RibbonClasses.control, CommonImport_1.RibbonClasses.statelessButton];
        _this.setState({
            selected: false,
            retainSelection: false
        });
        return _this;
    }
    StatelessButton.prototype.shouldComponentUpdate = function (nextProps, nextState, nextContext) {
        nextState.selected = false; // To protect the state from changing by outside world
        nextState.retainSelected = false;
        return true; // Return false will not handle the visData changes so return true to restrict the selected from being true and honor the changes in visData from outside
    };
    StatelessButton.prototype.onClick = function (event, arg) {
        if (!this.state.enable) {
            return true;
        }
        this.setState({
            retainSelection: false,
            selected: false
        });
        _super.prototype.onClick.call(this, event, arg);
    };
    StatelessButton.prototype.getCls = function (inputCls, props) {
        var cls = _super.prototype.getCls.call(this, inputCls, props);
        cls = classNames(cls, (_a = {},
            _a["" + CommonImport_1.RibbonClasses.buttonSelected] = (this.state.selected),
            _a));
        return cls;
        var _a;
    };
    return StatelessButton;
}(BaseButtonControl_1.default));
exports.default = StatelessButton;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var Factory_1 = __webpack_require__(4);
var BaseRibbonControl_1 = __webpack_require__(7);
var CommonImport_1 = __webpack_require__(0);
var CommonImport_2 = __webpack_require__(0);
var CommonImport_3 = __webpack_require__(0);
var BaseButtonControl = /** @class */ (function (_super) {
    __extends(BaseButtonControl, _super);
    function BaseButtonControl(props) {
        var _this = _super.call(this, props) || this;
        _this.selfCls = [CommonImport_2.RibbonClasses.control, CommonImport_2.RibbonClasses.buttonControl];
        _this.isAccessKeyPresent = false;
        _this.setState({
            visible: (props.visData && props.visData.visible != null) ? props.visData.visible : true,
            enable: (props.visData && props.visData.enable != null) ? props.visData.enable : true
        });
        return _this;
    }
    BaseButtonControl.prototype.getControlState = function () {
        return {
            "type": this.props.type,
            "id": this.props.id,
            "stateData": {
                "selected": this.state.selected,
                "retainSelection": this.state.retainSelection
            },
            "visData": {
                "enable": this.state.enable,
                "visible": this.state.visible
            }
        };
    };
    BaseButtonControl.prototype.setControlState = function (state) {
        if (state == undefined) {
            return;
        }
        this.setState({
            "selected": (state.stateData === undefined || state.stateData.selected === undefined) ? this.state.selected : state.stateData.selected,
            "retainSelection": (state.stateData === undefined || state.stateData.retainSelection === undefined) ? this.state.retainSelection : state.stateData.retainSelection,
            "enable": (state.visData === undefined || state.visData.enable === undefined) ? this.state.enable : state.visData.enable,
            "visible": (state.visData === undefined || state.visData.visible === undefined) ? this.state.visible : state.visData.visible
        });
    };
    BaseButtonControl.prototype.componentDidMount = function () {
        _super.prototype.componentDidMount.call(this);
        CommonImport_1.ViewUtil.bindTooltips(this.eleRef);
    };
    BaseButtonControl.prototype.componentWillUnmount = function () {
        _super.prototype.componentWillUnmount.call(this);
        CommonImport_1.ViewUtil.bindTooltips(this.eleRef);
    };
    BaseButtonControl.prototype.onClick = function (event, arg) {
        //let controlState = this.getControlState();
        var eventArg = new CommonImport_2.ControlEventArg(CommonImport_2.InternalEvents.elementClick, this.props.id, this.props.id);
        this.triggerControlEvent(eventArg);
    };
    BaseButtonControl.prototype.onDoubleClick = function (event, arg) {
        var eventArg = new CommonImport_2.ControlEventArg(CommonImport_2.InternalEvents.elementClick, this.props.id, this.props.id);
        this.triggerControlEvent(eventArg);
    };
    BaseButtonControl.prototype.getCls = function (inputCls, props) {
        var cls = classNames(inputCls, CommonImport_2.RibbonClasses.tooltipWrapper, (props.layoutData && props.layoutData.customCls), (_a = {},
            _a["" + CommonImport_2.RibbonClasses.disable] = (this.state.enable == false),
            _a["" + CommonImport_2.RibbonClasses.hidden] = (this.state.visible == false),
            _a["" + CommonImport_2.RibbonClasses.focused] = (this.state.focused),
            _a));
        return cls;
        var _a;
    };
    BaseButtonControl.prototype.render = function (props) {
        var _this = this;
        var cls = this.getCls(this.selfCls, props);
        var newProps = {};
        var schemaMapper = {
            "icon": { "source": "layoutData.icon" },
            "text": { "source": "layoutData.text" }
        };
        CommonImport_1.ModelUtil.FillFromSchema(props, newProps, schemaMapper);
        newProps.mode = props.ftype;
        return preact_1.h("div", { className: classNames(cls, CommonImport_2.RibbonClasses.tooltipWrapper), onClick: this.onClick.bind(this), onDblClick: newProps.mode === "retainSelection" && this.onDoubleClick.bind(this), ref: function (eleRef) { return _this.eleRef = eleRef; } },
            preact_1.h(Factory_1.default, __assign({ ftype: CommonImport_3.RendererType.buttonPart }, newProps)),
            preact_1.h(Factory_1.default, { ftype: CommonImport_3.RendererType.tooltip, data: props.tooltip }));
    };
    return BaseButtonControl;
}(BaseRibbonControl_1.default)); //end of class
exports.default = BaseButtonControl;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Constants_1 = __webpack_require__(8);
var FilterMaps_1 = __webpack_require__(13);
var ModelUtil = /** @class */ (function () {
    function ModelUtil() {
    }
    ModelUtil.getId = function (node) {
        return node.id;
    };
    ModelUtil.getNextId = function () {
        return (this.lastId++).toString();
    };
    ModelUtil.getEffectiveItemId = function (node) {
        var newId = node.id || (node.text ? node.text : undefined);
        return newId ? newId.replace(/\s/g, "_") : ModelUtil.getNextId();
    };
    ModelUtil.getItemInArr = function (key, val, arr) {
        var i = 0;
        if (arr && arr.length) {
            for (i = 0; i < arr.length; i++) {
                if (arr[i] != null && arr[i][key] == val) {
                    return arr[i];
                }
            }
        }
    };
    ;
    ModelUtil.correctVisDataAtChild = function (selectedValue, displayMap) {
        var selectedDisplayInfoItem = {};
        if (displayMap && displayMap.length) {
            if (selectedValue) {
                selectedDisplayInfoItem = ModelUtil.getItemInArr('id', selectedValue, displayMap);
                if (!selectedDisplayInfoItem) {
                    selectedDisplayInfoItem = displayMap[0];
                }
                selectedValue = selectedDisplayInfoItem.id;
            }
            else {
                //first item
                selectedDisplayInfoItem = displayMap[0];
                selectedValue = selectedDisplayInfoItem.id;
            }
        }
        else {
            //raise exception
        }
        return selectedDisplayInfoItem;
    };
    ModelUtil.correctSelectedIdFromChildrenIds = function (selectedValue, displayMap) {
        var selectedDisplayInfoItem = {};
        if (displayMap && displayMap.length) {
            if (selectedValue) {
                selectedDisplayInfoItem = ModelUtil.getItemInArr('id', selectedValue, displayMap);
                if (!selectedDisplayInfoItem) {
                    selectedDisplayInfoItem = displayMap[0];
                }
                selectedValue = selectedDisplayInfoItem.id;
            }
            else {
                //first item
                selectedDisplayInfoItem = displayMap[0];
                selectedValue = selectedDisplayInfoItem.id;
            }
        }
        else {
            //raise exception
        }
        return selectedValue;
    };
    ModelUtil.FillFromSchema = function (srcJsonNode, destObj, schema, args) {
        if (destObj === void 0) { destObj = {}; }
        var eventProperty;
        var propList;
        var loopbreak = false;
        for (var key in schema) {
            if (typeof schema[key].source === "string") {
                propList = schema[key].source.split(".");
                eventProperty = srcJsonNode[propList[0]];
                loopbreak = false;
                for (var index = 1; index < propList.length; index++) {
                    if (eventProperty != undefined) {
                        eventProperty = eventProperty[propList[index]];
                    }
                    else {
                        loopbreak = true;
                        break;
                    }
                }
                if (loopbreak) {
                    destObj[key] = undefined;
                }
                else {
                    destObj[key] = eventProperty;
                }
            }
            else if (typeof schema[key].source === "function") {
                //check: added args
                //destObj[key] = schema[key].source.apply(this, [srcJsonNode, schema[key].args]);
                destObj[key] = schema[key].source(srcJsonNode, schema[key].args);
            }
        }
        return destObj;
    };
    ModelUtil.getChildrenItemPropertyMap = function (configData, propsSchema, validTypeArr) {
        var arr = [];
        if (configData && configData.items && configData.items.length) {
            if (validTypeArr && validTypeArr.length) {
                validTypeArr = validTypeArr.map(function (item) { return item.toLowerCase(); });
            }
            var i = 0;
            var items = configData.items;
            var newItem = {};
            for (i = 0; i < items.length; i++) {
                if (items[i] && items[i].type) {
                    if (validTypeArr.indexOf(items[i].type.toLowerCase()) > -1) {
                        newItem = {};
                        ModelUtil.FillFromSchema(items[i], newItem, propsSchema);
                        arr.push(newItem);
                    }
                    if (items[i].items && items[i].items.length) {
                        var nextArr = ModelUtil.getChildrenItemPropertyMap(items[i], propsSchema, validTypeArr);
                        arr = arr.concat(nextArr);
                    }
                    /*  // traversing items at non-standard places
                     let validMultiItemArr = menuItemFilterMap.validMultiItemArr;
                     if (validMultiItemArr.indexOf(items[i].type.toLowerCase()) > -1) {
                         if (items[i].layoutData.items.length) {
                             let nextArr = ModelUtil.getChildrenItemPropertyMap(items[i].layoutData, propsSchema, validTypeArr);
                             arr = arr.concat(nextArr);
                         }
                     } */
                }
            }
        }
        return arr;
    };
    ;
    ModelUtil.parseVisDataForItems = function (configData, validTypeArr) {
        var propsSchema = {
            "id": { "source": "id" },
            "enable": { "source": "visData.enable" },
            "visible": { "source": "visData.visible" }
        };
        return ModelUtil.getChildrenItemPropertyMap(configData, propsSchema, validTypeArr);
    };
    ;
    ModelUtil.parseIconTooltipForItems = function (configData) {
        var validTypeArr = FilterMaps_1.menuItemFilterMap.validTypeForItemIconTooltipMap;
        var propsSchema = {
            "id": { "source": "id" },
            "icon": { "source": "layoutData.icon" },
            "tooltip": { "source": "layoutData.tooltip" }
        };
        return ModelUtil.getChildrenItemPropertyMap(configData, propsSchema, validTypeArr);
    };
    ;
    ModelUtil.parseTooltipForItems = function (configData) {
        var validTypeArr = FilterMaps_1.menuItemFilterMap.validTypeForItemTooltipMap;
        var propsSchema = {
            "id": { "source": "id" },
            "tooltip": { "source": "tooltip" }
        };
        return ModelUtil.getChildrenItemPropertyMap(configData, propsSchema, validTypeArr);
    };
    ;
    ModelUtil.parseDisplayTextForItems = function (configData) {
        var validTypeArr = FilterMaps_1.menuItemFilterMap.validTypeForDisplayTextMap;
        var propsSchema = {
            "id": { "source": "id" },
            "text": { "source": "layoutData.text" }
        };
        return ModelUtil.getChildrenItemPropertyMap(configData, propsSchema, validTypeArr);
    };
    ;
    ModelUtil.parseIdDataForItems = function (configData, validTypeArr) {
        var propsSchema = {
            "id": { "source": "id" }
        };
        var IdsObjArr = ModelUtil.getChildrenItemPropertyMap(configData, propsSchema, validTypeArr);
        return IdsObjArr.map(function (idObj) { return idObj.id; });
    };
    ;
    ModelUtil.getInitialVisData = function (props) {
        return ModelUtil.getVisDataFromControlConfigJsonNode(props);
    };
    ModelUtil.getCompositeVisDataFromReactState = function (state) {
        return {
            control: ModelUtil.getVisDataFromReactState(state),
            items: state.itemsVisData
        };
    };
    ModelUtil.getVisDataFromReactState = function (state) {
        return {
            enable: ((state.controlVisData && state.controlVisData.enable == false) ? false : true),
            visible: ((state.controlVisData && state.controlVisData.visible == false) ? false : true)
        };
    };
    ModelUtil.getVisDataFromControlVisData = function (state) {
        return {
            enable: ((state.control && state.control.enable == false) ? false : true),
            visible: ((state.control && state.control.visible == false) ? false : true)
        };
    };
    ModelUtil.getVisDataFromControlConfigJsonNode = function (state) {
        return {
            enable: ((state.visData && state.visData.control && state.visData.control.enable == false) ? false : true),
            visible: ((state.visData && state.visData.control && state.visData.control.visible == false) ? false : true)
        };
    };
    ModelUtil.getPreviousOption = function (itemList, currentItem) {
        if (itemList && itemList.length) {
            var index = itemList.indexOf(currentItem);
            if (index >= 0) {
                var newIndex = (index + itemList.length - 1) % itemList.length;
                return itemList[newIndex];
            }
            else {
                return itemList[0];
            }
        }
    };
    ModelUtil.getNextOption = function (itemList, currentItem) {
        if (itemList && itemList.length) {
            var index = itemList.indexOf(currentItem);
            if (index >= 0) {
                var newIndex = (index + 1) % itemList.length;
                return itemList[newIndex];
            }
            else {
                return itemList[0];
            }
        }
    };
    ModelUtil.getTabIndexForControl = function (props, state) {
        var isKbAccessibilityOn = (state.kbAccessibilityActive
            && state.kbAccessibilityLevel == "control"
            && !(state.controlVisData && state.controlVisData.enable == false));
        return (isKbAccessibilityOn) ? 0 : undefined;
    };
    ModelUtil.getTabIndexForControlWithMenu = function (props, state) {
        var isKbAccessibilityOn = (state.kbAccessibilityActive
            && state.kbAccessibilityLevel == "control"
            && !(state.controlVisData && state.controlVisData.enable == false));
        return (state.isListOpen || isKbAccessibilityOn) ? 0 : undefined;
    };
    ModelUtil.getComponentRef = function (comp, fullId) {
        if (comp == undefined || fullId == undefined) {
            return undefined;
        }
        var splitIds = fullId.split("|");
        var ref = undefined;
        if (splitIds.length == 1 && comp.id == splitIds[0]) {
            ref = comp;
        }
        else {
            if (typeof comp.childrenRefs == "function") {
                var itemRefs = comp.childrenRefs();
                if (itemRefs) {
                    ref = this.getComponentRefByLoop(itemRefs, splitIds);
                }
            }
        }
        return ref;
    };
    ModelUtil.getComponentRefByLoop = function (itemRefs, splitIds) {
        if (itemRefs[Constants_1.Constants.itemRefDefaultKey]) {
            var nextItem = itemRefs[Constants_1.Constants.itemRefDefaultKey];
            if (nextItem) {
                if (typeof nextItem.childrenRefs == "function") {
                    var nextItemRefs = nextItem.childrenRefs();
                    if (nextItemRefs) {
                        itemRefs = nextItemRefs;
                    }
                }
            }
            return ModelUtil.getComponentRefByLoop(itemRefs, splitIds);
        }
        //todo: holdsState/passState var
        splitIds = splitIds.splice(1, (splitIds.length - 1));
        var currentId = splitIds[0];
        if (splitIds.length == 1) {
            return itemRefs[currentId];
        }
        else {
            var nextItem = itemRefs[currentId];
            if (nextItem) {
                if (typeof nextItem.childrenRefs == "function") {
                    var nextItemRefs = nextItem.childrenRefs();
                    if (nextItemRefs) {
                        itemRefs = nextItemRefs;
                    }
                }
            }
            return ModelUtil.getComponentRefByLoop(itemRefs, splitIds);
        }
    };
    ModelUtil.getItemDeepState = function (comp) {
        var stateData = {};
        if (typeof comp.getControlSelfState == "function") {
            stateData = comp.getControlSelfState();
        }
        if (typeof comp.childrenRefs == "function") {
            var itemRefs = comp.childrenRefs();
            if (itemRefs) {
                var itemsStateArr = ModelUtil.getItemDeepStateByLoop(itemRefs);
                if (itemsStateArr && itemsStateArr.length) {
                    stateData["items"] = itemsStateArr;
                }
            }
        }
        return stateData;
    };
    ModelUtil.getItemDeepStateByLoop = function (itemRefs) {
        if (itemRefs[Constants_1.Constants.itemRefDefaultKey]
            && typeof itemRefs[Constants_1.Constants.itemRefDefaultKey].childrenRefs == "function") {
            var nextItem = itemRefs[Constants_1.Constants.itemRefDefaultKey].childrenRefs();
            return ModelUtil.getItemDeepStateByLoop(nextItem);
        }
        else {
            var itemsStateArr = [];
            for (var key in itemRefs) {
                var obj = undefined;
                var nextItem = itemRefs[key];
                while (nextItem && !nextItem.holdsState && typeof nextItem.childrenRefs == "function") {
                    nextItem = nextItem.childrenRefs();
                }
                if (nextItem && nextItem.holdsState && typeof nextItem.getControlState == "function") {
                    obj = nextItem.getControlState();
                }
                else if (nextItem) {
                    obj = ModelUtil.getItemDeepStateByLoop(nextItem);
                }
                itemsStateArr.push(obj);
            }
            return itemsStateArr;
        }
    };
    ModelUtil.setItemDeepState = function (comp, parentId, inputNode) {
        if (!inputNode) {
            return;
        }
        var fullId = (parentId ? (parentId + "|") : "") + inputNode.id;
        if (fullId) {
            var itemRef = ModelUtil.getComponentRef(comp, fullId);
            if (itemRef) {
                itemRef.setControlSelfState(inputNode);
            }
            else {
                //error
            }
        }
        var items = inputNode.items;
        if (items && items.length) {
            items.forEach(function (element) {
                ModelUtil.setItemDeepState(comp, fullId, element);
            });
        }
    };
    ModelUtil.updatePopupLocation = function (eleRef, rbnContainer, controlId) {
        var selector = "#menu_" + controlId;
        if (eleRef) {
            var targetEle = $(rbnContainer).find(selector);
            if (targetEle && targetEle.length) {
                var pos = $(eleRef)[0].getBoundingClientRect();
                var posCnt = rbnContainer.getBoundingClientRect();
                //$(targetEle[0]).css({ top: pos.top + pos.height + document.documentElement.scrollTop, left: pos.left + document.documentElement.scrollLeft });
                $(targetEle[0]).css({ top: (pos.top - posCnt.top) + pos.height + document.documentElement.scrollTop, left: (pos.left - posCnt.left) + document.documentElement.scrollLeft });
            }
        }
    };
    ModelUtil.isInactive = function (props) {
        if ((props && props.stateData && props.stateData.enable == false)
            || (props && props.stateData && props.stateData.enable == false)) {
            return true;
        }
        return false;
    };
    ModelUtil.isInactiveByState = function (state) {
        if ((state.enable == false)
            || (state.visible == false)) {
            return true;
        }
        return false;
    };
    ModelUtil.lastId = 0;
    return ModelUtil;
}()); //end of class
exports.default = ModelUtil;


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var Factory_1 = __webpack_require__(4);
var CommonViewImport_1 = __webpack_require__(3);
var CommonViewImport_2 = __webpack_require__(3);
var CommonViewImport_3 = __webpack_require__(3);
var CommonViewImport_4 = __webpack_require__(3);
var RibbonContextWrapper = /** @class */ (function (_super) {
    __extends(RibbonContextWrapper, _super);
    function RibbonContextWrapper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RibbonContextWrapper.prototype.render = function (props) {
        return preact_1.h(CommonViewImport_4.MyContext.Consumer, null, function (passedArgs) {
            return preact_1.h(Ribbon, __assign({}, props, { ribbonModel: passedArgs.ribbonModel, controlMap: passedArgs.controlMap, pubSub: passedArgs.pubSub }));
        });
    };
    return RibbonContextWrapper;
}(preact_1.Component));
exports.default = RibbonContextWrapper;
var Ribbon = /** @class */ (function (_super) {
    __extends(Ribbon, _super);
    function Ribbon(props) {
        var _this = _super.call(this, props) || this;
        _this.selfCls = [CommonViewImport_1.RibbonClasses.ribbon];
        _this.isTabbed = false;
        _this.eventHandlerMap = {};
        _this.subscriptionMap = {};
        if (props && props.items && props.items.length) {
            var that_1 = _this;
            props.items.map(function (item, i) {
                if (item.type == CommonViewImport_2.RendererType.tab) {
                    that_1.isTabbed = true;
                }
            });
            _this.doPropsValidation(props);
        }
        _this.pubSub = props.pubSub;
        _this.setState({
            pinned: (props.ribbonModel) ? props.ribbonModel.pinned : true
        });
        _this.eventHandlerMap[CommonViewImport_1.InternalEvents.pinStateChange] = _this.onPinStateChange.bind(_this);
        return _this;
    }
    Ribbon.prototype.getCls = function (props) {
        var cls = classNames(this.selfCls, (CommonViewImport_1.Constants.themePrefix + props.ribbonModel.theme), (_a = {},
            _a["" + CommonViewImport_1.RibbonClasses.unpinnedState] = (this.state.pinned == false) ? true : false,
            _a));
        return cls;
        var _a;
    };
    Ribbon.prototype.doPropsValidation = function (props) {
        //mix of tab and non tab is not allowed, else need to expose type=tabstrip in configJson
        if (this.isTabbed) {
            var errorTypes_1 = [];
            var validTypesInTabStrip_1 = [CommonViewImport_2.RendererType.tab];
            props.items.map(function (item, i) {
                if (validTypesInTabStrip_1.indexOf(item.type) == -1) {
                    errorTypes_1.push(item.type);
                }
            });
            if (errorTypes_1.length) {
                //raise error
                var err = " Mix of Tab and other renderer:" + errorTypes_1.join(",");
                CommonViewImport_3.Util.raiseError(err, null);
            }
        }
    };
    Ribbon.prototype.componentDidMount = function () {
        this.props.ribbonModel.updateFocusArray();
        if (typeof this.props.onRibbonLoad == "function") {
            this.props.onRibbonLoad();
        }
        for (var key in this.eventHandlerMap) {
            this.subscriptionMap[key] = this.pubSub.subscribe(key, this.eventHandlerMap[key]);
        }
    };
    Ribbon.prototype.componentWillUnmount = function () {
        //todo: unload event
        for (var key in this.subscriptionMap) {
            this.pubSub.unsubscribe(this.subscriptionMap[key]);
        }
    };
    Ribbon.prototype.onPinStateChange = function (data) {
        this.setState({
            pinned: data.pinned
        });
    };
    Ribbon.prototype.render = function (props) {
        var cls = this.getCls(props);
        if (this.isTabbed) {
            var newPropsTabContainer = {
                items: props.items,
                ftype: CommonViewImport_2.RendererType.tabContainer
            };
            return preact_1.h("div", { className: cls },
                preact_1.h(Factory_1.default, __assign({}, newPropsTabContainer)));
        }
        else {
            var newPropsTabPanel = {
                items: props.items,
                ftype: CommonViewImport_2.RendererType.panel
            };
            return preact_1.h("div", { className: cls },
                preact_1.h(Factory_1.default, { ftype: CommonViewImport_2.RendererType.horizontalScroll },
                    preact_1.h(Factory_1.default, __assign({}, newPropsTabPanel))));
        }
    };
    return Ribbon;
}(preact_1.Component)); //end of class
exports.Ribbon = Ribbon;


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Util = /** @class */ (function () {
    function Util() {
    }
    Util.isValidNodeType = function (node, validTypeArr) {
        if (node && node.type && validTypeArr.indexOf(node.type.toLowerCase()) > -1) {
            return true;
        }
        return false;
    };
    ;
    Util.raiseError = function (str, args) {
        console.log("Error: " + str, args);
    };
    ;
    Util.getIdFromTypeMap = function (value, searchInObj) {
        var id = undefined;
        for (var key in searchInObj) {
            if (searchInObj[key] == value) {
                id = key;
            }
        }
        return id;
    };
    return Util;
}()); //end of class
exports.default = Util;


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var Factory_1 = __webpack_require__(4);
var CommonViewImport_1 = __webpack_require__(3);
var CommonViewImport_2 = __webpack_require__(3);
var PanelContextWrapper = /** @class */ (function (_super) {
    __extends(PanelContextWrapper, _super);
    function PanelContextWrapper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PanelContextWrapper.prototype.render = function (props) {
        return preact_1.h(CommonViewImport_2.MyContext.Consumer, null, function (passedArgs) {
            return preact_1.h(Panel, __assign({}, props, { ribbonModel: passedArgs.ribbonModel, controlMap: passedArgs.controlMap, pubSub: passedArgs.pubSub }));
        });
    };
    return PanelContextWrapper;
}(preact_1.Component));
exports.default = PanelContextWrapper;
var Panel = /** @class */ (function (_super) {
    __extends(Panel, _super);
    function Panel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selfCls = [CommonViewImport_1.RibbonClasses.panel];
        return _this;
    }
    Panel.prototype.getCls = function (props) {
        var cls = classNames(this.selfCls, "tab-pane", (_a = {},
            _a["" + CommonViewImport_1.RibbonClasses.disable] = (props.visData && props.visData.enable == false) ? true : false,
            _a["" + CommonViewImport_1.RibbonClasses.hidden] = (props.visData && props.visData.visible == false) ? true : false,
            _a));
        return cls;
        var _a;
    };
    Panel.prototype.render = function (props) {
        var cls = this.getCls(props);
        var cntCls = classNames(CommonViewImport_1.RibbonClasses.sectionContainer);
        var cellWrapperCls = classNames(CommonViewImport_1.RibbonClasses.sectionWrapper);
        return preact_1.h("div", { className: cls },
            preact_1.h("ul", { className: cntCls }, props.items.map(function (item, i) {
                var itemProps = __assign({}, item);
                itemProps.ftype = item.type;
                return preact_1.h("li", { className: cellWrapperCls },
                    preact_1.h(Factory_1.default, __assign({}, itemProps)));
            })));
    };
    return Panel;
}(preact_1.Component));
exports.Panel = Panel;


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var Factory_1 = __webpack_require__(4);
var CommonViewImport_1 = __webpack_require__(3);
var CommonViewImport_2 = __webpack_require__(3);
var SectionFooter = /** @class */ (function (_super) {
    __extends(SectionFooter, _super);
    function SectionFooter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selfCls = [CommonViewImport_1.RibbonClasses.sectionFooter];
        return _this;
    }
    SectionFooter.prototype.getCls = function (props) {
        var cls = classNames(this.selfCls, (_a = {},
            _a["" + CommonViewImport_1.RibbonClasses.sectionFooterWithLauncher] = (props.layoutData && props.layoutData.launcher != undefined) ? true : false,
            _a));
        return cls;
        var _a;
    };
    SectionFooter.prototype.render = function (props) {
        var cls = this.getCls({ layoutData: props.layoutData });
        return preact_1.h("div", { className: cls },
            (props.layoutData && props.layoutData.name != undefined)
                && (preact_1.h("div", { className: "section-title-wrapper" },
                    preact_1.h("div", { className: CommonViewImport_1.RibbonClasses.sectionName }, props.layoutData.name))),
            (props.layoutData && props.layoutData.launcher != undefined)
                && (preact_1.h("div", { className: CommonViewImport_1.RibbonClasses.sectionLauncher }, (function () {
                    var newProps = __assign({}, props.layoutData.launcher);
                    newProps.ftype = CommonViewImport_2.RendererType.sectionLauncher;
                    return preact_1.h(Factory_1.default, __assign({}, newProps));
                })())));
    };
    return SectionFooter;
}(preact_1.Component));
exports.default = SectionFooter;


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ItemEventArg = /** @class */ (function () {
    function ItemEventArg(id, event) {
        this.id = id;
        this.event = event;
    }
    return ItemEventArg;
}());
exports.ItemEventArg = ItemEventArg;
var ItemEventExtArg = /** @class */ (function () {
    function ItemEventExtArg(id, event, updatingIcon, toggleable, toggleGroup, pressThisItemOnClick, stateData) {
        this.id = id;
        this.event = event;
        this.updatingIcon = updatingIcon;
        this.toggleable = toggleable;
        this.toggleGroup = toggleGroup;
        this.pressThisItemOnClick = pressThisItemOnClick;
        this.stateData = stateData;
    }
    return ItemEventExtArg;
}());
exports.ItemEventExtArg = ItemEventExtArg;
var ColorItemEventArg = /** @class */ (function (_super) {
    __extends(ColorItemEventArg, _super);
    function ColorItemEventArg(id, event, color) {
        var _this = _super.call(this, id, event) || this;
        _this.color = color;
        return _this;
    }
    return ColorItemEventArg;
}(ItemEventArg));
exports.ColorItemEventArg = ColorItemEventArg;
var InputDropdownItemEventArg = /** @class */ (function (_super) {
    __extends(InputDropdownItemEventArg, _super);
    function InputDropdownItemEventArg(id, event, value) {
        var _this = _super.call(this, id, event) || this;
        _this.value = value;
        return _this;
    }
    return InputDropdownItemEventArg;
}(ItemEventArg));
exports.InputDropdownItemEventArg = InputDropdownItemEventArg;
var ControlEventArg = /** @class */ (function () {
    //controlState: any;
    function ControlEventArg(event, controlId, eventTargetElementId) {
        this.event = event;
        this.controlId = controlId;
        this.eventTargetElementId = eventTargetElementId;
        //this.controlState = controlState;
    }
    return ControlEventArg;
}());
exports.ControlEventArg = ControlEventArg;
var PublishPinEventArg = /** @class */ (function () {
    function PublishPinEventArg(pinned, height) {
        this.pinned = pinned;
        this.height = height;
    }
    return PublishPinEventArg;
}());
exports.PublishPinEventArg = PublishPinEventArg;
var ActiveTabEventArg = /** @class */ (function () {
    function ActiveTabEventArg(activeTab) {
        this.activeTab = activeTab;
    }
    return ActiveTabEventArg;
}());
exports.ActiveTabEventArg = ActiveTabEventArg;
var PublishEventArg = /** @class */ (function () {
    function PublishEventArg(controlId, eventTargetElementId) {
        this.controlId = controlId;
        this.eventTargetElementId = eventTargetElementId;
    }
    return PublishEventArg;
}());
exports.PublishEventArg = PublishEventArg;


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SpliButtonModes;
(function (SpliButtonModes) {
    SpliButtonModes["simple"] = "simple";
    SpliButtonModes["custom"] = "custom";
})(SpliButtonModes = exports.SpliButtonModes || (exports.SpliButtonModes = {}));
var ButtonDropdownModes;
(function (ButtonDropdownModes) {
    ButtonDropdownModes["image"] = "image";
})(ButtonDropdownModes = exports.ButtonDropdownModes || (exports.ButtonDropdownModes = {}));
var MenuItemModes;
(function (MenuItemModes) {
    MenuItemModes["stateless"] = "stateless";
    MenuItemModes["statelessOnlyText"] = "statelessOnlyText";
    MenuItemModes["selectable"] = "selectable";
    MenuItemModes["linestyle"] = "linestyle";
})(MenuItemModes = exports.MenuItemModes || (exports.MenuItemModes = {}));
exports.MenuItemToggleableModes = [
    MenuItemModes.selectable,
    MenuItemModes.linestyle
];
exports.MenuItemWithIconModes = [
    MenuItemModes.stateless,
    MenuItemModes.selectable,
    MenuItemModes.linestyle
];
var MenuItemWithItemsModes;
(function (MenuItemWithItemsModes) {
    MenuItemWithItemsModes["withIcon"] = "withIcon";
    MenuItemWithItemsModes["withoutIcon"] = "withoutIcon";
})(MenuItemWithItemsModes = exports.MenuItemWithItemsModes || (exports.MenuItemWithItemsModes = {}));
var MenuItemSeparatorModes;
(function (MenuItemSeparatorModes) {
    MenuItemSeparatorModes["fullWidth"] = "fullWidth";
    MenuItemSeparatorModes["withOffset"] = "withOffset";
})(MenuItemSeparatorModes = exports.MenuItemSeparatorModes || (exports.MenuItemSeparatorModes = {}));


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(63);

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var Factory_1 = __webpack_require__(4);
var CommonImport_1 = __webpack_require__(0);
var CommonImport_2 = __webpack_require__(0);
var CommonImport_3 = __webpack_require__(0);
var CommonImport_4 = __webpack_require__(0);
var MenuControlWrapper = /** @class */ (function (_super) {
    __extends(MenuControlWrapper, _super);
    function MenuControlWrapper() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.itemRefs = {};
        return _this;
    }
    MenuControlWrapper.prototype.childrenRefs = function () {
        return this.itemRefs;
    };
    MenuControlWrapper.prototype.pushToItemRefs = function (ref) {
        this.itemRefs[CommonImport_2.Constants.itemRefDefaultKey] = ref;
    };
    MenuControlWrapper.prototype.render = function (props) {
        var _this = this;
        return preact_1.h(CommonImport_4.MyContext.Consumer, null, function (passedArgs) {
            return preact_1.h(MenuControl, __assign({ ref: function (ref) { return _this.pushToItemRefs(ref); } }, props, { ribbonModel: passedArgs.ribbonModel, controlMap: passedArgs.controlMap, pubSub: passedArgs.pubSub }));
        });
    };
    return MenuControlWrapper;
}(preact_1.Component));
exports.MenuControlWrapper = MenuControlWrapper;
var MenuControl = /** @class */ (function (_super) {
    __extends(MenuControl, _super);
    function MenuControl(props) {
        var _this = _super.call(this, props) || this;
        _this.itemRefs = {};
        _this.selfCls = [CommonImport_2.RibbonClasses.menu]; //, "dropdown-menu1"
        _this.isSubmenu = false;
        _this.menuIdPrefix = "menu_";
        if (typeof props.buildControlData == "function") {
            props.buildControlData(undefined, props);
        }
        return _this;
    }
    MenuControl.prototype.componentDidMount = function () {
        if (!this.isSubmenu) {
            CommonImport_3.ViewUtil.bindTooltips(this.eleRef);
        }
    };
    MenuControl.prototype.componentWillUnmount = function () {
        if (!this.isSubmenu) {
            CommonImport_3.ViewUtil.unbindTooltips(this.eleRef);
        }
    };
    MenuControl.prototype.buildControlData = function (fullId, props) {
        if (fullId != undefined && typeof this.props.buildControlData == "function") {
            this.props.buildControlData(fullId, props);
        }
    };
    MenuControl.prototype.childrenRefs = function () {
        return this.itemRefs;
    };
    MenuControl.prototype.pushToItemRefs = function (id, ref) {
        this.itemRefs[id] = (ref && ref.factoriedRef) ? ref.factoriedRef : null;
    };
    MenuControl.prototype.getMenuControlId = function (controlId) {
        return this.menuIdPrefix + controlId;
    };
    MenuControl.prototype.render = function (props) {
        if (props.container) {
            if (props.isListOpen && !$(props.container)[0].querySelector("#" + this.getMenuControlId(props.controlId))) {
                preact_1.render(this.getRenderWithContext(props), props.container);
            }
            else if (props.isListOpen == false && this.eleRef) {
                var Nothing = function () { return null; };
                preact_1.render(preact_1.h(Nothing, null), props.container, this.eleRef);
            }
        }
        else if (this.isSubmenu) {
            return this.getRender(props);
        }
        else {
            if (props.ribbonModel) {
                if (this.eleRef) {
                    preact_1.render(this.getRenderWithContext(props), this.eleRef.parentElement, this.eleRef);
                }
                else {
                    preact_1.render((this.getRenderWithContext(props)), props.ribbonModel.menusContainer);
                }
            }
        }
        return null;
    };
    MenuControl.prototype.getRenderWithContext = function (props) {
        var commonArgs = {
            ribbonModel: props.ribbonModel,
            controlMap: props.controlMap,
            pubSub: props.pubSub
        };
        return preact_1.h(CommonImport_4.MyContext.Provider, { value: commonArgs }, this.getRender(props));
    };
    MenuControl.prototype.getRender = function (props) {
        var _this = this;
        var that = this;
        var cls = classNames(this.selfCls, props.customCls, (_a = {},
            //[`${RibbonClasses.hidden}`]: (props.menuVisible == false)
            _a["" + CommonImport_2.RibbonClasses.hidden] = (props.isListOpen == false),
            _a));
        var commonArgs = {
            ribbonModel: props.ribbonModel,
            controlMap: props.controlMap,
            pubSub: props.pubSub
        };
        return preact_1.h(CommonImport_4.MyContext.Provider, { value: commonArgs },
            preact_1.h("ul", { id: this.menuIdPrefix + props.controlId, class: cls, role: "menu", ref: function (eleRef) { return _this.eleRef = eleRef; } }, props.items.map(function (item, i) {
                var newProps = __assign({}, item);
                newProps.ftype = item.type;
                newProps.id = CommonImport_1.ModelUtil.getId(item);
                newProps.contextData = props.contextData;
                newProps.ribbonModel = props.ribbonModel;
                return preact_1.h(Factory_1.default, __assign({ ref: function (ref) { return that.pushToItemRefs(newProps.id, ref); } }, newProps, { buildControlData: that.buildControlData.bind(that), onMenuItemClick: props.onMenuItemClick }));
            })));
        var _a;
    };
    return MenuControl;
}(preact_1.Component));
exports.MenuControl = MenuControl;


/***/ }),
/* 29 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var PasteType;
(function (PasteType) {
    PasteType["paste"] = "paste";
    PasteType["paste_formulas"] = "paste_formulas";
    PasteType["paste_formulas_and_number_formatting"] = "paste_formulas_and_number_formatting";
    PasteType["paste_keep_source_formatting"] = "paste_keep_source_formatting";
    PasteType["paste_no_borders"] = "paste_no_borders";
    PasteType["paste_keep_source_column_widths"] = "paste_keep_source_column_widths";
    PasteType["paste_transpose"] = "paste_transpose";
    PasteType["paste_values"] = "paste_values";
    PasteType["paste_values_and_number_formatting"] = "paste_values_and_number_formatting";
    PasteType["paste_values_and_source_formatting"] = "paste_values_and_source_formatting";
    PasteType["paste_formatting"] = "paste_formatting";
    PasteType["paste_paste_link"] = "paste_paste_link";
    PasteType["paste_picture"] = "paste_picture";
    PasteType["paste_linked_picture"] = "paste_linked_picture";
    PasteType["paste_special"] = "paste_special";
    /* ,
    
    KEEP_SOURCE_FORMATTING = "KEEP_SOURCE_FORMATTING",
    MATCH_DESTINATION_FORMATTING = "MATCH_DESTINATION_FORMATTING" */
})(PasteType = exports.PasteType || (exports.PasteType = {}));
var CopyType;
(function (CopyType) {
    CopyType["copy"] = "copy";
    CopyType["copy_as_picture"] = "copy_as_picture";
})(CopyType = exports.CopyType || (exports.CopyType = {}));
var FormatPainterType;
(function (FormatPainterType) {
    FormatPainterType["click"] = "click";
    FormatPainterType["double_click"] = "double_click";
    FormatPainterType["unclick"] = "unclick";
})(FormatPainterType = exports.FormatPainterType || (exports.FormatPainterType = {}));
var UnderlineType;
(function (UnderlineType) {
    UnderlineType["none"] = "none";
    UnderlineType["single"] = "single";
    UnderlineType["double"] = "double";
})(UnderlineType = exports.UnderlineType || (exports.UnderlineType = {}));
var BorderType;
(function (BorderType) {
    BorderType["bottomBorder"] = "bottomBorder";
    BorderType["topBorder"] = "topBorder";
    BorderType["leftBorder"] = "leftBorder";
    BorderType["rightBorder"] = "rightBorder";
    BorderType["noBorder"] = "noBorder";
    BorderType["allBorder"] = "allBorder";
    BorderType["outsideBorder"] = "outsideBorder";
    BorderType["custom"] = "custom";
})(BorderType = exports.BorderType || (exports.BorderType = {}));
var BorderModeType;
(function (BorderModeType) {
    BorderModeType["begin"] = "begin";
    BorderModeType["end"] = "end";
})(BorderModeType = exports.BorderModeType || (exports.BorderModeType = {}));
var BorderLineStyleType;
(function (BorderLineStyleType) {
    BorderLineStyleType["type0"] = "type0";
    BorderLineStyleType["type1"] = "type1";
    BorderLineStyleType["type2"] = "type2";
    BorderLineStyleType["type3"] = "type3";
    BorderLineStyleType["type4"] = "type4";
    BorderLineStyleType["type5"] = "type5";
    BorderLineStyleType["type6"] = "type6";
    BorderLineStyleType["type7"] = "type7";
    BorderLineStyleType["type8"] = "type8";
    BorderLineStyleType["type9"] = "type9";
    BorderLineStyleType["type10"] = "type10";
    BorderLineStyleType["type11"] = "type11";
    BorderLineStyleType["type12"] = "type12";
    BorderLineStyleType["type13"] = "type13";
})(BorderLineStyleType = exports.BorderLineStyleType || (exports.BorderLineStyleType = {}));
var ColorPickerItemType;
(function (ColorPickerItemType) {
    ColorPickerItemType["COLOR"] = "0";
    ColorPickerItemType["NONE"] = "-1";
    ColorPickerItemType["NO_FILL"] = "-2";
    ColorPickerItemType["AUTOMATIC"] = "-3";
    ColorPickerItemType["MORE_COLOR"] = "-4";
})(ColorPickerItemType = exports.ColorPickerItemType || (exports.ColorPickerItemType = {}));
var VAlignType;
(function (VAlignType) {
    VAlignType["top"] = "top";
    VAlignType["center"] = "center";
    VAlignType["bottom"] = "bottom";
    VAlignType["none"] = "none";
})(VAlignType = exports.VAlignType || (exports.VAlignType = {}));
var HAlignType;
(function (HAlignType) {
    HAlignType["left"] = "left";
    HAlignType["center"] = "center";
    HAlignType["right"] = "right";
    HAlignType["none"] = "none";
})(HAlignType = exports.HAlignType || (exports.HAlignType = {}));
var OrientationActionType;
(function (OrientationActionType) {
    OrientationActionType["angle_clockwise"] = "angle_clockwise";
    OrientationActionType["angle_counterclockwise"] = "angle_counterclockwise";
    OrientationActionType["verticle_text"] = "verticle_text";
    OrientationActionType["rotate_text_up"] = "rotate_text_up";
    OrientationActionType["rotate_text_down"] = "rotate_text_down";
})(OrientationActionType = exports.OrientationActionType || (exports.OrientationActionType = {}));
var MergeActionType;
(function (MergeActionType) {
    MergeActionType["merge_and_center"] = "merge_and_center";
    MergeActionType["merge_across"] = "merge_across";
    MergeActionType["merge_cells"] = "merge_cells";
    MergeActionType["unmerge"] = "unmerge";
    MergeActionType["unmerge_and_reset_alignment"] = "unmerge_and_reset_alignment";
})(MergeActionType = exports.MergeActionType || (exports.MergeActionType = {}));
var IndentActionType;
(function (IndentActionType) {
    IndentActionType["increase"] = "increase";
    IndentActionType["decrease"] = "decrease";
})(IndentActionType = exports.IndentActionType || (exports.IndentActionType = {}));
var InsertActionType;
(function (InsertActionType) {
    InsertActionType["insert_cells"] = "insert_cells";
    InsertActionType["insert_sheet_row"] = "insert_sheet_row";
    InsertActionType["insert_sheet_column"] = "insert_sheet_column";
    InsertActionType["insert_sheet"] = "insert_sheet";
})(InsertActionType = exports.InsertActionType || (exports.InsertActionType = {}));
var DeleteActionType;
(function (DeleteActionType) {
    DeleteActionType["delete_cells"] = "delete_cells";
    DeleteActionType["delete_sheet_row"] = "delete_sheet_row";
    DeleteActionType["delete_sheet_column"] = "delete_sheet_column";
    DeleteActionType["delete_sheet"] = "delete_sheet";
})(DeleteActionType = exports.DeleteActionType || (exports.DeleteActionType = {}));
var AutosumActionType;
(function (AutosumActionType) {
    AutosumActionType["sum"] = "sum";
    AutosumActionType["average"] = "average";
    AutosumActionType["count_numbers"] = "count_numbers";
    AutosumActionType["max"] = "max";
    AutosumActionType["min"] = "min";
})(AutosumActionType = exports.AutosumActionType || (exports.AutosumActionType = {}));
var ClearActionType;
(function (ClearActionType) {
    ClearActionType["clear_all"] = "clear_all";
    ClearActionType["clear_formats"] = "clear_formats";
    ClearActionType["clear_contents"] = "clear_contents";
    ClearActionType["clear_comments"] = "clear_comments";
    ClearActionType["clear_hyperlinks"] = "clear_hyperlinks";
    ClearActionType["remove_hyperlinks"] = "remove_hyperlinks";
})(ClearActionType = exports.ClearActionType || (exports.ClearActionType = {}));
var NumberFormatType;
(function (NumberFormatType) {
    NumberFormatType["general"] = "general";
    NumberFormatType["number"] = "number";
    NumberFormatType["currency"] = "currency";
    NumberFormatType["accounting"] = "accounting";
    NumberFormatType["short_date"] = "short_date";
    NumberFormatType["long_date"] = "long_date";
    NumberFormatType["time"] = "time";
    NumberFormatType["percentage"] = "percentage";
    NumberFormatType["fraction"] = "fraction";
    NumberFormatType["decimal"] = "decimal";
    NumberFormatType["scientific"] = "scientific";
    NumberFormatType["text"] = "text";
    NumberFormatType["custom"] = "custom";
})(NumberFormatType = exports.NumberFormatType || (exports.NumberFormatType = {}));
var AccountingNumberFormatDetailType;
(function (AccountingNumberFormatDetailType) {
    AccountingNumberFormatDetailType["USD"] = "USD";
    AccountingNumberFormatDetailType["comma"] = "comma";
    AccountingNumberFormatDetailType["percentage"] = "percentage";
})(AccountingNumberFormatDetailType = exports.AccountingNumberFormatDetailType || (exports.AccountingNumberFormatDetailType = {}));
var DecimalNumberFormatDetailType;
(function (DecimalNumberFormatDetailType) {
    DecimalNumberFormatDetailType["increase"] = "increase";
    DecimalNumberFormatDetailType["decrease"] = "decrease";
})(DecimalNumberFormatDetailType = exports.DecimalNumberFormatDetailType || (exports.DecimalNumberFormatDetailType = {}));


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ModelUtil_1 = __webpack_require__(20);
var Constants_1 = __webpack_require__(102);
var Util = /** @class */ (function () {
    function Util() {
    }
    Util.getControlToggleState = function (controlStateObj) {
        var bToggled = false;
        if (controlStateObj && controlStateObj.stateData) {
            bToggled = controlStateObj.stateData[Constants_1.StateDataFields.toggleState] == true ? true : false;
        }
        return bToggled;
    };
    Util.getControlValue = function (controlStateObj, stateField) {
        var retValue;
        if (controlStateObj && controlStateObj.stateData) {
            stateField = stateField || Constants_1.StateDataFields.selectedValue;
            retValue = controlStateObj.stateData[stateField];
        }
        return retValue;
    };
    Util.getStateToToggle = function (controlId, controlType, value) {
        var state = {
            id: controlId,
            type: controlType,
            stateData: {}
        };
        state.stateData[Constants_1.StateDataFields.toggleState] = value;
        return state;
    };
    Util.getStateToColor = function (controlId, controlType, value) {
        var state = {
            id: controlId,
            type: controlType,
            stateData: {}
        };
        state.stateData[Constants_1.StateDataFields.selectedValue] = value.color;
        state.stateData[Constants_1.StateDataFields.updateColorStrip] = value.updateControlIcon;
        return state;
    };
    Util.getIdFromTypeMap = function (value, searchInObj) {
        var id = undefined;
        for (var key in searchInObj) {
            if (searchInObj[key] == value) {
                id = key;
            }
        }
        return id;
    };
    Util.getItemProp = function (controlState, eventTargetElementId, itemField) {
        if (controlState.items && controlState.items.length) {
            var itemState = controlState.items.find(function (item) {
                return item.id == eventTargetElementId;
            });
            if (itemState && itemState["stateData"] != undefined) {
                var itemPropValue = itemState["stateData"][itemField];
                return itemPropValue;
            }
        }
        return undefined;
    };
    Util.getItemStateData = function (fullId, controlStateObj) {
        var itemStateObj = undefined;
        var stateObj = controlStateObj;
        var splitIds = fullId.split("|");
        if (splitIds.length == 1) {
            itemStateObj = stateObj.stateData;
        }
        else if (splitIds.length > 1) {
            splitIds = splitIds.splice(1, (splitIds.length - 1));
            var currentId = undefined;
            var index = 0;
            while (index < splitIds.length && stateObj && stateObj.items && stateObj.items.length) {
                currentId = splitIds[index];
                stateObj = ModelUtil_1.default.getItemInArr("id", currentId, stateObj.items);
                index++;
            }
            if (stateObj) {
                itemStateObj = stateObj;
            }
        }
        return itemStateObj;
    };
    Util.toggleSomeItemState = function (fullId, bToggle, stateDataObj) {
        return Util.updateSomeItemState(fullId, "selected", bToggle, stateDataObj);
    };
    Util.updateSomeItemState = function (fullId, key, value, stateDataObj) {
        var splitIds = fullId.split("|");
        var targetedItemState = stateDataObj;
        var newTargetedItemState = undefined;
        if (stateDataObj && stateDataObj['id'] == splitIds[0]) {
            targetedItemState = stateDataObj;
        }
        splitIds = splitIds.splice(1, splitIds.length - 1);
        var index = 0;
        var missedItem = false;
        while (index < splitIds.length && splitIds[index]) {
            if (!missedItem) {
                newTargetedItemState = ModelUtil_1.default.getItemInArr('id', splitIds[index], targetedItemState.items);
            }
            if (missedItem || !newTargetedItemState) {
                missedItem = true;
                targetedItemState.items = targetedItemState.items || [];
                targetedItemState.items.push({
                    id: splitIds[index],
                    type: undefined,
                    items: []
                });
                newTargetedItemState = ModelUtil_1.default.getItemInArr('id', splitIds[index], targetedItemState.items);
            }
            targetedItemState = newTargetedItemState;
            index++;
        }
        if (targetedItemState) {
            targetedItemState.stateData = targetedItemState.stateData || {};
            targetedItemState.stateData[key] = value;
        }
        return stateDataObj;
    };
    Util.inputCheckString = function (value) {
        if (typeof value == "string") {
            return true;
        }
        else {
            return false;
        }
    };
    Util.inputCheckNumber = function (value) {
        if (typeof value == "number") {
            return true;
        }
        else {
            return false;
        }
    };
    Util.inputCheckBoolean = function (value) {
        if (typeof value == "boolean") {
            return true;
        }
        else {
            return false;
        }
    };
    Util.inputCheckArray = function (value) {
        if (Array.isArray(value)) {
            return true;
        }
        else {
            return false;
        }
    };
    Util.inputCheckInEnum = function (value, enumName) {
        if (value in enumName) {
            return true;
        }
        else {
            return false;
        }
    };
    return Util;
}()); //end of class
exports.Util = Util;


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var Ribbon_1 = __webpack_require__(21);
var Constants_1 = __webpack_require__(8);
var RibbonClasses_1 = __webpack_require__(11);
var Events_1 = __webpack_require__(10);
var Contracts_1 = __webpack_require__(25);
var RibbonModel_1 = __webpack_require__(93);
var ControlMap_1 = __webpack_require__(94);
var PubSub_1 = __webpack_require__(95);
var MyContext_1 = __webpack_require__(15);
__webpack_require__(98);
__webpack_require__(29);
var LeonardoRibbon = /** @class */ (function () {
    function LeonardoRibbon(containerEle, configJson) {
        var _this = this;
        this.subscriptionMap = {};
        this.cnt = $(containerEle);
        var menusContainer = this.cnt.find("." + RibbonClasses_1.RibbonClasses.menusContainer);
        if (!menusContainer || !menusContainer.length) {
            menusContainer = $('<div class="' + RibbonClasses_1.RibbonClasses.menusContainer + '" />');
            this.cnt.append(menusContainer);
        }
        var rootEle = containerEle;
        rootEle.classList.add(RibbonClasses_1.RibbonClasses.ribbonContainer);
        this.pubSub = new PubSub_1.default();
        //this.ribbonModel = new RibbonModel(configJson, (new ControlMap()), this.pubSub, rootEle);
        this.ribbonModel = new RibbonModel_1.default(configJson, (new ControlMap_1.default()), this.pubSub, menusContainer[0]);
        this.listenToInternalEvents();
        var commonArgs = {
            ribbonModel: this.ribbonModel,
            controlMap: this.ribbonModel.controlMap,
            pubSub: this.pubSub
        };
        preact_1.render((preact_1.h(MyContext_1.MyContext.Provider, { value: commonArgs, ref: function (eleRef) { return _this.eleRef = eleRef; } },
            preact_1.h(Ribbon_1.default, __assign({}, configJson, { onRibbonLoad: this.onRibbonLoad.bind(this) })))), rootEle);
    }
    LeonardoRibbon.prototype.onRibbonLoad = function () {
        var evtArg = {};
        this.cnt.trigger(Events_1.ExternalEvents.onRibbonLoaded, [evtArg]);
    };
    LeonardoRibbon.prototype.listenToInternalEvents = function () {
        var that = this;
        var key1 = Constants_1.Constants.nsControlAction + "*";
        this.subscriptionMap[key1] = this.pubSub.subscribe(key1, function (data) {
            var evtArg;
            switch (data.event) {
                case Events_1.InternalEvents.elementClick:
                    evtArg = new Contracts_1.PublishEventArg(data.controlId, data.eventTargetElementId);
                    that.cnt.trigger(Events_1.ExternalEvents.onRibbonControlClick, [evtArg]);
                    break;
                case Events_1.InternalEvents.elementDblClick:
                    evtArg = new Contracts_1.PublishEventArg(data.controlId, data.eventTargetElementId);
                    that.cnt.trigger(Events_1.ExternalEvents.onRibbonControlDblClick, [evtArg]);
                    break;
                case Events_1.InternalEvents.elementHoverIn:
                    evtArg = new Contracts_1.PublishEventArg(data.controlId, data.eventTargetElementId);
                    that.cnt.trigger(Events_1.ExternalEvents.onRibbonControlHoverIn, [evtArg]);
                    break;
                case Events_1.InternalEvents.elementHoverOut:
                    evtArg = new Contracts_1.PublishEventArg(data.controlId, data.eventTargetElementId);
                    that.cnt.trigger(Events_1.ExternalEvents.onRibbonControlHoverOut, [evtArg]);
                    break;
                case Events_1.InternalEvents.menuOpenerClick:
                    evtArg = new Contracts_1.PublishEventArg(data.controlId, data.eventTargetElementId);
                    that.cnt.trigger(Events_1.ExternalEvents.onRibbonControlMenuOpenerClick, [evtArg]);
                    break;
            }
        });
        var key2 = Constants_1.Constants.nsRibbonAction + "*";
        this.subscriptionMap[key2] = this.pubSub.subscribe(key2, function (data) {
            var evtArg;
            switch (data.event) {
                case Events_1.InternalEvents.pinStateChange:
                    setTimeout(function () {
                        var height = that.cnt.find("." + RibbonClasses_1.RibbonClasses.ribbon).height();
                        evtArg = new Contracts_1.PublishPinEventArg(data.pinned, height);
                        if (data.pinned) {
                            that.cnt.trigger(Events_1.ExternalEvents.onRibbonPinned, [evtArg]);
                        }
                        else {
                            that.cnt.trigger(Events_1.ExternalEvents.onRibbonCollapsed, [evtArg]);
                        }
                    }, 0);
                    break;
                case Events_1.InternalEvents.activeTabChange:
                    var tabChangeArg = new Contracts_1.ActiveTabEventArg(data.activeTab);
                    that.cnt.trigger(Events_1.ExternalEvents.onRibbonTabChange, [tabChangeArg]);
                    break;
            }
        });
        if (typeof addResizeListener == "function") {
            addResizeListener(this.cnt[0], this.onContainerResize.bind(this));
        }
    };
    LeonardoRibbon.prototype.getContainer = function () {
        return this.cnt;
    };
    LeonardoRibbon.prototype.getActiveTab = function () {
        return this.ribbonModel.getActiveTab();
    };
    LeonardoRibbon.prototype.setActiveTab = function (id) {
        this.ribbonModel.setActiveTab(id, false);
    };
    LeonardoRibbon.prototype.showTab = function (id) {
        this.ribbonModel.showTab(id);
    };
    LeonardoRibbon.prototype.hideTab = function (id) {
        this.ribbonModel.hideTab(id);
    };
    LeonardoRibbon.prototype.getControlState = function (controlId) {
        return this.ribbonModel.getControlState(controlId);
    };
    LeonardoRibbon.prototype.setControlState = function (controlId, controlType, controlState) {
        return this.ribbonModel.setControlState(controlId, controlState);
    };
    LeonardoRibbon.prototype.destroy = function () {
        for (var key in this.subscriptionMap) {
            this.pubSub.unsubscribe(this.subscriptionMap[key]);
        }
        if (typeof removeResizeListener == "function") {
            removeResizeListener(this.cnt[0]);
        }
        var Nothing = function () { return null; };
        preact_1.render(preact_1.h(Nothing, null), this.cnt[0], this.eleRef);
        this.cnt.empty();
    };
    //OUT OF SPECS METHODS
    LeonardoRibbon.prototype.showAccessKey = function (level) {
        this.ribbonModel.showAccessKey();
    };
    LeonardoRibbon.prototype.hideAccessKey = function (level) {
        this.ribbonModel.hideAccessKey();
    };
    LeonardoRibbon.prototype.focusControl = function (id) {
        this.ribbonModel.focusId = id;
    };
    LeonardoRibbon.prototype.focusPrevious = function () {
        return this.ribbonModel.focusPrevious();
    };
    LeonardoRibbon.prototype.focusNext = function () {
        return this.ribbonModel.focusNext();
    };
    LeonardoRibbon.prototype.getAllControlState = function () {
        return this.ribbonModel.getAllControlState();
    };
    LeonardoRibbon.prototype.handleContainerResize = function () {
        this.onContainerResize();
    };
    LeonardoRibbon.prototype.onContainerResize = function (event) {
        this.pubSub.publish(Events_1.InternalEvents.containerResize, []);
        var width = this.cnt.width();
        var height = this.cnt.height();
        this.cnt.trigger(Events_1.ExternalEvents.onContainerResize, [{ width: width, height: height }]);
    };
    return LeonardoRibbon;
}()); //end of class
exports.LeonardoRibbon = LeonardoRibbon;


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var Factory_1 = __webpack_require__(4);
var CommonViewImport_1 = __webpack_require__(3);
var CommonViewImport_2 = __webpack_require__(3);
var CommonViewImport_3 = __webpack_require__(3);
var CommonViewImport_4 = __webpack_require__(3);
var TabContainerContextWrapper = /** @class */ (function (_super) {
    __extends(TabContainerContextWrapper, _super);
    function TabContainerContextWrapper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TabContainerContextWrapper.prototype.render = function (props) {
        return preact_1.h(CommonViewImport_4.MyContext.Consumer, null, function (passedArgs) {
            return preact_1.h(TabContainer, __assign({}, props, { ribbonModel: passedArgs.ribbonModel, controlMap: passedArgs.controlMap, pubSub: passedArgs.pubSub }));
        });
    };
    return TabContainerContextWrapper;
}(preact_1.Component));
exports.default = TabContainerContextWrapper;
var TabContainer = /** @class */ (function (_super) {
    __extends(TabContainer, _super);
    function TabContainer(props) {
        var _this = _super.call(this, props) || this;
        _this.id = "";
        _this.type = "";
        _this.selfCls = [CommonViewImport_1.RibbonClasses.tabContainer];
        _this.eventHandlerMap = {};
        _this.subscriptionMap = {};
        _this.id = props.id;
        _this.pubSub = props.pubSub;
        _this.setState({
            activeTab: props.ribbonModel.getActiveTab(),
            itemsVisData: CommonViewImport_3.ModelUtil.parseVisDataForItems(props, [CommonViewImport_2.RendererType.tab])
        });
        _this.eventHandlerMap[CommonViewImport_1.InternalEvents.activeTabChange] = _this.onActiveTabChange.bind(_this);
        _this.eventHandlerMap[CommonViewImport_1.InternalEvents.tabStateChange] = _this.onTabStateChange.bind(_this);
        return _this;
    }
    TabContainer.prototype.getCls = function (props) {
        var cls = classNames(this.selfCls);
        return cls;
    };
    TabContainer.prototype.componentDidMount = function () {
        for (var key in this.eventHandlerMap) {
            this.subscriptionMap[key] = this.pubSub.subscribe(key, this.eventHandlerMap[key]);
        }
        $(document).on("click", this.onDocumentClick.bind(this));
    };
    TabContainer.prototype.componentWillUnmount = function () {
        for (var key in this.subscriptionMap) {
            this.pubSub.unsubscribe(this.subscriptionMap[key]);
        }
        //$(document).off("click", this.onDocumentClick.bind(this));
    };
    TabContainer.prototype.onActiveTabChange = function (data) {
        if (data && this.state.activeTab != data.activeTab) {
            this.setState({
                activeTab: data.activeTab
            });
        }
    };
    TabContainer.prototype.onDocumentClick = function (evt) {
        if (this.props.ribbonModel.pinned) {
            return true;
        }
        var $target = $(evt.target);
        if ($target.closest("." + CommonViewImport_1.RibbonClasses.tab).length > 0
            || $target.closest("." + CommonViewImport_1.RibbonClasses.menu_opener).length > 0
            || $target.closest("." + CommonViewImport_1.RibbonClasses.controlPartInput).length > 0
            || $target.closest("." + CommonViewImport_1.RibbonClasses.menuitemWithSubmenu).length > 0
            || $target.closest("." + CommonViewImport_1.RibbonClasses.menuitemTextWithSubmenu).length > 0) {
            return true;
        }
        this.props.ribbonModel.collapse();
    };
    TabContainer.prototype.onTabStateChange = function (data) {
        var itemsVisData = this.state.itemsVisData.slice();
        var itemVisState = CommonViewImport_3.ModelUtil.getItemInArr('id', data.id, itemsVisData);
        if (itemVisState) {
            if (data.state && data.state.enable != undefined) {
                itemVisState.enable = data.state.enable;
            }
            if (data.state && data.state.visible != undefined) {
                itemVisState.visible = data.state.visible;
            }
        }
        else {
            itemVisState = {};
            if (data.state && data.state.enable != undefined) {
                itemVisState.enable = data.state.enable;
            }
            if (data.state && data.state.visible != undefined) {
                itemVisState.visible = data.state.visible;
            }
            itemsVisData.push(itemVisState);
        }
        this.setState({
            itemsVisData: itemsVisData
        });
    };
    TabContainer.prototype.render = function (props) {
        var cls = this.getCls(props);
        var activeTab = this.state.activeTab;
        var itemsVisData = this.state.itemsVisData;
        return preact_1.h("div", null,
            preact_1.h("ul", { className: cls }, props.items.map(function (item, i) {
                var newProps = __assign({}, item);
                newProps.contextData = {
                    activeTab: activeTab,
                    compositeVisData: { items: itemsVisData }
                };
                newProps.ftype = item.type;
                return preact_1.h(Factory_1.default, __assign({}, newProps));
            })),
            props.items.length &&
                preact_1.h(Factory_1.default, { ftype: CommonViewImport_2.RendererType.horizontalScroll }, props.items.map(function (item, i) {
                    if (item.type == CommonViewImport_2.RendererType.tab) {
                        var newProps = __assign({}, item);
                        newProps.ftype = CommonViewImport_2.RendererType.tabPanel;
                        newProps.visData = newProps.visData || {};
                        newProps.visData.visible = (activeTab == item.id) ? true : false;
                        newProps.contextData = {
                            activeTab: activeTab,
                            compositeVisData: { items: itemsVisData }
                        };
                        return preact_1.h(Factory_1.default, __assign({}, newProps));
                    }
                })));
    };
    return TabContainer;
}(preact_1.Component)); //end of class
exports.TabContainer = TabContainer;


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

!function(n,t){ true?t(exports,__webpack_require__(1)):"function"==typeof define&&define.amd?define(["exports","preact"],t):t(n.preactContext={},n.preact)}(this,function(n,t){"use strict";var i,r={register:function(n){console.warn("Consumer used without a Provider")},unregister:function(n){},val:function(n){}},e=window&&window.t||(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var i in t)t.hasOwnProperty(i)&&(n[i]=t[i])},function(n,t){function r(){this.constructor=n}i(n,t),n.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});function u(n){var t=n.children,i=n.render;return t&&t[0]||i}var o=1073741823,c=function(){return o},f=0;n.createContext=function(n,i){var s="_preactContextProvider-"+f++;return{Provider:function(n){function r(t){var r=n.call(this,t)||this;return r.i=function(n,t){var i=[],r=n;return{register:function(n){i.push(n),n(r,0)},unregister:function(n){i=i.filter(function(t){return t!==n})},val:function(n){if(void 0===n||n==r)return r;var e=t(r,n);return e=e|=0,r=n,i.forEach(function(t){return t(n,e)}),r}}}(t.value,i||c),r}return e(r,n),r.prototype.getChildContext=function(){return(n={})[s]=this.i,n;var n},r.prototype.componentDidUpdate=function(){this.i.val(this.props.value)},r.prototype.render=function(){var n=this.props.children;return n&&n.length>1?t.h("span",null,n):n&&n[0]||null},r}(t.Component),Consumer:function(t){function i(i,r){var e=t.call(this,i,r)||this;return e.u=function(n,t){var i=e.props.unstable_observedBits,r=void 0===i||null===i?o:i;0!=((r|=0)&t)&&e.setState({value:n})},e.state={value:e.o().val()||n},e}return e(i,t),i.prototype.componentDidMount=function(){this.o().register(this.u)},i.prototype.shouldComponentUpdate=function(n,t){return this.state.value!==t.value||u(this.props)!==u(n)},i.prototype.componentWillUnmount=function(){this.o().unregister(this.u)},i.prototype.componentDidUpdate=function(n,t,i){var e=i[s];e!==this.context[s]&&((e||r).unregister(this.u),this.componentDidMount())},i.prototype.render=function(){var t=this.props.render,i=u(this.props);if(t&&t!==i&&console.warn("Both children and a render function are defined. Children will be used"),"function"==typeof i)return i(this.state.value||n);console.warn("Consumer is expecting a function as one and only child but didn't find any")},i.prototype.o=function(){return this.context[s]||r},i}(t.Component)}},Object.defineProperty(n,"__esModule",{value:!0})});

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var Factory_1 = __webpack_require__(4);
var CommonViewImport_1 = __webpack_require__(3);
var CommonViewImport_2 = __webpack_require__(3);
var CommonViewImport_3 = __webpack_require__(3);
var CommonViewImport_4 = __webpack_require__(3);
var TabContextWrapper = /** @class */ (function (_super) {
    __extends(TabContextWrapper, _super);
    function TabContextWrapper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TabContextWrapper.prototype.render = function (props) {
        return preact_1.h(CommonViewImport_4.MyContext.Consumer, null, function (passedArgs) {
            return preact_1.h(Tab, __assign({}, props, { ribbonModel: passedArgs.ribbonModel, controlMap: passedArgs.controlMap, pubSub: passedArgs.pubSub }));
        });
    };
    return TabContextWrapper;
}(preact_1.Component));
exports.default = TabContextWrapper;
var Tab = /** @class */ (function (_super) {
    __extends(Tab, _super);
    function Tab(props) {
        var _this = _super.call(this, props) || this;
        _this.id = "";
        _this.selfCls = [CommonViewImport_1.RibbonClasses.tab];
        _this.isAccessKeyPresent = false;
        _this.eventHandlerMap = {};
        _this.subscriptionMap = {};
        _this.id = props.id;
        _this.pubSub = props.pubSub;
        _this.isAccessKeyPresent = (props.accessKey != undefined);
        if (_this.isAccessKeyPresent) {
            _this.setState({
                isAccessKeyTooltipShown: false
            });
        }
        _this.setState({
            focused: _this.getInitFocusedState(props)
        });
        _this.eventHandlerMap[CommonViewImport_1.InternalEvents.showAccessKey] = _this.onShowAccessKey.bind(_this);
        _this.eventHandlerMap[CommonViewImport_1.InternalEvents.hideAccessKey] = _this.onHideAccessKey.bind(_this);
        _this.eventHandlerMap[CommonViewImport_1.InternalEvents.focusChange] = _this.onFocusChange.bind(_this);
        return _this;
    }
    Tab.prototype.componentWillReceiveProps = function (nextProps) {
        this.setState({
            focused: this.getInitFocusedState(nextProps)
        });
    };
    Tab.prototype.componentDidMount = function () {
        //super.componentDidMount();
        for (var key in this.eventHandlerMap) {
            this.subscriptionMap[key] = this.pubSub.subscribe(key, this.eventHandlerMap[key]);
        }
    };
    Tab.prototype.componentWillUnmount = function () {
        for (var key in this.subscriptionMap) {
            this.pubSub.unsubscribe(this.subscriptionMap[key]);
        }
    };
    Tab.prototype.onShowAccessKey = function (data) {
        if (this.isAccessKeyPresent && !this.state.isAccessKeyTooltipShown) {
            this.setState({ isAccessKeyTooltipShown: true });
        }
    };
    Tab.prototype.onHideAccessKey = function (data) {
        if (this.isAccessKeyPresent && this.state.isAccessKeyTooltipShown) {
            this.setState({ isAccessKeyTooltipShown: false });
        }
    };
    Tab.prototype.onFocusChange = function (data) {
        this.setState({ focused: (data.focusId == this.id) });
    };
    Tab.prototype.getInitFocusedState = function (node) {
        var isFocused = (this.props.ribbonModel && this.props.ribbonModel.focusId == node.id);
        return isFocused;
    };
    Tab.prototype.getCls = function (props) {
        var itemId = CommonViewImport_3.ModelUtil.getId(props);
        var itemVisState = undefined;
        if (props.contextData && props.contextData.compositeVisData
            && props.contextData.compositeVisData.items
            && props.contextData.compositeVisData.items.length) {
            itemVisState = CommonViewImport_3.ModelUtil.getItemInArr('id', itemId, props.contextData.compositeVisData.items);
        }
        var cls = classNames(this.selfCls, (props.layoutData && props.layoutData.customCls), (_a = {},
            _a["" + CommonViewImport_1.RibbonClasses.disable] = (itemVisState && itemVisState.enable == false),
            _a["" + CommonViewImport_1.RibbonClasses.hidden] = (itemVisState && itemVisState.visible == false),
            _a["" + CommonViewImport_1.RibbonClasses.active] = (props.contextData && props.contextData.activeTab == this.id),
            _a));
        return cls;
        var _a;
    };
    Tab.prototype.isDisabled = function () {
        var isDisable = (this.props.contextData && this.props.contextData.itemsVisData
            && this.props.contextData.itemsVisData.enable == false);
        return isDisable;
    };
    Tab.prototype.handleClick = function (event) {
        if (this.isDisabled()) {
            return true;
        }
        if (this.props.ribbonModel
            && typeof this.props.ribbonModel.setActiveTab == "function") {
            this.props.ribbonModel.setActiveTab(this.id, true);
        }
    };
    Tab.prototype.render = function (props) {
        var cls = this.getCls(props);
        return preact_1.h("li", { className: cls, onClick: this.handleClick.bind(this) },
            props.layoutData.text,
            this.state.isAccessKeyTooltipShown
                && preact_1.h(Factory_1.default, __assign({ ftype: CommonViewImport_2.RendererType.accessKeyTooltip }, { accessKey: props.accessKey })));
    };
    return Tab;
}(preact_1.Component));
exports.Tab = Tab;


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Panel_1 = __webpack_require__(23);
var CommonViewImport_1 = __webpack_require__(3);
var TabPanel = /** @class */ (function (_super) {
    __extends(TabPanel, _super);
    function TabPanel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selfCls = [CommonViewImport_1.RibbonClasses.tabpanel];
        return _this;
    }
    return TabPanel;
}(Panel_1.default));
exports.default = TabPanel;


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var SectionBody_1 = __webpack_require__(17);
var CommonViewImport_1 = __webpack_require__(3);
var Section = /** @class */ (function (_super) {
    __extends(Section, _super);
    function Section() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selfCls = [CommonViewImport_1.RibbonClasses.section];
        return _this;
    }
    Section.prototype.getCls = function (props) {
        var cls = classNames(this.selfCls, (props.layoutData && props.layoutData.customCls), (_a = {},
            _a["" + CommonViewImport_1.RibbonClasses.disable] = (props.visData && props.visData.enable == false),
            _a["" + CommonViewImport_1.RibbonClasses.hidden] = (props.visData && props.visData.visible == false),
            _a));
        return cls;
        var _a;
    };
    Section.prototype.render = function (props) {
        var cls = this.getCls(props);
        return preact_1.h("div", { className: cls },
            preact_1.h(SectionBody_1.default, __assign({}, props)));
    };
    return Section;
}(preact_1.Component));
exports.default = Section;


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var SectionBody_1 = __webpack_require__(17);
var SectionFooter_1 = __webpack_require__(24);
var CommonViewImport_1 = __webpack_require__(3);
var SectionWithFooter = /** @class */ (function (_super) {
    __extends(SectionWithFooter, _super);
    function SectionWithFooter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selfCls = [CommonViewImport_1.RibbonClasses.section];
        return _this;
    }
    SectionWithFooter.prototype.getCls = function (props) {
        var cls = classNames(this.selfCls, (props.layoutData && props.layoutData.customCls), (_a = {},
            _a["" + CommonViewImport_1.RibbonClasses.disable] = (props.visData && props.visData.enable == false),
            _a["" + CommonViewImport_1.RibbonClasses.hidden] = (props.visData && props.visData.visible == false),
            _a));
        return cls;
        var _a;
    };
    SectionWithFooter.prototype.render = function (props) {
        var cls = this.getCls(props);
        return preact_1.h("div", { className: cls },
            preact_1.h(SectionBody_1.default, __assign({}, props)),
            preact_1.h(SectionFooter_1.default, __assign({}, props)));
    };
    return SectionWithFooter;
}(preact_1.Component));
exports.default = SectionWithFooter;


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var Factory_1 = __webpack_require__(4);
var CommonViewImport_1 = __webpack_require__(3);
var CommonViewImport_2 = __webpack_require__(3);
var Envelop = /** @class */ (function (_super) {
    __extends(Envelop, _super);
    function Envelop() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selfCls = [CommonViewImport_1.RibbonClasses.envelop];
        return _this;
    }
    Envelop.prototype.getCls = function (props) {
        var isVertical = (props.layoutData && props.layoutData.orientation == CommonViewImport_2.OrientationType.vertical);
        var cls = classNames(this.selfCls, (props.layoutData && props.layoutData.customCls), (_a = {},
            _a["" + CommonViewImport_1.RibbonClasses.envelop_vertical] = isVertical,
            _a["" + CommonViewImport_1.RibbonClasses.envelop_horizontal] = !isVertical,
            _a));
        return cls;
        var _a;
    };
    Envelop.prototype.render = function (props) {
        var cls = this.getCls(props);
        var cellCls = CommonViewImport_1.RibbonClasses.envelop_cell;
        return preact_1.h("ul", { className: cls }, props.items && props.items.length
            && props.items.map(function (item, i) {
                var newProps = __assign({}, item);
                newProps.ftype = item.type;
                return preact_1.h("li", { class: cellCls },
                    preact_1.h(Factory_1.default, __assign({}, newProps)));
            }));
    };
    return Envelop;
}(preact_1.Component));
exports.default = Envelop;


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var Factory_1 = __webpack_require__(4);
var CommonViewImport_1 = __webpack_require__(3);
var CommonViewImport_2 = __webpack_require__(3);
var CommonViewImport_3 = __webpack_require__(3);
var CommonViewImport_4 = __webpack_require__(3);
var PinButtonWrapper = /** @class */ (function (_super) {
    __extends(PinButtonWrapper, _super);
    function PinButtonWrapper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PinButtonWrapper.prototype.render = function (props) {
        return preact_1.h(CommonViewImport_4.MyContext.Consumer, null, function (passedArgs) {
            return preact_1.h(PinButton, __assign({}, props, { ribbonModel: passedArgs.ribbonModel, controlMap: passedArgs.controlMap, pubSub: passedArgs.pubSub }));
        });
    };
    return PinButtonWrapper;
}(preact_1.Component));
exports.default = PinButtonWrapper;
var PinButtonActions = /** @class */ (function () {
    function PinButtonActions() {
    }
    PinButtonActions.PIN = "PIN";
    PinButtonActions.COLLAPSE = "COLLAPSE";
    return PinButtonActions;
}());
var PinButton = /** @class */ (function (_super) {
    __extends(PinButton, _super);
    function PinButton(props) {
        var _this = _super.call(this, props) || this;
        _this.selfCls = [CommonViewImport_1.RibbonClasses.pin];
        _this.setState({
            action: ((props.ribbonModel.pinned == false) ? PinButtonActions.PIN : PinButtonActions.COLLAPSE)
        });
        _this.setState({
            controlVisData: CommonViewImport_3.ModelUtil.getInitialVisData(props)
        });
        return _this;
    }
    PinButton.prototype.componentWillReceiveProps = function (nextProps) {
        this.setState({
            action: ((nextProps.ribbonModel.pinned == false) ?
                PinButtonActions.PIN : PinButtonActions.COLLAPSE)
        });
    };
    PinButton.prototype.getCls = function (props) {
        var cls = classNames(this.selfCls, CommonViewImport_1.RibbonClasses.tooltipWrapper, (props.layoutData && props.layoutData.customCls), (_a = {},
            _a["" + CommonViewImport_1.RibbonClasses.disable] = (this.state.controlVisData && this.state.controlVisData.enable == false),
            _a["" + CommonViewImport_1.RibbonClasses.hidden] = (this.state.controlVisData && this.state.controlVisData.visible == false),
            _a["" + CommonViewImport_1.RibbonClasses.focused] = (this.state.focused),
            _a));
        return cls;
        var _a;
    };
    PinButton.prototype.onClick = function (event, arg) {
        if (this.state.controlVisData && this.state.controlVisData.enable == false) {
            return true;
        }
        var action = this.state.action;
        this.setState({
            action: (action == PinButtonActions.PIN) ?
                PinButtonActions.COLLAPSE : PinButtonActions.PIN
        });
        if (action == PinButtonActions.PIN) {
            this.props.ribbonModel.pin();
        }
        else {
            this.props.ribbonModel.collapse();
        }
    };
    PinButton.prototype.render = function (props) {
        var cls = this.getCls(props);
        var newProps = {
            icon: (this.state.action == PinButtonActions.PIN) ?
                props.layoutData.pinIcon : props.layoutData.unpinIcon
        };
        newProps.onClick = this.onClick.bind(this);
        return preact_1.h("div", { className: cls, "aria-disabled": '' + (this.state.controlVisData && this.state.controlVisData.enable == false), "aria-hidden": '' + (this.state.controlVisData && this.state.controlVisData.visible == false), "aria-label": this.props.layoutData && this.props.layoutData.ariaLabel },
            preact_1.h(Factory_1.default, __assign({ ftype: CommonViewImport_2.RendererType.buttonPart }, newProps)),
            preact_1.h(Factory_1.default, { ftype: CommonViewImport_2.RendererType.tooltip, data: props.tooltip }));
    };
    return PinButton;
}(preact_1.Component));
exports.PinButton = PinButton;


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var CommonViewImport_1 = __webpack_require__(3);
var CommonViewImport_2 = __webpack_require__(3);
var CommonViewImport_3 = __webpack_require__(3);
var HorizontalScrollWrapper = /** @class */ (function (_super) {
    __extends(HorizontalScrollWrapper, _super);
    function HorizontalScrollWrapper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HorizontalScrollWrapper.prototype.render = function (props) {
        return preact_1.h(CommonViewImport_3.MyContext.Consumer, null, function (passedArgs) {
            return preact_1.h(HorizontalScroll, __assign({}, props, { ribbonModel: passedArgs.ribbonModel, controlMap: passedArgs.controlMap, pubSub: passedArgs.pubSub }));
        });
    };
    return HorizontalScrollWrapper;
}(preact_1.Component));
exports.default = HorizontalScrollWrapper;
var HorizontalScroll = /** @class */ (function (_super) {
    __extends(HorizontalScroll, _super);
    function HorizontalScroll(props) {
        var _this = _super.call(this, props) || this;
        _this.eleRef = undefined;
        _this.selfCls = [CommonViewImport_1.RibbonClasses.horizontalScroll];
        _this.totalScroll = 0;
        _this.eventHandlerMap = {};
        _this.subscriptionMap = {};
        _this.pubSub = props.pubSub;
        _this.setState({
            scrollLeft: 0
        });
        _this.handleResize = _this.handleResize.bind(_this);
        _this.eventHandlerMap[CommonViewImport_1.InternalEvents.activeTabChange] = _this.onActiveTabChange.bind(_this);
        _this.eventHandlerMap[CommonViewImport_1.InternalEvents.containerResize] = _this.onContainerResize.bind(_this);
        return _this;
    }
    HorizontalScroll.prototype.componentDidMount = function () {
        for (var key in this.eventHandlerMap) {
            this.subscriptionMap[key] = this.pubSub.subscribe(key, this.eventHandlerMap[key]);
        }
        this.updateScroll();
    };
    HorizontalScroll.prototype.componentWillUnmount = function () {
        for (var key in this.subscriptionMap) {
            this.pubSub.unsubscribe(this.subscriptionMap[key]);
        }
    };
    HorizontalScroll.prototype.onActiveTabChange = function (data) {
        //todo: check for other ways
        setTimeout(this.updateScroll.bind(this), 0);
    };
    HorizontalScroll.prototype.onContainerResize = function (data) {
        if (this.state.scrollLeft < 0) {
            this.setState({
                scrollLeft: 0
            });
        }
        this.updateScroll();
    };
    HorizontalScroll.prototype.handleResize = function (event) {
        if (this.state.scrollLeft < 0) {
            this.setState({
                scrollLeft: 0
            });
        }
        /*
        //todo: fix if needed smooth revert scroll, as its the min-size of empty area which needs to be checked
         let contentWidth = $(this.eleRef).find("." + RibbonClasses.scrollContent).width();
         let containerWidth = $(this.eleRef).width();
         if (this.state.scrollLeft < 0 && containerWidth > (contentWidth + this.state.scrollLeft)) {
             let totalScroll = contentWidth - containerWidth;
             this.setState(function (prevState: any, prevProps: any) {
                 let newScrollLeft: number = Math.min(prevState.scrollLeft + totalScroll, 0);
                 return { scrollLeft: newScrollLeft };
             })
         } */
        this.updateScroll();
    };
    HorizontalScroll.prototype.getCls = function (props) {
        var cls = classNames(this.selfCls);
        return cls;
    };
    HorizontalScroll.prototype.onLeftButtonClick = function (event) {
        var that = this;
        this.setState(function (prevState, prevProps) {
            var increament = that.getWidthToScroll();
            var newScrollLeft = prevState.scrollLeft + increament;
            if (newScrollLeft > 0) {
                newScrollLeft = 0;
            }
            var newState = { scrollLeft: newScrollLeft };
            return newState;
        });
    };
    HorizontalScroll.prototype.onRightButtonClick = function (event) {
        var that = this;
        this.setState(function (prevState, prevProps) {
            var increament = that.getWidthToScroll();
            var newScrollLeft = prevState.scrollLeft - increament;
            if (newScrollLeft < -that.totalScroll) {
                newScrollLeft = -that.totalScroll;
            }
            var newState = { scrollLeft: newScrollLeft };
            return newState;
        });
    };
    HorizontalScroll.prototype.getWidthToScroll = function () {
        var containerWidth = $(this.eleRef).width();
        var widthLeftButton = $(this.eleRef).find("." + CommonViewImport_1.RibbonClasses.leftScrollButton).width();
        var widthRightButton = $(this.eleRef).find("." + CommonViewImport_1.RibbonClasses.rightScrollButton).width();
        var widthToReduce = (isNaN(parseInt(widthLeftButton)) ? 0 : parseInt(widthLeftButton))
            + (isNaN(parseInt(widthRightButton)) ? 0 : parseInt(widthRightButton));
        var width = containerWidth - widthToReduce - CommonViewImport_1.Constants.scrollMargin;
        return Math.max(width, 0);
    };
    HorizontalScroll.prototype.componentDidUpdate = function (prevProps, prevState) {
        this.updateScroll();
    };
    HorizontalScroll.prototype.updateScroll = function () {
        var contentWidth = $(this.eleRef).find("." + CommonViewImport_1.RibbonClasses.scrollContent).width();
        var containerWidth = $(this.eleRef).width();
        var totalScroll = contentWidth - containerWidth;
        this.totalScroll = totalScroll;
        var $leftButton = $(this.eleRef).find("." + CommonViewImport_1.RibbonClasses.leftScrollButton);
        var $rightButton = $(this.eleRef).find("." + CommonViewImport_1.RibbonClasses.rightScrollButton);
        var bShowLeftButton = false;
        var bShowRightButton = false;
        if (this.state.scrollLeft > -totalScroll) {
            bShowRightButton = true;
        }
        if (this.state.scrollLeft < 0) {
            bShowLeftButton = true;
        }
        if (bShowRightButton) {
            $rightButton.show();
        }
        else {
            $rightButton.hide();
        }
        if (bShowLeftButton) {
            $leftButton.show();
        }
        else {
            $leftButton.hide();
        }
        var widthLeftButton = bShowLeftButton ? $(this.eleRef).find("." + CommonViewImport_1.RibbonClasses.leftScrollButton).width() : 0;
        var newLeft = (this.state.scrollLeft + widthLeftButton).toString() + "px";
        $(this.eleRef).find("." + CommonViewImport_1.RibbonClasses.scrollContent).css({ left: newLeft });
    };
    HorizontalScroll.prototype.render = function (props) {
        var _this = this;
        var cls = this.getCls(props);
        if (CommonViewImport_2.RibbonConfiguration.enableScroll) {
            return preact_1.h("div", { className: cls, ref: function (eleRef) { return _this.eleRef = eleRef; } },
                preact_1.h("div", { className: CommonViewImport_1.RibbonClasses.leftScrollButton, onClick: this.onLeftButtonClick.bind(this) },
                    preact_1.h("span", { class: "caretSubmenu" })),
                preact_1.h("div", { className: CommonViewImport_1.RibbonClasses.scrollContent }, props.children),
                preact_1.h("div", { className: CommonViewImport_1.RibbonClasses.rightScrollButton, onClick: this.onRightButtonClick.bind(this) },
                    preact_1.h("span", { class: "caretSubmenu" })));
        }
        else {
            return preact_1.h("div", null, props.children);
        }
    };
    return HorizontalScroll;
}(preact_1.Component));
exports.HorizontalScroll = HorizontalScroll;


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var CommonViewImport_1 = __webpack_require__(3);
var SectionSeparator = /** @class */ (function (_super) {
    __extends(SectionSeparator, _super);
    function SectionSeparator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selfCls = [CommonViewImport_1.RibbonClasses.section_separator];
        return _this;
    }
    SectionSeparator.prototype.getCls = function (props) {
        var cls = classNames(this.selfCls, (props.layoutData && props.layoutData.customCls));
        return cls;
    };
    SectionSeparator.prototype.render = function (props) {
        var cls = this.getCls(props);
        return preact_1.h("div", { className: cls });
    };
    return SectionSeparator;
}(preact_1.Component));
exports.default = SectionSeparator;


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var CommonViewImport_1 = __webpack_require__(3);
var ControlSeparator = /** @class */ (function (_super) {
    __extends(ControlSeparator, _super);
    function ControlSeparator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selfCls = [CommonViewImport_1.RibbonClasses.controlSeparator];
        return _this;
    }
    ControlSeparator.prototype.getCls = function (props) {
        var cls = classNames(this.selfCls, (props.layoutData && props.layoutData.customCls));
        return cls;
    };
    ControlSeparator.prototype.render = function (props) {
        var cls = this.getCls(props);
        return preact_1.h("div", { className: cls });
    };
    return ControlSeparator;
}(preact_1.Component));
exports.default = ControlSeparator;


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var Factory_1 = __webpack_require__(4);
var RibbonConfiguration_1 = __webpack_require__(16);
var CommonViewImport_1 = __webpack_require__(3);
var CommonViewImport_2 = __webpack_require__(3);
var Tooltip = /** @class */ (function (_super) {
    __extends(Tooltip, _super);
    function Tooltip() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.eleRefBody = undefined;
        _this.selfCls = [CommonViewImport_1.RibbonClasses.tooltip];
        return _this;
    }
    Tooltip.prototype.componentDidMount = function () {
        if (this.eleRefBody
            && this.props.data && this.props.data.body != undefined) {
            this.eleRefBody.innerHTML = this.props.data.body;
        }
    };
    Tooltip.prototype.componentDidUpdate = function (prevProps, prevState) {
        if (this.eleRefBody
            && this.props.data && this.props.data.body != undefined) {
            this.eleRefBody.innerHTML = this.props.data.body;
        }
    };
    Tooltip.prototype.render = function (props) {
        var _this = this;
        if (!RibbonConfiguration_1.RibbonConfiguration.enableTooltip) {
            return null;
        }
        if (!props.data) {
            return null;
        }
        var cls = classNames(this.selfCls, (_a = {},
            _a["" + CommonViewImport_1.RibbonClasses.itemTooltip] = props.isItemTooltip,
            _a["" + CommonViewImport_1.RibbonClasses.tooltipWithImg] = props.data && props.data.img != undefined,
            _a["" + CommonViewImport_1.RibbonClasses.tooltipWithNoHeader] = (!props.data || !props.data.header),
            _a));
        var positionStyle = props.position ? ("top:" + (parseFloat(props.position.top) + parseFloat(props.position.height) + 10) + "px;") : "";
        positionStyle = positionStyle + ((props.position && props.offset) ? ("left:" + (parseFloat(props.position.left) + parseFloat(props.offset.left)) + "px;") : "");
        var newPropsIcon = __assign({}, props.data.img);
        newPropsIcon.ftype = CommonViewImport_2.RendererType.icon;
        var newPropsTextHeader = { text: props.data.header };
        newPropsTextHeader.ftype = CommonViewImport_2.RendererType.text;
        return preact_1.h("div", { class: cls, style: positionStyle },
            (props.data.header != undefined) && preact_1.h("div", { class: "tooltipHeader" },
                preact_1.h(Factory_1.default, __assign({}, newPropsTextHeader))),
            props.data.img != undefined &&
                preact_1.h("div", { class: "tooltipImage" }, (props.data.img != undefined) &&
                    preact_1.h(Factory_1.default, __assign({}, newPropsIcon))),
            props.data.body != undefined &&
                preact_1.h("div", { class: "tooltipBody", ref: function (eleRefBody) { return _this.eleRefBody = eleRefBody; } }, props.data.body));
        var _a;
    };
    return Tooltip;
}(preact_1.Component));
exports.default = Tooltip;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var RibbonConfiguration_1 = __webpack_require__(16);
var CommonViewImport_1 = __webpack_require__(3);
var AccessKeyTooltip = /** @class */ (function (_super) {
    __extends(AccessKeyTooltip, _super);
    function AccessKeyTooltip() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selfCls = [CommonViewImport_1.RibbonClasses.accessKeyTooltip];
        return _this;
    }
    AccessKeyTooltip.prototype.render = function (props) {
        if (!RibbonConfiguration_1.RibbonConfiguration.enableAccessKey) {
            return null;
        }
        var cls = classNames(this.selfCls);
        return preact_1.h("div", { class: cls }, props.accessKey);
    };
    return AccessKeyTooltip;
}(preact_1.Component));
exports.default = AccessKeyTooltip;


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
//Lib 1
var SectionLauncherButton_1 = __webpack_require__(47);
var ImageButton_1 = __webpack_require__(50);
var Button_1 = __webpack_require__(51);
var SelectableButton_1 = __webpack_require__(52);
var RetainStateButton_1 = __webpack_require__(53);
var StatelessButton_1 = __webpack_require__(18);
var SplitButtonContextWrapper_1 = __webpack_require__(54);
var ColorPickerControl_1 = __webpack_require__(56);
var VerticalSplitButtonContextWrapper_1 = __webpack_require__(58);
var ButtonDropdownContextWrapper_1 = __webpack_require__(60);
var InputDropdown_1 = __webpack_require__(62);
var InputDropdownMenu_1 = __webpack_require__(68);
var InputDropdownMenuItem_1 = __webpack_require__(69);
var ButtonPart_1 = __webpack_require__(70);
var ButtonPartWithColorDiv_1 = __webpack_require__(71);
var InputPart_1 = __webpack_require__(72);
var MenuOpenerPart_1 = __webpack_require__(73);
var MenuOpenerPartWithText_1 = __webpack_require__(74);
var MenuControl_1 = __webpack_require__(28);
var SubmenuControl_1 = __webpack_require__(75);
var MenuItemSelectable_1 = __webpack_require__(76);
var MenuItemWithItems_1 = __webpack_require__(77);
var MenuItemMultiItem_1 = __webpack_require__(78);
var MenuItemImageButton_1 = __webpack_require__(79);
var MenuItemHeader_1 = __webpack_require__(80);
var MenuItemHeaderNew_1 = __webpack_require__(81);
var MenuItemSeparator_1 = __webpack_require__(82);
var MenuItemSeparatorNew_1 = __webpack_require__(83);
var ColorPicker_1 = __webpack_require__(84);
var ColorPickerGrid_1 = __webpack_require__(87);
var ColorPickerMenuItem_1 = __webpack_require__(90);
var IconControl_1 = __webpack_require__(91);
var TextControl_1 = __webpack_require__(92);
var CommonImport_1 = __webpack_require__(0);
var RenderMap = /** @class */ (function () {
    function RenderMap() {
    }
    RenderMap.Map = {};
    RenderMap.MapControl = {};
    RenderMap.MapMenuitem = {};
    return RenderMap;
}());
RenderMap.Map[CommonImport_1.RendererType.buttonPart.toLowerCase()] = ButtonPart_1.default;
RenderMap.Map[CommonImport_1.RendererType.buttonPartWithColorDiv.toLowerCase()] = ButtonPartWithColorDiv_1.default;
RenderMap.Map[CommonImport_1.RendererType.inputPart.toLowerCase()] = InputPart_1.default;
RenderMap.Map[CommonImport_1.RendererType.menuOpenerPart.toLowerCase()] = MenuOpenerPart_1.default;
RenderMap.Map[CommonImport_1.RendererType.menuOpenerPartWithText.toLowerCase()] = MenuOpenerPartWithText_1.default;
RenderMap.MapControl[CommonImport_1.RendererType.sectionLauncher.toLowerCase()] = SectionLauncherButton_1.default;
RenderMap.MapControl[CommonImport_1.RendererType.imageButton.toLowerCase()] = ImageButton_1.default;
RenderMap.Map[CommonImport_1.RendererType.selectableButton.toLowerCase()] = SelectableButton_1.default;
RenderMap.Map[CommonImport_1.RendererType.retainSelectionButton.toLowerCase()] = RetainStateButton_1.default;
RenderMap.Map[CommonImport_1.RendererType.statelessButton.toLowerCase()] = StatelessButton_1.default;
RenderMap.Map[CommonImport_1.RibbonControlType.button.toLowerCase()] = Button_1.default;
RenderMap.MapControl[CommonImport_1.RibbonControlType.buttonDropdown.toLowerCase()] = ButtonDropdownContextWrapper_1.default;
RenderMap.MapControl[CommonImport_1.RibbonControlType.colorPickerControl.toLowerCase()] = ColorPickerControl_1.default;
RenderMap.MapControl[CommonImport_1.RibbonControlType.verticalSplitButton.toLowerCase()] = VerticalSplitButtonContextWrapper_1.default;
RenderMap.MapControl[CommonImport_1.RibbonControlType.splitButton.toLowerCase()] = SplitButtonContextWrapper_1.default;
RenderMap.MapControl[CommonImport_1.RibbonControlType.inputDropdown.toLowerCase()] = InputDropdown_1.default;
RenderMap.Map[CommonImport_1.RendererType.inputDropdownMenu.toLowerCase()] = InputDropdownMenu_1.default;
RenderMap.Map[CommonImport_1.MenuItemType.inputDropdownMenuItem.toLowerCase()] = InputDropdownMenuItem_1.default;
RenderMap.Map[CommonImport_1.RendererType.menu.toLowerCase()] = MenuControl_1.MenuControlWrapper;
RenderMap.Map[CommonImport_1.RendererType.submenu.toLowerCase()] = SubmenuControl_1.SubmenuControlWrapper;
RenderMap.MapMenuitem[CommonImport_1.MenuItemType.menuitemWithModes.toLowerCase()] = MenuItemSelectable_1.default;
RenderMap.MapMenuitem[CommonImport_1.MenuItemType.menuitemWithItems.toLowerCase()] = MenuItemWithItems_1.default;
RenderMap.MapMenuitem[CommonImport_1.MenuItemType.menuitemHeader.toLowerCase()] = MenuItemHeader_1.default;
RenderMap.MapMenuitem[CommonImport_1.MenuItemType.menuitemHeaderNew.toLowerCase()] = MenuItemHeaderNew_1.default;
RenderMap.MapMenuitem[CommonImport_1.MenuItemType.menuitemSeparator.toLowerCase()] = MenuItemSeparator_1.default;
RenderMap.MapMenuitem[CommonImport_1.MenuItemType.MenuItemSeparatorNew.toLowerCase()] = MenuItemSeparatorNew_1.default;
RenderMap.MapMenuitem[CommonImport_1.MenuItemType.menuItemMultiItem.toLowerCase()] = MenuItemMultiItem_1.default;
RenderMap.MapMenuitem[CommonImport_1.MenuItemType.menuItemImageButton.toLowerCase()] = MenuItemImageButton_1.default;
RenderMap.MapMenuitem[CommonImport_1.MenuItemType.colorPicker.toLowerCase()] = ColorPicker_1.default;
RenderMap.MapMenuitem[CommonImport_1.MenuItemType.colorPickerHeader.toLowerCase()] = MenuItemHeader_1.default;
RenderMap.MapMenuitem[CommonImport_1.MenuItemType.colorPickerGrid.toLowerCase()] = ColorPickerGrid_1.default;
RenderMap.MapMenuitem[CommonImport_1.MenuItemType.colorPickerMenuItem.toLowerCase()] = ColorPickerMenuItem_1.default;
RenderMap.Map[CommonImport_1.RendererType.icon.toLowerCase()] = IconControl_1.default;
RenderMap.Map[CommonImport_1.RendererType.text.toLowerCase()] = TextControl_1.default;
var ControlFactory = /** @class */ (function () {
    function ControlFactory() {
    }
    ControlFactory.getTagByType = function (ftype) {
        var GTag = null;
        if (ftype) {
            GTag = RenderMap.MapControl[ftype.toLowerCase()];
            if (!GTag) {
                GTag = RenderMap.MapMenuitem[ftype.toLowerCase()];
            }
            if (!GTag) {
                GTag = RenderMap.Map[ftype.toLowerCase()];
            }
        }
        return GTag;
    };
    return ControlFactory;
}()); //end of class
exports.default = ControlFactory;


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var Factory_1 = __webpack_require__(4);
var StatelessButton_1 = __webpack_require__(18);
var CommonImport_1 = __webpack_require__(0);
var CommonImport_2 = __webpack_require__(0);
var CommonImport_3 = __webpack_require__(0);
var CommonImport_4 = __webpack_require__(0);
var SectionLauncherButtonContextWrapper = /** @class */ (function (_super) {
    __extends(SectionLauncherButtonContextWrapper, _super);
    function SectionLauncherButtonContextWrapper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SectionLauncherButtonContextWrapper.prototype.render = function (props) {
        return preact_1.h(CommonImport_4.MyContext.Consumer, null, function (passedArgs) {
            return preact_1.h(SectionLauncherButton, __assign({}, props, { ribbonModel: passedArgs.ribbonModel, controlMap: passedArgs.controlMap, pubSub: passedArgs.pubSub }));
        });
    };
    return SectionLauncherButtonContextWrapper;
}(preact_1.Component));
exports.default = SectionLauncherButtonContextWrapper;
var SectionLauncherButton = /** @class */ (function (_super) {
    __extends(SectionLauncherButton, _super);
    function SectionLauncherButton() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selfCls = [CommonImport_1.RibbonClasses.control, CommonImport_1.RibbonClasses.statelessButton, CommonImport_1.RibbonClasses.sectionLauncherBtn];
        return _this;
    }
    SectionLauncherButton.prototype.getSectionLauncherIconFromContextData = function (jsonNode) {
        var icon = (jsonNode && jsonNode.layoutData && jsonNode.layoutData.icon)
            || (this.props.ribbonModel && this.props.ribbonModel.sectionLauncherIcon);
        return icon;
    };
    SectionLauncherButton.prototype.render = function (props) {
        var _this = this;
        var cls = this.getCls(this.selfCls, props);
        var newProps = {};
        var schemaMapper = {
            "icon": { "source": this.getSectionLauncherIconFromContextData.bind(this) },
            "text": { "source": "layoutData.text" }
        };
        CommonImport_3.ModelUtil.FillFromSchema(props, newProps, schemaMapper);
        newProps.mode = props.ftype;
        return preact_1.h("div", { className: classNames(cls, CommonImport_1.RibbonClasses.tooltipWrapper), onClick: this.onClick.bind(this), ref: function (eleRef) { return _this.eleRef = eleRef; } },
            preact_1.h(Factory_1.default, __assign({ ftype: CommonImport_2.RendererType.buttonPart }, newProps)),
            preact_1.h(Factory_1.default, { ftype: CommonImport_2.RendererType.tooltip, data: props.tooltip }));
    };
    return SectionLauncherButton;
}(StatelessButton_1.default));
exports.SectionLauncherButton = SectionLauncherButton;


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var RibbonClasses_1 = __webpack_require__(11);
var ViewUtil = /** @class */ (function () {
    function ViewUtil() {
    }
    ViewUtil.bindTooltips = function (eleRef) {
        var that = this;
        var tooltipHandle = null;
        var wrappers = $(eleRef).find("." + RibbonClasses_1.RibbonClasses.tooltipWrapper);
        if ($(eleRef).is("." + RibbonClasses_1.RibbonClasses.tooltipWrapper)) {
            wrappers.push(eleRef);
        }
        wrappers.hover(function () {
            var ribbonContainer = $(this).parents("." + RibbonClasses_1.RibbonClasses.ribbonContainer);
            var tooltipEle = $(this).find("." + RibbonClasses_1.RibbonClasses.tooltip);
            if (tooltipEle && tooltipEle.length && ribbonContainer && ribbonContainer.length) {
                tooltipEle = tooltipEle[0];
                ribbonContainer = ribbonContainer[0];
                if (!$(tooltipEle).is("." + RibbonClasses_1.RibbonClasses.itemTooltip)) {
                    var posWrapper = this.getBoundingClientRect();
                    var posCnt = ribbonContainer.getBoundingClientRect();
                    $(tooltipEle).css({
                        top: (posCnt.top + posCnt.height),
                        left: (posWrapper.left) // + document.documentElement.scrollLeft
                    });
                }
                tooltipHandle = setTimeout(function () {
                    $(tooltipEle).fadeIn(200);
                }, 1000);
            }
        }, function () {
            clearTimeout(tooltipHandle);
            var tooltipEle = $(this).find("." + RibbonClasses_1.RibbonClasses.tooltip);
            if (tooltipEle && tooltipEle.length) {
                tooltipEle = tooltipEle[0];
                var delay = 20;
                $(tooltipEle).delay(delay).fadeOut(200);
            }
        });
    };
    ViewUtil.unbindTooltips = function (eleRef) {
        $(eleRef).find("." + RibbonClasses_1.RibbonClasses.tooltipWrapper).unbind('mouseenter mouseleave');
    };
    return ViewUtil;
}()); //end of class
exports.default = ViewUtil;


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var RenderEnums_1 = __webpack_require__(6);
var TypeInfoMaps_1 = __webpack_require__(26);
var TypeInfoUtil = /** @class */ (function () {
    function TypeInfoUtil() {
    }
    TypeInfoUtil.isItemToggleable = function (props) {
        var type = (props && props.type) ? props.type : undefined;
        var mode = (props && props.layoutData && props.layoutData.mode) ? props.layoutData.mode : undefined;
        //hardcoded intelligence, based on type/mode
        var toggleableTypeMap = {};
        toggleableTypeMap[RenderEnums_1.MenuItemType.menuitemWithModes] = [TypeInfoMaps_1.MenuItemModes.selectable,
            TypeInfoMaps_1.MenuItemModes.linestyle];
        if (type && toggleableTypeMap[type]
            && (!mode || toggleableTypeMap[type].length == 0
                || (toggleableTypeMap[type].indexOf(mode) > -1))) {
            return true;
        }
        return false;
    };
    return TypeInfoUtil;
}()); //end of class
exports.default = TypeInfoUtil;


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var StatelessButton_1 = __webpack_require__(18);
var CommonImport_1 = __webpack_require__(0);
var CommonImport_2 = __webpack_require__(0);
var ImageButtonContextWrapper = /** @class */ (function (_super) {
    __extends(ImageButtonContextWrapper, _super);
    function ImageButtonContextWrapper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ImageButtonContextWrapper.prototype.render = function (props) {
        return preact_1.h(CommonImport_2.MyContext.Consumer, null, function (passedArgs) {
            return preact_1.h(ImageButton, __assign({}, props, { ribbonModel: passedArgs.ribbonModel, controlMap: passedArgs.controlMap, pubSub: passedArgs.pubSub }));
        });
    };
    return ImageButtonContextWrapper;
}(preact_1.Component));
exports.default = ImageButtonContextWrapper;
var ImageButton = /** @class */ (function (_super) {
    __extends(ImageButton, _super);
    function ImageButton() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selfCls = [CommonImport_1.RibbonClasses.control, CommonImport_1.RibbonClasses.statelessButton, CommonImport_1.RibbonClasses.imageButton];
        return _this;
    }
    return ImageButton;
}(StatelessButton_1.default));
exports.ImageButton = ImageButton;


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var Factory_1 = __webpack_require__(4);
var CommonImport_1 = __webpack_require__(0);
var Button = /** @class */ (function (_super) {
    __extends(Button, _super);
    function Button() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Button.prototype.render = function (props) {
        var newprops = __assign({}, props);
        newprops.ftype = props.layoutData.mode;
        return preact_1.h(CommonImport_1.MyContext.Consumer, null, function (passedArgs) {
            return preact_1.h(Factory_1.default, __assign({}, newprops, { ribbonModel: passedArgs.ribbonModel, controlMap: passedArgs.controlMap, pubSub: passedArgs.pubSub }));
        });
    };
    return Button;
}(preact_1.Component));
exports.default = Button;


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CommonImport_1 = __webpack_require__(0);
var BaseButtonControl_1 = __webpack_require__(19);
var classNames = __webpack_require__(2);
var SelectableButton = /** @class */ (function (_super) {
    __extends(SelectableButton, _super);
    function SelectableButton(props) {
        var _this = _super.call(this, props) || this;
        _this.selfCls = [CommonImport_1.RibbonClasses.control, CommonImport_1.RibbonClasses.selectableButton];
        _this.setState({
            selected: (props.stateData && props.stateData.selected) ? true : false,
            retainSelection: false
        });
        return _this;
    }
    SelectableButton.prototype.onClick = function (event, arg) {
        if (!this.state.enable) {
            return true;
        }
        this.setState({
            retainSelection: false,
            selected: !this.state.selected
        });
        _super.prototype.onClick.call(this, event, arg);
    };
    SelectableButton.prototype.getCls = function (inputCls, props) {
        var cls = _super.prototype.getCls.call(this, inputCls, props);
        cls = classNames(cls, (_a = {},
            _a["" + CommonImport_1.RibbonClasses.buttonSelected] = (this.state.selected),
            _a));
        return cls;
        var _a;
    };
    return SelectableButton;
}(BaseButtonControl_1.default));
exports.default = SelectableButton;


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CommonImport_1 = __webpack_require__(0);
var BaseButtonControl_1 = __webpack_require__(19);
var classNames = __webpack_require__(2);
var RetainStateButton = /** @class */ (function (_super) {
    __extends(RetainStateButton, _super);
    function RetainStateButton(props) {
        var _this = _super.call(this, props) || this;
        _this.timer = 0;
        _this.delay = 300;
        _this.preventSingleClick = false;
        _this.selfCls = [CommonImport_1.RibbonClasses.control, CommonImport_1.RibbonClasses.retainSelectionButton];
        _this.setState({
            selected: (props.stateData && props.stateData.selected) ? true : false,
            retainSelection: (props.stateData && props.stateData.retainSelection) ? true : false
        });
        return _this;
    }
    RetainStateButton.prototype.onClick = function (event, arg) {
        if (!this.state.enable) {
            return true;
        }
        var self = this;
        this.timer = setTimeout(function () {
            if (!self.preventSingleClick) {
                self.doSingleClickAction(event, arg);
            }
            self.preventSingleClick = false;
        }, this.delay);
    };
    RetainStateButton.prototype.doSingleClickAction = function (event, arg) {
        this.setState({
            selected: !this.state.selected,
            retainSelection: false
        });
        _super.prototype.onClick.call(this, event, arg);
    };
    RetainStateButton.prototype.onDoubleClick = function (event, arg) {
        if (!this.state.enable) {
            return true;
        }
        clearTimeout(this.timer);
        this.preventSingleClick = true;
        this.doDoubleClickAction(event, arg);
    };
    RetainStateButton.prototype.doDoubleClickAction = function (event, arg) {
        this.setState({
            selected: !this.state.selected,
            retainSelection: !this.state.selected
        });
        _super.prototype.onDoubleClick.call(this, event, arg);
    };
    RetainStateButton.prototype.getCls = function (inputCls, props) {
        var cls = _super.prototype.getCls.call(this, inputCls, props);
        cls = classNames(cls, (_a = {},
            _a["" + CommonImport_1.RibbonClasses.buttonSelected] = (this.state.selected),
            _a));
        return cls;
        var _a;
    };
    return RetainStateButton;
}(BaseButtonControl_1.default)); //end of class
exports.default = RetainStateButton;


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var SplitButton_1 = __webpack_require__(55);
var CommonImport_1 = __webpack_require__(0);
var SplitButtonContextWrapper = /** @class */ (function (_super) {
    __extends(SplitButtonContextWrapper, _super);
    function SplitButtonContextWrapper() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.itemRefs = {};
        return _this;
    }
    SplitButtonContextWrapper.prototype.childrenRefs = function () {
        return this.itemRefs;
    };
    SplitButtonContextWrapper.prototype.pushToItemRefs = function (ref) {
        this.itemRefs[CommonImport_1.Constants.itemRefDefaultKey] = ref;
    };
    SplitButtonContextWrapper.prototype.render = function (props) {
        var _this = this;
        return preact_1.h(CommonImport_1.MyContext.Consumer, null, function (passedArgs) {
            return preact_1.h(SplitButton_1.SplitButton, __assign({}, props, { ref: function (ref) { return _this.pushToItemRefs(ref); }, ribbonModel: passedArgs.ribbonModel, controlMap: passedArgs.controlMap, pubSub: passedArgs.pubSub }));
        });
    };
    return SplitButtonContextWrapper;
}(preact_1.Component));
exports.default = SplitButtonContextWrapper;


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var BaseRibbonControl_1 = __webpack_require__(7);
var Factory_1 = __webpack_require__(4);
var CommonImport_1 = __webpack_require__(0);
var CommonImport_2 = __webpack_require__(0);
var CommonImport_3 = __webpack_require__(0);
var CommonImport_4 = __webpack_require__(0);
var SplitButton = /** @class */ (function (_super) {
    __extends(SplitButton, _super);
    function SplitButton(props) {
        var _this = _super.call(this, props) || this;
        _this.id = "";
        _this.type = "";
        _this.mode = "";
        _this.itemRefs = {};
        _this.holdsState = true;
        _this.eventHandlerMap = {};
        _this.subscriptionMap = {};
        _this.selfCls = [CommonImport_2.RibbonClasses.control,
            CommonImport_2.RibbonClasses.splitButtonControl];
        _this.areItemsPresent = false;
        _this.toggleableItemsData = {};
        _this.type = props.type;
        _this.mode = (props.layoutData && props.layoutData.mode) ? props.layoutData.mode : undefined;
        _this.id = CommonImport_1.ModelUtil.getId(props);
        _this.pubSub = _this.props.pubSub;
        _this.pushToItemRefs = _this.pushToItemRefs.bind(_this);
        _this.areItemsPresent = (props.items && props.items.length > 0);
        _this.setState(_this.getStateObjFromProps(props));
        _this.setState({ isListOpen: false });
        return _this;
    }
    SplitButton.prototype.getStateObjFromProps = function (props) {
        return {
            enable: (props.visData && props.visData.enable == false) ? false : true,
            visible: (props.visData && props.visData.visible == false) ? false : true,
            selected: (props.stateData && props.stateData.selected == true) ? true : false,
            selectedItem: this.getInitSelectedItem(props),
            icon: (props.layoutData && props.layoutData.icon != undefined) ? props.layoutData.icon : undefined
        };
    };
    SplitButton.prototype.getInitSelectedItem = function (props) {
        return (props.stateData && props.stateData.selectedItem != undefined)
            ? props.stateData.selectedItem : undefined;
    };
    SplitButton.prototype.componentDidMount = function () {
        _super.prototype.componentDidMount.call(this);
        $(this.eleRef).on(CommonImport_2.InternalEvents.menuItemClick, this.onMenuItemClick.bind(this));
        $(document).on("click", this.onDocumentClick.bind(this));
        CommonImport_1.ViewUtil.bindTooltips(this.eleRef);
    };
    SplitButton.prototype.componentWillUnmount = function () {
        _super.prototype.componentWillUnmount.call(this);
        $(this.eleRef).off(CommonImport_2.InternalEvents.menuItemClick);
        //$(document).off("click", this.onDocumentClick.bind(this));
        CommonImport_1.ViewUtil.bindTooltips(this.eleRef);
    };
    SplitButton.prototype.getControlState = function () {
        return CommonImport_1.ModelUtil.getItemDeepState(this);
    };
    SplitButton.prototype.setControlState = function (state) {
        if (state == undefined) {
            return;
        }
        CommonImport_1.ModelUtil.setItemDeepState(this, "", state);
    };
    SplitButton.prototype.getControlSelfState = function () {
        var stateData = {};
        stateData["id"] = this.id;
        stateData["type"] = this.type;
        switch (this.mode) {
            case CommonImport_4.SpliButtonModes.simple:
                stateData["stateData"] = {};
                stateData["visData"] = {
                    "visible": this.state.visible,
                    "enable": this.state.enable
                };
                break;
            case CommonImport_4.SpliButtonModes.custom:
            default:
                stateData["stateData"] = {
                    "selected": (this.state.selected == true) ? true : false,
                    "selectedItem": this.state.selectedItem,
                    "icon": this.state.icon
                };
                stateData["visData"] = {
                    "visible": this.state.visible,
                    "enable": this.state.enable
                };
                break;
        }
        return stateData;
    };
    SplitButton.prototype.setControlSelfState = function (stateData) {
        if (!(stateData)) {
            return;
        }
        switch (this.mode) {
            case CommonImport_4.SpliButtonModes.simple:
                this.setState(function (prevState, props) {
                    return {
                        visible: (stateData.visData && stateData.visData.visible != undefined) ? stateData.visData.visible : prevState.visible,
                        enable: (stateData.visData && stateData.visData.enable != undefined) ? stateData.visData.enable : prevState.enable
                    };
                });
                break;
            case CommonImport_4.SpliButtonModes.custom:
            default:
                this.setState(function (prevState, props) {
                    return {
                        selected: (stateData.stateData && stateData.stateData.selected != undefined) ? stateData.stateData.selected : prevState.selected,
                        selectedItem: (stateData.stateData && stateData.stateData.selectedItem != undefined) ? stateData.stateData.selectedItem : prevState.selectedItem,
                        icon: (stateData.stateData && stateData.stateData.icon != undefined) ? stateData.stateData.icon : prevState.icon,
                        visible: (stateData.visData && stateData.visData.visible != undefined) ? stateData.visData.visible : prevState.visible,
                        enable: (stateData.visData && stateData.visData.enable != undefined) ? stateData.visData.enable : prevState.enable
                    };
                });
                break;
        }
    };
    SplitButton.prototype.onDocumentClick = function (evt) {
        if (this.state.isListOpen) {
            var el = evt.target;
            while (el && el !== document.documentElement) {
                var menuOpenerEle = $(this.eleRef).find("." + CommonImport_2.RibbonClasses.menu_opener) && $(this.eleRef).find("." + CommonImport_2.RibbonClasses.menu_opener)[0];
                if (menuOpenerEle == el
                    || $(this.eleRef).find("." + CommonImport_2.RibbonClasses.menu + " li").index(el) !== -1) {
                    return;
                }
                el = el.parentNode;
            }
            this.hideMenu();
        }
    };
    ;
    SplitButton.prototype.hideMenu = function () {
        this.setState({ isListOpen: false });
    };
    SplitButton.prototype.buildControlData = function (fullId, itemProps) {
        if (fullId != undefined && itemProps) {
            fullId = this.id + "|" + fullId;
            var toggleGroupName = (itemProps.layoutData && itemProps.layoutData.toggleGroup)
                ? itemProps.layoutData.toggleGroup : undefined;
            if (toggleGroupName) {
                this.toggleableItemsData[toggleGroupName] = this.toggleableItemsData[toggleGroupName] || [];
                this.toggleableItemsData[toggleGroupName].push(fullId);
            }
        }
    };
    SplitButton.prototype.onMenuItemClick = function (args) {
        this.setState({
            isListOpen: false
        });
        if (CommonImport_1.ModelUtil.isInactiveByState(this.state)) {
            return;
        }
        var that = this;
        var fullId = this.id + "|" + args.id;
        var splitIds = fullId.split("|");
        var updatingIcon = args.updatingIcon;
        //let toggleableItemClicked: boolean = args.toggleable;
        var clickedItemStateData = args.stateData;
        var toggleGroup = args.toggleGroup;
        var pressThisItemOnClick = args.pressThisItemOnClick;
        var isItemToggled = clickedItemStateData && clickedItemStateData.stateData
            && clickedItemStateData.stateData["selected"] == true;
        var controlId = this.id;
        var controlRef = CommonImport_1.ModelUtil.getComponentRef(this, controlId);
        var newControlState = {};
        newControlState.stateData = {};
        if (updatingIcon) {
            newControlState.stateData["icon"] = updatingIcon;
        }
        var selectedItemRef = CommonImport_1.ModelUtil.getComponentRef(this, fullId);
        var isCuttentIconToggleable = (selectedItemRef && CommonImport_1.TypeInfoUtil.isItemToggleable(selectedItemRef.props)) ? true : false;
        var clickedOnLinkedItem = updatingIcon; //hardcoded, but should come from control's meta
        if (selectedItemRef && clickedOnLinkedItem) {
            var oldItemState = selectedItemRef.getControlSelfState();
            var selectedItemWasToggled = (oldItemState && oldItemState.stateData && oldItemState.stateData["selected"] == true) ? true : false;
            newControlState.stateData["selectedItem"] = fullId;
            newControlState.stateData["selected"] = (isCuttentIconToggleable && !selectedItemWasToggled);
            controlRef.setControlSelfState(newControlState);
        }
        if (isCuttentIconToggleable && !toggleGroup) {
            selectedItemRef.setControlSelfState({
                stateData: {
                    selected: !isItemToggled
                }
            });
        }
        if (toggleGroup) {
            var toggleableItemsList = this.toggleableItemsData[toggleGroup];
            if (toggleableItemsList && toggleableItemsList.length) {
                toggleableItemsList.forEach(function (value, index, arr) {
                    var itemRef = CommonImport_1.ModelUtil.getComponentRef(that, value);
                    itemRef.setControlSelfState({
                        stateData: {
                            selected: (fullId == value)
                                ? (!isItemToggled) : false
                        }
                    });
                });
            }
        }
        if (pressThisItemOnClick) {
            var affectedGroupName = "";
            for (var groupName in this.toggleableItemsData) {
                if (this.toggleableItemsData[groupName].indexOf(pressThisItemOnClick) > -1) {
                    affectedGroupName = groupName;
                    break;
                }
            }
            if (affectedGroupName) {
                var toggleableItemsList = this.toggleableItemsData[affectedGroupName];
                if (toggleableItemsList && toggleableItemsList.length) {
                    toggleableItemsList.forEach(function (value, index, arr) {
                        var itemRef = CommonImport_1.ModelUtil.getComponentRef(that, value);
                        itemRef.setControlSelfState({
                            stateData: {
                                selected: (pressThisItemOnClick == value)
                                    ? true : false
                            }
                        });
                    });
                }
            }
        }
        var data = args;
        data.id = fullId;
        var eventArg = new CommonImport_2.ControlEventArg(CommonImport_2.InternalEvents.elementClick, this.id, fullId);
        this.triggerControlEvent(eventArg);
    };
    SplitButton.prototype.onSplitButtonClick = function (event, data) {
        if (CommonImport_1.ModelUtil.isInactiveByState(this.state)) {
            return;
        }
        var controlId = this.id;
        var controlRef = CommonImport_1.ModelUtil.getComponentRef(this, controlId);
        var oldControlState = controlRef.getControlSelfState();
        var selectedId = (oldControlState && oldControlState.stateData
            && oldControlState.stateData["selectedItem"]) ? oldControlState.stateData["selectedItem"] : undefined;
        if (selectedId) {
            var selectedItemRef = CommonImport_1.ModelUtil.getComponentRef(this, selectedId);
            //hack - accessing props from controlRef
            var isCuttentIconToggleable = CommonImport_1.TypeInfoUtil.isItemToggleable(selectedItemRef.props);
            if (isCuttentIconToggleable) {
                var oldItemState = selectedItemRef.getControlSelfState();
                var selectedItemWasToggled = (oldItemState && oldItemState.stateData
                    && oldItemState.stateData["selected"] == true) ? true : false;
                var newControlState = {};
                newControlState.stateData = {};
                newControlState.stateData["selected"] = (isCuttentIconToggleable && !selectedItemWasToggled);
                controlRef.setControlSelfState(newControlState);
                selectedItemRef.setControlSelfState(newControlState);
            }
        }
        var eventArg = new CommonImport_2.ControlEventArg(CommonImport_2.InternalEvents.elementClick, this.id, this.id);
        this.triggerControlEvent(eventArg);
    };
    SplitButton.prototype.onMenuOpenerClick = function (event, data) {
        if (CommonImport_1.ModelUtil.isInactiveByState(this.state)) {
            return;
        }
        if (!this.areItemsPresent) {
            var eventArg = new CommonImport_2.ControlEventArg(CommonImport_2.InternalEvents.menuOpenerClick, this.id, this.id);
            this.triggerControlEvent(eventArg);
            return;
        }
        this.setState({
            isListOpen: !this.state.isListOpen
        });
    };
    SplitButton.prototype.getSplitButtonProps = function (props) {
        var schemaMapper = {
            "text": { "source": "layoutData.text" }
        };
        var newPropsBtn = {};
        CommonImport_1.ModelUtil.FillFromSchema(props, newPropsBtn, schemaMapper);
        newPropsBtn.icon = this.state.icon;
        newPropsBtn.onClick = this.onSplitButtonClick.bind(this);
        newPropsBtn.ftype = CommonImport_3.RendererType.buttonPart;
        return newPropsBtn;
    };
    SplitButton.prototype.getMenuOpenerProps = function (props) {
        var newPropsMenuOpener = {};
        newPropsMenuOpener.onClick = this.onMenuOpenerClick.bind(this);
        newPropsMenuOpener.ftype = CommonImport_3.RendererType.menuOpenerPart;
        return newPropsMenuOpener;
    };
    SplitButton.prototype.getMenuControlProps = function (props) {
        var newPropsMenu = {
            items: props.items,
            ftype: CommonImport_3.RendererType.menu,
            isListOpen: this.state.isListOpen,
            ribbonModel: props.ribbonModel,
            controlId: props.id
        };
        return newPropsMenu;
    };
    SplitButton.prototype.getCls = function (inputCls, props) {
        var cls = classNames(inputCls, (props.layoutData && props.layoutData.customCls), (_a = {},
            _a["" + CommonImport_2.RibbonClasses.disable] = (this.state.enable == false) ? true : false,
            _a["" + CommonImport_2.RibbonClasses.hidden] = (this.state.visible == false) ? true : false,
            _a["" + CommonImport_2.RibbonClasses.toggled] = (this.state.selected == true) ? true : false,
            _a["" + CommonImport_2.RibbonClasses.menuOpenInControl] = (this.areItemsPresent && this.state.isListOpen),
            _a));
        return cls;
        var _a;
    };
    SplitButton.prototype.childrenRefs = function () {
        return this.itemRefs;
    };
    SplitButton.prototype.pushToItemRefs = function (id, ref) {
        this.itemRefs[CommonImport_2.Constants.itemRefDefaultKey] = (ref && ref.factoriedRef) ? ref.factoriedRef : null;
    };
    SplitButton.prototype.componentDidUpdate = function (prevProps, prevState) {
        if (this.state.isListOpen) {
            CommonImport_1.ModelUtil.updatePopupLocation(this.eleRef, this.props.ribbonModel.menusContainer, this.props.id);
        }
    };
    SplitButton.prototype.render = function (props) {
        var _this = this;
        var cls = this.getCls(this.selfCls, props);
        var newPropsBtn = this.getSplitButtonProps(props);
        newPropsBtn.tooltip = props.tooltip && props.tooltip.length && props.tooltip[0]; //hardcoded
        var newPropsMenuOpener = this.getMenuOpenerProps(props);
        newPropsMenuOpener.tooltip = props.tooltip && props.tooltip.length > 1 && props.tooltip[1];
        var newPropsMenu = this.getMenuControlProps(props);
        return preact_1.h("div", { class: cls, ref: function (eleRef) { return _this.eleRef = eleRef; }, "aria-expanded": this.state.isListOpen, "aria-disabled": '' + (this.state.enable == false), "aria-hidden": '' + (this.state.visible == false), "aria-label": this.props.layoutData && this.props.layoutData.ariaLabel },
            preact_1.h("div", { class: classNames(CommonImport_2.RibbonClasses.buttonWrapper, CommonImport_2.RibbonClasses.tooltipWrapper) },
                preact_1.h(Factory_1.default, __assign({}, newPropsBtn)),
                preact_1.h(Factory_1.default, { ftype: CommonImport_3.RendererType.tooltip, data: newPropsBtn.tooltip })),
            preact_1.h("div", { class: classNames(CommonImport_2.RibbonClasses.menuopenerWrapper, CommonImport_2.RibbonClasses.tooltipWrapper) },
                preact_1.h(Factory_1.default, __assign({}, newPropsMenuOpener)),
                preact_1.h(Factory_1.default, { ftype: CommonImport_3.RendererType.tooltip, data: newPropsMenuOpener.tooltip })),
            preact_1.h(Factory_1.default, __assign({ ref: function (ref) { return _this.pushToItemRefs(undefined, ref); } }, newPropsMenu, { buildControlData: this.buildControlData.bind(this), onMenuItemClick: this.onMenuItemClick.bind(this) })));
    };
    return SplitButton;
}(BaseRibbonControl_1.default)); //end of class
exports.SplitButton = SplitButton;


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var BaseRibbonControl_1 = __webpack_require__(7);
var Factory_1 = __webpack_require__(4);
var CommonImport_1 = __webpack_require__(0);
var CommonImport_2 = __webpack_require__(0);
var CommonImport_3 = __webpack_require__(0);
var CommonImport_4 = __webpack_require__(0);
var RenderEnums_1 = __webpack_require__(6);
var colorCategoryEnums_1 = __webpack_require__(57);
var ColorPickerControlWrapper = /** @class */ (function (_super) {
    __extends(ColorPickerControlWrapper, _super);
    function ColorPickerControlWrapper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorPickerControlWrapper.prototype.render = function (props) {
        return preact_1.h(CommonImport_4.MyContext.Consumer, null, function (passedArgs) {
            return preact_1.h(ColorPickerControl, __assign({}, props, { ribbonModel: passedArgs.ribbonModel, controlMap: passedArgs.controlMap, pubSub: passedArgs.pubSub }));
        });
    };
    return ColorPickerControlWrapper;
}(preact_1.Component));
exports.default = ColorPickerControlWrapper;
var ColorPickerControl = /** @class */ (function (_super) {
    __extends(ColorPickerControl, _super);
    function ColorPickerControl(props) {
        var _this = _super.call(this, props) || this;
        _this.selfCls = [CommonImport_2.RibbonClasses.control, CommonImport_2.RibbonClasses.splitButtonDropdownControl, CommonImport_2.RibbonClasses.colorPickerControl];
        _this.colorStripMap = {
            "automatic": "#000000",
            "noFill": "#ffffff"
        };
        _this.setState({
            isListOpen: false,
            visible: (props.visData && props.visData.visible != null) ? props.visData.visible : true,
            enable: (props.visData && props.visData.enable != null) ? props.visData.enable : true,
            selectedValue: props.stateData && props.stateData.selectedValue ? props.stateData.selectedValue : null,
            updateColorStrip: (props.stateData && props.stateData.updateColorStrip != null) ? props.stateData.updateColorStrip : false,
        });
        _this.highlightedColor = _this.state.selectedValue;
        _this.eventHandlerMap[CommonImport_2.InternalEvents.hidemenu] = _this.onHideMenu.bind(_this);
        return _this;
    }
    ColorPickerControl.prototype.componentDidMount = function () {
        _super.prototype.componentDidMount.call(this);
        $(this.eleRef).on(CommonImport_2.InternalEvents.menuItemClick, this.onMenuItemClick.bind(this));
        $(document).on("click", this.onDocumentClick.bind(this));
        this.setBottomColor(this.state.selectedValue); // color to set which is provided by colorgrid
        CommonImport_1.ViewUtil.bindTooltips(this.eleRef);
    };
    ColorPickerControl.prototype.componentDidUpdate = function () {
        this.setBottomColor(this.state.selectedValue); // color to set which is provided by colorgrid
        if (this.state.isListOpen) {
            CommonImport_1.ModelUtil.updatePopupLocation(this.eleRef, this.props.ribbonModel.menusContainer, this.props.id);
        }
    };
    ColorPickerControl.prototype.componentWillUnmount = function () {
        $(this.eleRef).off(CommonImport_2.InternalEvents.menuItemClick);
    };
    ColorPickerControl.prototype.onDocumentClick = function (evt) {
        if (this.state.isListOpen) {
            var el = evt.target;
            while (el && el !== document.documentElement) {
                var menuOpenerEle = $(this.eleRef).find("." + CommonImport_2.RibbonClasses.menu_opener) && $(this.eleRef).find("." + CommonImport_2.RibbonClasses.menu_opener)[0];
                if (menuOpenerEle == el || $(this.eleRef).find("." + CommonImport_2.RibbonClasses.menu + " li").index(el) !== -1) {
                    return;
                }
                el = el.parentNode;
            }
            this.hideMenu();
        }
    };
    ;
    ColorPickerControl.prototype.getControlState = function () {
        return {
            "type": this.props.type,
            "id": this.props.id,
            "stateData": {
                "selectedValue": this.state.selectedValue,
                "updateColorStrip": this.state.updateColorStrip
            },
            "visData": {
                "enable": this.state.enable,
                "visible": this.state.visible
            }
        };
    };
    ColorPickerControl.prototype.setControlState = function (state) {
        if (state == undefined) {
            return;
        }
        this.setState({
            "selectedValue": (state.stateData !== undefined && state.stateData.selectedValue !== undefined) && (state.stateData.updateColorStrip !== undefined && state.stateData.updateColorStrip !== false) ? state.stateData.selectedValue : this.state.selectedValue,
            "updateColorStrip": (state.stateData === undefined || state.stateData.updateColorStrip === undefined) ? this.state.updateColorStrip : state.stateData.updateColorStrip,
            "enable": (state.visData === undefined || state.visData.enable === undefined) ? this.state.enable : state.visData.enable,
            "visible": (state.visData === undefined || state.visData.visible === undefined) ? this.state.visible : state.visData.visible
        });
        state.stateData && state.stateData.selectedValue ? this.highlightedColor = state.stateData.selectedValue : null;
    };
    ColorPickerControl.prototype.onHideMenu = function (data) {
        if (this.state.isListOpen && data.controlId !== this.id) {
            this.hideMenu();
        }
    };
    ColorPickerControl.prototype.hideMenu = function () {
        this.setState({ isListOpen: false });
    };
    ColorPickerControl.prototype.onSplitButtonClick = function (event, data) {
        if (!this.state.enable) {
            return true;
        }
        var eventArg = new CommonImport_2.ControlEventArg(CommonImport_2.InternalEvents.elementClick, this.props.id, colorCategoryEnums_1.ColorCode[this.state.selectedValue] || "0");
        this.triggerControlEvent(eventArg);
    };
    ColorPickerControl.prototype.onMenuOpenerClick = function (event, data) {
        if (!this.state.enable) {
            return;
        }
        this.setState({
            isListOpen: !this.state.isListOpen
        });
        if (this.state.isListOpen) {
            this.pubSub.publish((CommonImport_2.InternalEvents.hidemenu), [{
                    controlId: this.id,
                    eventName: event
                }]);
        }
    };
    ColorPickerControl.prototype.onMenuItemClick = function (data) {
        if (!this.state.enable) {
            return;
        }
        this.setState({
            isListOpen: false,
        });
        var idValue = colorCategoryEnums_1.ColorCode[data.id];
        // adding check to not udpate selectedValue for More Color
        if (idValue != "-4") {
            this.setState({
                selectedValue: data.color
            });
        }
        this.highlightedColor = data.color;
        var eventArg = new CommonImport_2.ControlEventArg(CommonImport_2.InternalEvents.elementClick, this.props.id, idValue);
        this.triggerControlEvent(eventArg);
        this.setBottomColor(data.color, true); // color to set which is provided by colorpicker
    };
    ColorPickerControl.prototype.setBottomColor = function (color, ignoreColorStripState) {
        if (ignoreColorStripState === void 0) { ignoreColorStripState = false; }
        if (ignoreColorStripState) {
            //do nothing
        }
        else if (!this.state.updateColorStrip) {
            return;
        }
        this.eleRef.querySelector('.lr_bottomColor')["style"]["border"] = "none";
        if (color == "noFill") {
            this.eleRef.querySelector('.lr_bottomColor')["style"]["border"] = "1px solid #A0A0A0";
        }
        color = this.colorStripMap[color] || color;
        this.eleRef.querySelector('.lr_bottomColor')["style"]["background-color"] = color;
    };
    ColorPickerControl.prototype.getMenuOpenerProps = function () {
        var newPropsMenuOpener = {};
        newPropsMenuOpener.onClick = this.onMenuOpenerClick.bind(this);
        newPropsMenuOpener.ftype = CommonImport_3.RendererType.menuOpenerPart;
        return newPropsMenuOpener;
    };
    ColorPickerControl.prototype.getSplitButtonProps = function (props) {
        var schemaMapper = {
            "icon": { "source": "layoutData.icon" },
            "text": { "source": "layoutData.text" }
        };
        var newPropsBtn = {};
        CommonImport_1.ModelUtil.FillFromSchema(props, newPropsBtn, schemaMapper);
        newPropsBtn.ftype = CommonImport_3.RendererType.buttonPart;
        return newPropsBtn;
    };
    ColorPickerControl.prototype.getCls = function (inputCls, props) {
        var cls = classNames(inputCls, (props.layoutData && props.layoutData.customCls), (_a = {},
            _a["" + CommonImport_2.RibbonClasses.disable] = (this.state.enable == false),
            _a["" + CommonImport_2.RibbonClasses.hidden] = (this.state.visible == false),
            _a["" + CommonImport_2.RibbonClasses.focused] = (this.state.focused),
            _a["" + CommonImport_2.RibbonClasses.menuOpenInControl] = (this.state.isListOpen),
            _a));
        return cls;
        var _a;
    };
    ColorPickerControl.prototype.getContextData = function () {
        var contextData = {};
        contextData.visData = {
            enable: this.state.enable,
            visible: this.state.visible
        };
        contextData.stateData = {
            selectedValue: this.highlightedColor
        };
        return contextData;
    };
    ColorPickerControl.prototype.getMenuControlProps = function (props) {
        var newPropsMenu = {
            items: [
                {
                    type: RenderEnums_1.MenuItemType.colorPicker,
                    layoutData: props.layoutData,
                    id: props.id,
                    hideMenu: this.hideMenu.bind(this)
                    //setColor: this.onMenuItemClick.bind(this)
                }
            ],
            contextData: this.getContextData(),
            ftype: CommonImport_3.RendererType.menu,
            controlId: props.id,
            customCls: CommonImport_2.RibbonClasses.menuColorpicker,
            isListOpen: this.state.isListOpen,
            container: props.ribbonModel.menusContainer,
            onMenuItemClick: this.onMenuItemClick.bind(this)
        };
        return newPropsMenu;
    };
    ColorPickerControl.prototype.render = function (props) {
        var _this = this;
        var cls = this.getCls(this.selfCls, props);
        var newPropsBtn = this.getSplitButtonProps(props);
        newPropsBtn.icon.showBottomStrip = true;
        newPropsBtn.tooltip = props.tooltip && props.tooltip.length && props.tooltip[0]; //hardcoded
        var clickHandler = this.onSplitButtonClick.bind(this);
        var newPropsMenuOpener = this.getMenuOpenerProps();
        newPropsMenuOpener.tooltip = props.tooltip && props.tooltip.length && props.tooltip[1]; //hardcoded
        var newPropsMenu = this.getMenuControlProps(props);
        return preact_1.h("div", { class: cls, ref: function (eleRef) { return _this.eleRef = eleRef; } },
            preact_1.h("div", { class: classNames(CommonImport_2.RibbonClasses.button, CommonImport_2.RibbonClasses.tooltipWrapper), onClick: clickHandler },
                preact_1.h(Factory_1.default, __assign({}, newPropsBtn)),
                preact_1.h(Factory_1.default, { ftype: CommonImport_3.RendererType.tooltip, data: newPropsMenuOpener.tooltip })),
            preact_1.h("div", { class: classNames(CommonImport_2.RibbonClasses.menuopenerWrapper, CommonImport_2.RibbonClasses.tooltipWrapper) },
                preact_1.h(Factory_1.default, __assign({}, newPropsMenuOpener)),
                preact_1.h(Factory_1.default, { ftype: CommonImport_3.RendererType.tooltip, data: newPropsMenuOpener.tooltip })),
            preact_1.h(Factory_1.default, __assign({}, newPropsMenu)));
    };
    return ColorPickerControl;
}(BaseRibbonControl_1.default));
exports.ColorPickerControl = ColorPickerControl;


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ColorCode;
(function (ColorCode) {
    ColorCode["color"] = "0";
    ColorCode["none"] = "-1";
    ColorCode["noFill"] = "-2";
    ColorCode["automatic"] = "-3";
    ColorCode["moreColors..."] = "-4";
})(ColorCode = exports.ColorCode || (exports.ColorCode = {}));


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var VerticalSplitButton_1 = __webpack_require__(59);
var CommonImport_1 = __webpack_require__(0);
var VerticalSplitButtonContextWrapper = /** @class */ (function (_super) {
    __extends(VerticalSplitButtonContextWrapper, _super);
    function VerticalSplitButtonContextWrapper() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.itemRefs = {};
        return _this;
    }
    VerticalSplitButtonContextWrapper.prototype.childrenRefs = function () {
        return this.itemRefs;
    };
    VerticalSplitButtonContextWrapper.prototype.pushToItemRefs = function (ref) {
        this.itemRefs[CommonImport_1.Constants.itemRefDefaultKey] = ref;
    };
    VerticalSplitButtonContextWrapper.prototype.render = function (props) {
        var _this = this;
        return preact_1.h(CommonImport_1.MyContext.Consumer, null, function (passedArgs) {
            return preact_1.h(VerticalSplitButton_1.VerticalSplitButton, __assign({}, props, { ref: function (ref) { return _this.pushToItemRefs(ref); }, ribbonModel: passedArgs.ribbonModel, controlMap: passedArgs.controlMap, pubSub: passedArgs.pubSub }));
        });
    };
    return VerticalSplitButtonContextWrapper;
}(preact_1.Component));
exports.default = VerticalSplitButtonContextWrapper;


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var BaseRibbonControl_1 = __webpack_require__(7);
var Factory_1 = __webpack_require__(4);
var CommonImport_1 = __webpack_require__(0);
var CommonImport_2 = __webpack_require__(0);
var CommonImport_3 = __webpack_require__(0);
var CommonImport_4 = __webpack_require__(0);
var VerticalSplitButton = /** @class */ (function (_super) {
    __extends(VerticalSplitButton, _super);
    function VerticalSplitButton(props) {
        var _this = _super.call(this, props) || this;
        _this.id = "";
        _this.type = "";
        _this.mode = "";
        _this.itemRefs = {};
        _this.holdsState = true;
        _this.eventHandlerMap = {};
        _this.subscriptionMap = {};
        _this.selfCls = [CommonImport_2.RibbonClasses.control,
            CommonImport_2.RibbonClasses.verticalSplitButtonControl];
        _this.areItemsPresent = false;
        _this.type = props.type;
        _this.mode = (props.layoutData && props.layoutData.mode) ? props.layoutData.mode : undefined;
        _this.id = CommonImport_1.ModelUtil.getId(props);
        _this.pubSub = _this.props.pubSub;
        _this.pushToItemRefs = _this.pushToItemRefs.bind(_this);
        _this.areItemsPresent = (props.items && props.items.length > 0);
        _this.setState(_this.getStateObjFromProps(props));
        _this.setState({ isListOpen: false });
        return _this;
    }
    VerticalSplitButton.prototype.getStateObjFromProps = function (props) {
        return {
            enable: (props.visData && props.visData.enable == false) ? false : true,
            visible: (props.visData && props.visData.visible == false) ? false : true,
            selected: (props.stateData && props.stateData.selected == true) ? true : false
        };
    };
    VerticalSplitButton.prototype.componentDidMount = function () {
        _super.prototype.componentDidMount.call(this);
        $(this.eleRef).on(CommonImport_2.InternalEvents.menuItemClick, this.onMenuItemClick.bind(this));
        $(document).on("click", this.onDocumentClick.bind(this));
        CommonImport_1.ViewUtil.bindTooltips(this.eleRef);
    };
    VerticalSplitButton.prototype.componentWillUnmount = function () {
        _super.prototype.componentWillUnmount.call(this);
        $(this.eleRef).off(CommonImport_2.InternalEvents.menuItemClick);
        //$(document).off("click", this.onDocumentClick.bind(this));
        CommonImport_1.ViewUtil.unbindTooltips(this.eleRef);
    };
    VerticalSplitButton.prototype.getControlState = function () {
        return CommonImport_1.ModelUtil.getItemDeepState(this);
    };
    VerticalSplitButton.prototype.setControlState = function (state) {
        if (state == undefined) {
            return;
        }
        CommonImport_1.ModelUtil.setItemDeepState(this, "", state);
    };
    VerticalSplitButton.prototype.getControlSelfState = function () {
        var stateData = {};
        stateData["id"] = this.id;
        stateData["type"] = this.type;
        switch (this.mode) {
            case CommonImport_4.SpliButtonModes.simple:
                stateData["stateData"] = {};
                stateData["visData"] = {
                    "visible": this.state.visible,
                    "enable": this.state.enable
                };
                break;
            case CommonImport_4.SpliButtonModes.custom:
            default:
                stateData["stateData"] = {
                    "selected": (this.state.selected == true) ? true : false
                };
                stateData["visData"] = {
                    "visible": this.state.visible,
                    "enable": this.state.enable
                };
                break;
        }
        return stateData;
    };
    VerticalSplitButton.prototype.setControlSelfState = function (stateData) {
        if (!(stateData)) {
            return;
        }
        switch (this.mode) {
            case CommonImport_4.SpliButtonModes.simple:
                this.setState(function (prevState, props) {
                    return {
                        visible: (stateData.visData && stateData.visData.visible != undefined) ? stateData.visData.visible : prevState.visible,
                        enable: (stateData.visData && stateData.visData.enable != undefined) ? stateData.visData.enable : prevState.enable
                    };
                });
                break;
            case CommonImport_4.SpliButtonModes.custom:
            default:
                this.setState(function (prevState, props) {
                    return {
                        selected: (stateData.stateData && stateData.stateData.selected != undefined) ? stateData.stateData.selected : prevState.selected,
                        visible: (stateData.visData && stateData.visData.visible != undefined) ? stateData.visData.visible : prevState.visible,
                        enable: (stateData.visData && stateData.visData.enable != undefined) ? stateData.visData.enable : prevState.enable
                    };
                });
                break;
        }
    };
    VerticalSplitButton.prototype.onDocumentClick = function (evt) {
        if (this.state.isListOpen) {
            var el = evt.target;
            while (el && el !== document.documentElement) {
                var menuOpenerEle = $(this.eleRef).find("." + CommonImport_2.RibbonClasses.menu_opener) && $(this.eleRef).find("." + CommonImport_2.RibbonClasses.menu_opener)[0];
                if (menuOpenerEle == el
                    || $(this.eleRef).find("." + CommonImport_2.RibbonClasses.menu + " li").index(el) !== -1) {
                    return;
                }
                el = el.parentNode;
            }
            this.hideMenu();
        }
    };
    ;
    VerticalSplitButton.prototype.hideMenu = function () {
        this.setState({ isListOpen: false });
    };
    VerticalSplitButton.prototype.onMenuItemClick = function (args) {
        this.setState({
            isListOpen: false
        });
        if (CommonImport_1.ModelUtil.isInactiveByState(this.state)) {
            return;
        }
        var fullId = this.id + "|" + args.id;
        var eventArg = new CommonImport_2.ControlEventArg(CommonImport_2.InternalEvents.elementClick, this.id, fullId);
        this.triggerControlEvent(eventArg);
    };
    VerticalSplitButton.prototype.onSplitButtonClick = function (event, data) {
        if (CommonImport_1.ModelUtil.isInactiveByState(this.state)) {
            return;
        }
        var eventArg = new CommonImport_2.ControlEventArg(CommonImport_2.InternalEvents.elementClick, this.id, this.id);
        this.triggerControlEvent(eventArg);
    };
    VerticalSplitButton.prototype.onMenuOpenerClick = function (event, data) {
        if (CommonImport_1.ModelUtil.isInactiveByState(this.state)) {
            return;
        }
        if (!this.areItemsPresent) {
            var eventArg = new CommonImport_2.ControlEventArg(CommonImport_2.InternalEvents.menuOpenerClick, this.id, this.id);
            this.triggerControlEvent(eventArg);
            return;
        }
        this.setState({
            isListOpen: !this.state.isListOpen
        });
    };
    VerticalSplitButton.prototype.getSplitButtonProps = function (props) {
        var schemaMapper = {
            "icon": { "source": "layoutData.icon" }
        };
        var newPropsBtn = {};
        CommonImport_1.ModelUtil.FillFromSchema(props, newPropsBtn, schemaMapper);
        newPropsBtn.onClick = this.onSplitButtonClick.bind(this);
        newPropsBtn.ftype = CommonImport_3.RendererType.buttonPart;
        return newPropsBtn;
    };
    VerticalSplitButton.prototype.getMenuOpenerProps = function (props) {
        var newPropsMenuOpener = {};
        var schemaMapper = {
            "text": { "source": "layoutData.text" }
        };
        CommonImport_1.ModelUtil.FillFromSchema(props, newPropsMenuOpener, schemaMapper);
        newPropsMenuOpener.onClick = this.onMenuOpenerClick.bind(this);
        newPropsMenuOpener.ftype = CommonImport_3.RendererType.menuOpenerPartWithText;
        return newPropsMenuOpener;
    };
    VerticalSplitButton.prototype.getMenuControlProps = function (props) {
        var newPropsMenu = {
            items: props.items,
            ftype: CommonImport_3.RendererType.menu,
            //menuVisible: this.state.isListOpen,
            isListOpen: this.state.isListOpen,
            ribbonModel: props.ribbonModel,
            controlId: props.id
        };
        return newPropsMenu;
    };
    VerticalSplitButton.prototype.getCls = function (inputCls, props) {
        var cls = classNames(inputCls, (props.layoutData && props.layoutData.customCls), (_a = {},
            _a["" + CommonImport_2.RibbonClasses.disable] = (this.state.enable == false) ? true : false,
            _a["" + CommonImport_2.RibbonClasses.hidden] = (this.state.visible == false) ? true : false,
            _a["" + CommonImport_2.RibbonClasses.toggled] = (this.state.selected == true) ? true : false,
            _a["" + CommonImport_2.RibbonClasses.menuOpenInControl] = (this.areItemsPresent && this.state.isListOpen),
            _a));
        return cls;
        var _a;
    };
    VerticalSplitButton.prototype.childrenRefs = function () {
        return this.itemRefs;
    };
    VerticalSplitButton.prototype.pushToItemRefs = function (id, ref) {
        this.itemRefs[CommonImport_2.Constants.itemRefDefaultKey] = (ref && ref.factoriedRef) ? ref.factoriedRef : null;
    };
    VerticalSplitButton.prototype.componentDidUpdate = function (prevProps, prevState) {
        if (this.state.isListOpen) {
            CommonImport_1.ModelUtil.updatePopupLocation(this.eleRef, this.props.ribbonModel.menusContainer, this.props.id);
        }
    };
    VerticalSplitButton.prototype.render = function (props) {
        var _this = this;
        var cls = this.getCls(this.selfCls, props);
        var newPropsBtn = this.getSplitButtonProps(props);
        newPropsBtn.tooltip = props.tooltip && props.tooltip.length && props.tooltip[0];
        var newPropsMenuOpener = this.getMenuOpenerProps(props);
        newPropsMenuOpener.tooltip = props.tooltip && props.tooltip.length > 1 && props.tooltip[1];
        var newPropsMenu = this.getMenuControlProps(props);
        return preact_1.h("div", { class: cls, ref: function (eleRef) { return _this.eleRef = eleRef; }, "aria-expanded": this.state.isListOpen, "aria-disabled": '' + (this.state.enable == false), "aria-hidden": '' + (this.state.visible == false), "aria-label": this.props.layoutData && this.props.layoutData.ariaLabel },
            preact_1.h("div", { class: classNames(CommonImport_2.RibbonClasses.buttonWrapper, CommonImport_2.RibbonClasses.tooltipWrapper) },
                preact_1.h(Factory_1.default, __assign({}, newPropsBtn)),
                preact_1.h(Factory_1.default, { ftype: CommonImport_3.RendererType.tooltip, data: newPropsBtn.tooltip })),
            preact_1.h("div", { class: classNames(CommonImport_2.RibbonClasses.menuopenerWrapper, CommonImport_2.RibbonClasses.tooltipWrapper) },
                preact_1.h(Factory_1.default, __assign({}, newPropsMenuOpener)),
                preact_1.h(Factory_1.default, { ftype: CommonImport_3.RendererType.tooltip, data: newPropsMenuOpener.tooltip })),
            preact_1.h(Factory_1.default, __assign({ ref: function (ref) { return _this.pushToItemRefs(undefined, ref); } }, newPropsMenu, { onMenuItemClick: this.onMenuItemClick.bind(this) })));
    };
    return VerticalSplitButton;
}(BaseRibbonControl_1.default)); //end of class
exports.VerticalSplitButton = VerticalSplitButton;


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var ButtonDropdown_1 = __webpack_require__(61);
var CommonImport_1 = __webpack_require__(0);
var ButtonDropdownContextWrapper = /** @class */ (function (_super) {
    __extends(ButtonDropdownContextWrapper, _super);
    function ButtonDropdownContextWrapper() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.itemRefs = {};
        return _this;
    }
    ButtonDropdownContextWrapper.prototype.childrenRefs = function () {
        return this.itemRefs;
    };
    ButtonDropdownContextWrapper.prototype.pushToItemRefs = function (ref) {
        this.itemRefs[CommonImport_1.Constants.itemRefDefaultKey] = ref;
    };
    ButtonDropdownContextWrapper.prototype.render = function (props) {
        var _this = this;
        return preact_1.h(CommonImport_1.MyContext.Consumer, null, function (passedArgs) {
            return preact_1.h(ButtonDropdown_1.ButtonDropdown, __assign({}, props, { ref: function (ref) { return _this.pushToItemRefs(ref); }, ribbonModel: passedArgs.ribbonModel, controlMap: passedArgs.controlMap, pubSub: passedArgs.pubSub }));
        });
    };
    return ButtonDropdownContextWrapper;
}(preact_1.Component));
exports.default = ButtonDropdownContextWrapper;


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var BaseRibbonControl_1 = __webpack_require__(7);
var Factory_1 = __webpack_require__(4);
var CommonImport_1 = __webpack_require__(0);
var CommonImport_2 = __webpack_require__(0);
var CommonImport_3 = __webpack_require__(0);
var CommonImport_4 = __webpack_require__(0);
var ButtonDropdown = /** @class */ (function (_super) {
    __extends(ButtonDropdown, _super);
    function ButtonDropdown(props) {
        var _this = _super.call(this, props) || this;
        _this.mode = "";
        _this.itemRefs = {};
        _this.holdsState = true;
        _this.eventHandlerMap = {};
        _this.subscriptionMap = {};
        _this.selfCls = [CommonImport_2.RibbonClasses.control,
            CommonImport_2.RibbonClasses.ButtonDropdownControl];
        _this.areItemsPresent = false;
        _this.type = props.type;
        _this.mode = (props.layoutData && props.layoutData.mode) ? props.layoutData.mode : undefined;
        if (_this.mode == CommonImport_4.ButtonDropdownModes.image || _this.mode == undefined) {
            _this.selfCls = [CommonImport_2.RibbonClasses.control, CommonImport_2.RibbonClasses.ButtonDropdownControl, CommonImport_2.RibbonClasses.imageButton];
        }
        _this.id = CommonImport_1.ModelUtil.getId(props);
        _this.pubSub = _this.props.pubSub;
        _this.pushToItemRefs = _this.pushToItemRefs.bind(_this);
        _this.areItemsPresent = (props.items && props.items.length > 0);
        _this.setState(_this.getStateObjFromProps(props));
        _this.setState({ isListOpen: false });
        return _this;
    }
    ButtonDropdown.prototype.getStateObjFromProps = function (props) {
        return {
            enable: (props.visData && props.visData.enable == false) ? false : true,
            visible: (props.visData && props.visData.visible == false) ? false : true
        };
    };
    ButtonDropdown.prototype.componentDidMount = function () {
        _super.prototype.componentDidMount.call(this);
        $(this.eleRef).on(CommonImport_2.InternalEvents.menuItemClick, this.onMenuItemClick.bind(this));
        $(document).on("click", this.onDocumentClick.bind(this));
        CommonImport_1.ViewUtil.bindTooltips(this.eleRef);
    };
    ButtonDropdown.prototype.componentWillUnmount = function () {
        _super.prototype.componentWillUnmount.call(this);
        $(this.eleRef).off(CommonImport_2.InternalEvents.menuItemClick);
        //$(document).off("click", this.onDocumentClick.bind(this));
        CommonImport_1.ViewUtil.bindTooltips(this.eleRef);
    };
    ButtonDropdown.prototype.getControlState = function () {
        return CommonImport_1.ModelUtil.getItemDeepState(this);
    };
    ButtonDropdown.prototype.setControlState = function (state) {
        if (state == undefined) {
            return;
        }
        CommonImport_1.ModelUtil.setItemDeepState(this, "", state);
    };
    ButtonDropdown.prototype.getControlSelfState = function () {
        var stateData = {};
        stateData["id"] = this.id;
        stateData["type"] = this.type;
        switch (this.mode) {
            case CommonImport_4.ButtonDropdownModes.image:
            default:
                stateData["stateData"] = {};
                stateData["visData"] = {
                    "visible": this.state.visible,
                    "enable": this.state.enable
                };
                break;
        }
        return stateData;
    };
    ButtonDropdown.prototype.setControlSelfState = function (stateData) {
        if (!(stateData)) {
            return;
        }
        switch (this.mode) {
            case CommonImport_4.ButtonDropdownModes.image:
            default:
                this.setState(function (prevState, props) {
                    return {
                        visible: (stateData.visData && stateData.visData.visible != undefined) ? stateData.visData.visible : prevState.visible,
                        enable: (stateData.visData && stateData.visData.enable != undefined) ? stateData.visData.enable : prevState.enable
                    };
                });
                break;
        }
    };
    ButtonDropdown.prototype.onDocumentClick = function (evt) {
        if (this.state.isListOpen) {
            var el = evt.target;
            while (el && el !== document.documentElement) {
                var menuOpenerEle = $(this.eleRef).find("." + CommonImport_2.RibbonClasses.controlPartButton) && $(this.eleRef).find("." + CommonImport_2.RibbonClasses.controlPartButton)[0];
                if (menuOpenerEle == el
                    || $(this.eleRef).find("." + CommonImport_2.RibbonClasses.menu + " li").index(el) !== -1) {
                    return;
                }
                el = el.parentNode;
            }
            this.hideMenu();
        }
    };
    ;
    ButtonDropdown.prototype.hideMenu = function () {
        this.setState({ isListOpen: false });
    };
    ButtonDropdown.prototype.onMenuItemClick = function (args) {
        this.setState({
            isListOpen: false
        });
        if (CommonImport_1.ModelUtil.isInactiveByState(this.state)) {
            return;
        }
        var fullId = this.id + "|" + args.id;
        var eventArg = new CommonImport_2.ControlEventArg(CommonImport_2.InternalEvents.elementClick, this.id, fullId);
        this.triggerControlEvent(eventArg);
    };
    ButtonDropdown.prototype.onMenuOpenerClick = function (event, data) {
        if (CommonImport_1.ModelUtil.isInactiveByState(this.state)) {
            return;
        }
        if (!this.areItemsPresent) {
            var eventArg = new CommonImport_2.ControlEventArg(CommonImport_2.InternalEvents.menuOpenerClick, this.id, this.id);
            this.triggerControlEvent(eventArg);
            return;
        }
        this.setState({
            isListOpen: !this.state.isListOpen
        });
    };
    ButtonDropdown.prototype.getButtonProps = function (props) {
        var schemaMapper = {
            "text": { "source": "layoutData.text" },
            "icon": { "source": "layoutData.icon" }
        };
        var newPropsBtn = {};
        CommonImport_1.ModelUtil.FillFromSchema(props, newPropsBtn, schemaMapper);
        newPropsBtn.onClick = this.onMenuOpenerClick.bind(this);
        newPropsBtn.ftype = CommonImport_3.RendererType.buttonPart;
        return newPropsBtn;
    };
    ButtonDropdown.prototype.getMenuControlProps = function (props) {
        var newPropsMenu = {
            items: props.items,
            ftype: CommonImport_3.RendererType.menu,
            isListOpen: this.state.isListOpen,
            ribbonModel: props.ribbonModel,
            controlId: props.id
        };
        return newPropsMenu;
    };
    ButtonDropdown.prototype.getCls = function (inputCls, props) {
        var cls = classNames(inputCls, (props.layoutData && props.layoutData.customCls), (_a = {},
            _a["" + CommonImport_2.RibbonClasses.disable] = (this.state.enable == false) ? true : false,
            _a["" + CommonImport_2.RibbonClasses.hidden] = (this.state.visible == false) ? true : false,
            _a["" + CommonImport_2.RibbonClasses.menuOpenInControl] = (this.areItemsPresent && this.state.isListOpen),
            _a));
        return cls;
        var _a;
    };
    ButtonDropdown.prototype.childrenRefs = function () {
        return this.itemRefs;
    };
    ButtonDropdown.prototype.pushToItemRefs = function (id, ref) {
        this.itemRefs[CommonImport_2.Constants.itemRefDefaultKey] = (ref && ref.factoriedRef) ? ref.factoriedRef : null;
    };
    ButtonDropdown.prototype.componentDidUpdate = function (prevProps, prevState) {
        if (this.state.isListOpen) {
            CommonImport_1.ModelUtil.updatePopupLocation(this.eleRef, this.props.ribbonModel.menusContainer, this.props.id);
        }
    };
    ButtonDropdown.prototype.render = function (props) {
        var _this = this;
        var cls = this.getCls(this.selfCls, props);
        var newPropsBtn = this.getButtonProps(props);
        var newPropsMenu = this.getMenuControlProps(props);
        return preact_1.h("div", { class: cls, ref: function (eleRef) { return _this.eleRef = eleRef; }, "aria-expanded": this.state.isListOpen, "aria-disabled": '' + (this.state.enable == false), "aria-hidden": '' + (this.state.visible == false), "aria-label": this.props.layoutData && this.props.layoutData.ariaLabel },
            preact_1.h("div", { class: classNames(CommonImport_2.RibbonClasses.buttonWrapper, CommonImport_2.RibbonClasses.tooltipWrapper) },
                preact_1.h(Factory_1.default, __assign({}, newPropsBtn)),
                preact_1.h(Factory_1.default, { ftype: CommonImport_3.RendererType.tooltip, data: props.tooltip })),
            preact_1.h(Factory_1.default, __assign({ ref: function (ref) { return _this.pushToItemRefs(undefined, ref); } }, newPropsMenu, { onMenuItemClick: this.onMenuItemClick.bind(this) })));
    };
    return ButtonDropdown;
}(BaseRibbonControl_1.default)); //end of class
exports.ButtonDropdown = ButtonDropdown;


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var BaseRibbonControl_1 = __webpack_require__(7);
var Factory_1 = __webpack_require__(4);
var CommonImport_1 = __webpack_require__(0);
var CommonImport_2 = __webpack_require__(0);
var CommonImport_3 = __webpack_require__(0);
var TrieSearch = __webpack_require__(27);
var Util_1 = __webpack_require__(67);
var InputDropdown = /** @class */ (function (_super) {
    __extends(InputDropdown, _super);
    function InputDropdown() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InputDropdown.prototype.render = function (props) {
        return preact_1.h(CommonImport_3.MyContext.Consumer, null, function (passedArgs) {
            return preact_1.h(InputDropdownBase, __assign({}, props, { ribbonModel: passedArgs.ribbonModel, controlMap: passedArgs.controlMap, pubSub: passedArgs.pubSub }));
        });
    };
    return InputDropdown;
}(preact_1.Component));
exports.default = InputDropdown;
var InputDropdownBase = /** @class */ (function (_super) {
    __extends(InputDropdownBase, _super);
    function InputDropdownBase(props) {
        var _this = _super.call(this, props) || this;
        _this.selfCls = [CommonImport_1.RibbonClasses.control, CommonImport_1.RibbonClasses.inputDropdown];
        _this.menuItemMap = {};
        _this.isInputTextSelected = false;
        _this.delay = 0;
        _this.mode = props.layoutData.mode;
        _this.setState({
            enable: props.visData.enable,
            visible: props.visData.visible,
            isListOpen: false,
            selectedItemId: props.stateData.selectedItemId,
            inputFieldValue: props.stateData.inputFieldValue
        });
        _this.menuItemMap = _this.getMenuItemMap(props.items);
        _this.eventHandlerMap[CommonImport_1.InternalEvents.hidemenu] = _this.onHideMenu.bind(_this);
        return _this;
    }
    InputDropdownBase.prototype.componentDidMount = function () {
        _super.prototype.componentDidMount.call(this);
        $(this.eleRef).on(CommonImport_1.InternalEvents.menuItemClick, this.onMenuItemClick.bind(this));
        $(document).on("click", this.onDocumentClick.bind(this));
        CommonImport_3.ViewUtil.bindTooltips(this.eleRef);
    };
    InputDropdownBase.prototype.componentDidUpdate = function () {
        this.isInputTextSelected = false;
        if (this.state.isListOpen) {
            CommonImport_2.ModelUtil.updatePopupLocation(this.eleRef, this.props.ribbonModel.menusContainer, this.props.id);
        }
    };
    InputDropdownBase.prototype.render = function (props) {
        var _this = this;
        var cls = this.getCls(this.selfCls, props);
        var newPropsInput = this.getInputPartProps();
        var newPropsMenuOpener = this.getMenuOpenerProps();
        var newPropsMenu = this.getMenuControlProps(props);
        var tooltip = props.tooltip && props.tooltip.length && props.tooltip[0]; //hardcoded
        return preact_1.h("div", { class: classNames(cls, CommonImport_1.RibbonClasses.tooltipWrapper), ref: function (eleRef) { return _this.eleRef = eleRef; } },
            preact_1.h(Factory_1.default, __assign({}, newPropsInput)),
            preact_1.h(Factory_1.default, __assign({}, newPropsMenuOpener)),
            preact_1.h(Factory_1.default, __assign({}, newPropsMenu)),
            preact_1.h(Factory_1.default, { ftype: CommonImport_2.RendererType.tooltip, data: tooltip }));
    };
    InputDropdownBase.prototype.getControlState = function () {
        return {
            "type": this.props.type,
            "id": this.props.id,
            "stateData": {
                "selectedItemId": this.state.selectedItemId,
                "inputFieldValue": this.state.inputFieldValue
            },
            "visData": {
                "enable": this.state.enable,
                "visible": this.state.visible
            }
        };
    };
    InputDropdownBase.prototype.setControlState = function (state) {
        if (state == undefined) {
            return;
        }
        this.setState({
            "selectedItemId": (state.stateData === undefined || state.stateData.selectedItemId === undefined) ? this.state.selectedItemId : state.stateData.selectedItemId,
            "inputFieldValue": (state.stateData === undefined || state.stateData.inputFieldValue === undefined) ? Util_1.default.getIdFromTypeMap(state.stateData.selectedItemId, this.menuItemMap) : state.stateData.inputFieldValue,
            "enable": (state.visData === undefined || state.visData.enable === undefined) ? this.state.enable : state.visData.enable,
            "visible": (state.visData === undefined || state.visData.visible === undefined) ? this.state.visible : state.visData.visible
        });
    };
    InputDropdownBase.prototype.getMenuItemMap = function (itemsArray) {
        var itemMap = itemsArray.reduce(function (acc, item) {
            if (item["type"] === CommonImport_2.MenuItemType.inputDropdownMenuItem) {
                acc[item["layoutData"].text] = item["id"];
            }
            return acc;
        }, {});
        return itemMap;
    };
    InputDropdownBase.prototype.onHideMenu = function (data) {
        if (this.state.isListOpen && data.controlId !== this.id) {
            this.hideMenu();
        }
    };
    InputDropdownBase.prototype.hideMenu = function () {
        this.setState({ isListOpen: false });
    };
    InputDropdownBase.prototype.onDocumentClick = function (evt) {
        this.isInputTextSelected = false;
        if (this.state.isListOpen) {
            var el = evt.target;
            while (el && el !== document.documentElement) {
                var menuOpenerEle = $(this.eleRef).find("." + CommonImport_1.RibbonClasses.menu_opener) && $(this.eleRef).find("." + CommonImport_1.RibbonClasses.menu_opener)[0];
                if (menuOpenerEle == el
                    || $(this.eleRef).find("." + CommonImport_1.RibbonClasses.inputDropdownMenu + " li").index(el) !== -1) {
                    return;
                }
                el = el.parentNode;
            }
            this.hideMenu();
        }
    };
    ;
    InputDropdownBase.prototype.openDropdownMenu = function (event) {
        if (!this.state.enable) {
            return;
        }
        if (!this.state.isListOpen) {
            this.setState({
                isListOpen: !this.state.isListOpen
            });
            if (this.state.isListOpen) {
                this.pubSub.publish((CommonImport_1.InternalEvents.hidemenu), [{
                        controlId: this.id,
                        eventName: event
                    }]);
            }
        }
    };
    InputDropdownBase.prototype.onMenuOpenerClick = function (event) {
        if (!this.state.enable) {
            return;
        }
        this.setState({
            isListOpen: !this.state.isListOpen
        });
        if (this.state.isListOpen) {
            this.pubSub.publish((CommonImport_1.InternalEvents.hidemenu), [{
                    controlId: this.id,
                    eventName: event
                }]);
            this.getInputEle().focus();
            this.highlightInputText(event);
        }
    };
    InputDropdownBase.prototype.onMenuItemClick = function (event, data) {
        this.setState({
            isListOpen: false,
            selectedItemId: data.id,
            inputFieldValue: data.value
        });
        this.isInputTextSelected = false;
        var eventArg = new CommonImport_1.ControlEventArg(CommonImport_1.InternalEvents.elementClick, this.props.id, data.id);
        this.triggerControlEvent(eventArg);
    };
    InputDropdownBase.prototype.getCls = function (inputCls, props) {
        var cls = classNames(inputCls, CommonImport_1.RibbonClasses[props.layoutData.mode], props.layoutData.customCls, (_a = {},
            _a["" + CommonImport_1.RibbonClasses.disable] = this.state.enable == false,
            _a["" + CommonImport_1.RibbonClasses.hidden] = this.state.visible == false,
            _a["" + CommonImport_1.RibbonClasses.menuListOpened] = this.state.isListOpen,
            _a));
        return cls;
        var _a;
    };
    InputDropdownBase.prototype.getInputEle = function () {
        return this.base.querySelector("." + CommonImport_1.RibbonClasses.controlPartInput);
    };
    InputDropdownBase.prototype.highlightInputText = function (event) {
        if (event && this.state.isListOpen) {
            event.stopPropagation();
        }
        var inputEle = this.getInputEle();
        if (!this.isInputTextSelected) {
            inputEle.setSelectionRange(0, inputEle["value"].length);
            this.isInputTextSelected = true;
        }
    };
    InputDropdownBase.prototype.setInputPartValue = function () {
        var ele = this.getInputEle();
        var value = ele["value"];
        //blank value entered
        if (value.trim() == "") {
            ele["value"] = this.state.inputFieldValue;
            return;
        }
        ele["value"] = value;
        this.setState({
            inputFieldValue: value
        });
    };
    InputDropdownBase.prototype.getInputPartProps = function () {
        var newProps = {};
        newProps.text = this.state.inputFieldValue;
        newProps.ftype = CommonImport_2.RendererType.inputPart;
        newProps.onClick = this.highlightInputText.bind(this);
        newProps.onKeyDown = this.handleKeyDown.bind(this);
        return newProps;
    };
    InputDropdownBase.prototype.getMenuOpenerProps = function () {
        var newProps = {};
        newProps.onClick = this.onMenuOpenerClick.bind(this);
        newProps.ftype = CommonImport_2.RendererType.menuOpenerPart;
        return newProps;
    };
    InputDropdownBase.prototype.getContextData = function () {
        var contextData = {};
        contextData.visData = {
            enable: this.state.enable,
            visible: this.state.visible
        };
        contextData.stateData = {
            selectedItemId: this.state.selectedItemId,
            inputFieldValue: this.state.inputFieldValue
        };
        return contextData;
    };
    InputDropdownBase.prototype.updateInputFieldText = function (text) {
        var inputPartELe = this.base.querySelector("." + CommonImport_1.RibbonClasses.controlPartInput);
        inputPartELe["value"] = text;
        inputPartELe.setSelectionRange(0, text.length);
    };
    InputDropdownBase.prototype.getMenuControlProps = function (props) {
        var newPropsMenu = {
            items: [
                {
                    type: CommonImport_2.RendererType.inputDropdownMenu,
                    layoutData: props.layoutData,
                    id: props.id,
                    hideMenu: this.hideMenu.bind(this),
                    inputValue: this.state.inputFieldValue,
                    items: props.items,
                    menuItemMap: this.menuItemMap,
                    highlightInputText: this.highlightInputText.bind(this),
                    setMenuItemValue: this.onMenuItemClick.bind(this),
                    updateInputText: this.updateInputFieldText.bind(this),
                    mode: this.mode
                }
            ],
            contextData: this.getContextData(),
            ftype: CommonImport_2.RendererType.menu,
            controlId: props.id,
            customCls: CommonImport_1.RibbonClasses.menuInputDropdown,
            isListOpen: this.state.isListOpen,
            container: props.ribbonModel.menusContainer
        };
        return newPropsMenu;
    };
    InputDropdownBase.prototype.setSelectedValue = function (event) {
        var itemValue = this.state.inputFieldValue;
        var itemId = this.menuItemMap[itemValue] != undefined ? this.menuItemMap[itemValue] : -1;
        this.setState({
            selectedItemId: itemId
        });
        var data = new CommonImport_1.InputDropdownItemEventArg(itemId, event.type, itemValue);
        $(event.target).trigger(CommonImport_1.InternalEvents.menuItemClick, data);
    };
    InputDropdownBase.prototype.handleKeyDown = function (event) {
        switch (event.keyCode) {
            case CommonImport_1.Keycodes.CTRL: {
                break;
            }
            case CommonImport_1.Keycodes.BACKSPACE: {
                break;
            }
            case CommonImport_1.Keycodes.ESCAPE: {
                this.hideMenu();
            }
            case CommonImport_1.Keycodes.DELETE: {
                break;
            }
            case CommonImport_1.Keycodes.TAB: {
                this.setInputPartValue();
                this.setSelectedValue(event);
                break;
            }
            case CommonImport_1.Keycodes.ENTER: {
                this.setInputPartValue();
                this.setSelectedValue(event);
                this.getInputEle().blur();
                break;
            }
            case CommonImport_1.Keycodes.SHIFT: {
                break;
            }
            case CommonImport_1.Keycodes.DOWN_ARROW: {
                this.openDropdownMenu(event);
                event.preventDefault();
                this.triggerMenuItemKeydown(event);
                break;
            }
            case CommonImport_1.Keycodes.UP_ARROW: {
                this.openDropdownMenu(event);
                event.preventDefault();
                this.triggerMenuItemKeydown(event);
                break;
            }
            case CommonImport_1.Keycodes.RIGHT_ARROW: {
                break;
            }
            case CommonImport_1.Keycodes.LEFT_ARROW: {
                break;
            }
            default: {
                if (event.ctrlKey) {
                    break;
                }
                if ((event.keyCode >= 48 && event.keyCode <= 57) || (event.keyCode >= 65 && event.keyCode <= 90) || (event.keyCode >= 97 && event.keyCode <= 111) || (event.keyCode >= 186 && event.keyCode <= 192) || (event.keyCode >= 219 && event.keyCode <= 222)) {
                    this.showSuggestion(event);
                }
                break;
            }
        }
    };
    InputDropdownBase.prototype.triggerMenuItemKeydown = function (event) {
        var selector = "#menu_" + this.props.id;
        var targetEle = $(this.props.ribbonModel.menusContainer).find(selector);
        if (targetEle && targetEle.length) {
            var newEvent = new CustomEvent(event.type);
            newEvent['keyCode'] = event.keyCode;
            targetEle[0].firstChild.dispatchEvent(newEvent);
        }
    };
    InputDropdownBase.prototype.showSuggestion = function (event) {
        if (this.mode == "fontFamilyMode") {
            event.preventDefault();
            if (this.timer) {
                clearTimeout(this.timer);
            }
            var self_1 = this;
            var currentEvent_1 = event;
            this.timer = setTimeout(function () {
                var fontList = self_1.props.items;
                var TrieSearch = __webpack_require__(27);
                var ts = new TrieSearch([['layoutData', "text"], ['type']], { idFieldOrFunction: 'id', ignoreCase: true, splitOnRegEx: false });
                var inputEle = self_1.getInputEle();
                var inputEleValue = inputEle["value"];
                var startIndex = inputEle.selectionStart;
                var selectedText = inputEleValue.substring(startIndex, inputEle.selectionEnd);
                var typedText = currentEvent_1["key"];
                inputEleValue = selectedText.length ? inputEleValue.replace(selectedText, typedText) : self_1.replaceAt(inputEleValue, startIndex, typedText);
                var currentValueLength = inputEleValue.length;
                ts.addAll(fontList);
                var result = ts.get([inputEleValue, "inputDropdownMenuItem"], TrieSearch.UNION_REDUCER);
                var suggestion = "";
                if (result[0]) {
                    suggestion = result[0].layoutData.text;
                    inputEle["value"] = suggestion;
                    var finalValueLength = suggestion.length;
                    inputEle.setSelectionRange(currentValueLength, finalValueLength);
                }
                else {
                    inputEle["value"] = inputEleValue;
                    inputEle.setSelectionRange(startIndex + 1, startIndex + 1);
                }
                self_1.highlightSuggestedMenuItem(suggestion);
            }, this.delay);
        }
    };
    InputDropdownBase.prototype.replaceAt = function (text, index, replacement) {
        return text.substring(0, index) + replacement + text.substring(index);
    };
    InputDropdownBase.prototype.getSelectedItemCls = function (inputValue) {
        var fontName = inputValue.replace(/ /g, '').replace(/\./g, '_');
        var cls = "lr_" + fontName;
        return cls;
    };
    InputDropdownBase.prototype.highlightSuggestedMenuItem = function (suggestion) {
        var selector = "#menu_" + this.props.id;
        var targetEle = $(this.props.ribbonModel.menusContainer).find(selector);
        if (targetEle && targetEle.length) {
            var ele = targetEle[0].querySelector("." + CommonImport_1.RibbonClasses.inputMenuItemFocused);
            if (ele) {
                ele.classList.remove(CommonImport_1.RibbonClasses.inputMenuItemFocused);
            }
            if (suggestion.trim() !== "") {
                var eleToFocus = targetEle[0].querySelector("." + this.getSelectedItemCls(suggestion));
                if (eleToFocus) {
                    if (!this.isScrolledIntoView(eleToFocus)) {
                        var topPos = eleToFocus.offsetTop;
                        eleToFocus.parentElement["scrollTop"] = topPos;
                    }
                    eleToFocus.classList.add(CommonImport_1.RibbonClasses.inputMenuItemFocused);
                }
            }
        }
    };
    InputDropdownBase.prototype.isScrolledIntoView = function (el) {
        var rect = el.getBoundingClientRect();
        var elemTop = rect.top;
        var elemBottom = rect.bottom;
        var isVisible = (elemTop >= 0) && (elemBottom <= el.parentElement["offsetHeight"]);
        return isVisible;
    };
    return InputDropdownBase;
}(BaseRibbonControl_1.default));
exports.InputDropdownBase = InputDropdownBase;


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

var HashArray = __webpack_require__(64);

var MAX_CACHE_SIZE = 64;

var IS_WHITESPACE = /^[\s]*$/;

var DEFAULT_INTERNATIONALIZE_EXPAND_REGEXES = [
  {
    regex: /[åäàáâãæ]/ig,
    alternate: 'a'
  },
  {
    regex: /[èéêë]/ig,
    alternate: 'e'
  },
  {
    regex: /[ìíîï]/ig,
    alternate: 'i'
  },
  {
    regex: /[òóôõö]/ig,
    alternate: 'o'
  },
  {
    regex: /[ùúûü]/ig,
    alternate: 'u'
  },
  {
    regex: /[æ]/ig,
    alternate: 'ae'
  }
];

String.prototype.replaceCharAt=function(index, replacement) {
  return this.substr(0, index) + replacement + this.substr(index + replacement.length);
};

var TrieSearch = function (keyFields, options) {
  this.options = options || {};

  // Default ignoreCase to true
  this.options.ignoreCase = (this.options.ignoreCase === undefined) ? true : this.options.ignoreCase;
  this.options.maxCacheSize = this.options.maxCacheSize || MAX_CACHE_SIZE;
  this.options.cache = this.options.hasOwnProperty('cache') ? this.options.cache : true;
  this.options.splitOnRegEx = this.options.hasOwnProperty('splitOnRegEx') ? this.options.splitOnRegEx : /\s/g;
  this.options.splitOnGetRegEx = this.options.hasOwnProperty('splitOnGetRegEx') ? this.options.splitOnGetRegEx : this.options.splitOnRegEx;
  this.options.min = this.options.min || 1;
  this.options.keepAll = this.options.hasOwnProperty('keepAll') ? this.options.keepAll : false;
  this.options.keepAllKey = this.options.hasOwnProperty('keepAllKey') ? this.options.keepAllKey : 'id';
  this.options.idFieldOrFunction = this.options.hasOwnProperty('idFieldOrFunction') ? this.options.idFieldOrFunction : undefined;
  this.options.expandRegexes = this.options.expandRegexes || DEFAULT_INTERNATIONALIZE_EXPAND_REGEXES;
  this.options.insertFullUnsplitKey = this.options.hasOwnProperty('insertFullUnsplitKey') ? this.options.insertFullUnsplitKey : false;

  this.keyFields = keyFields ? (keyFields instanceof Array ? keyFields : [keyFields]) : [];
  this.root = {};
  this.size = 0;

  if (this.options.cache) {
    this.getCache = new HashArray('key');
  }
};

function deepLookup(obj, keys) {
  return keys.length === 1 ? obj[keys[0]] : deepLookup(obj[keys[0]], keys.slice(1, keys.length));
}

TrieSearch.prototype = {
  add: function (obj, customKeys) {
    if (this.options.cache)
      this.clearCache();

    // Someone might have called add via an array forEach where the second param is a number
    if (typeof customKeys === 'number') {
      customKeys = undefined;
    }

    var keyFields = customKeys || this.keyFields;

    for (var k in keyFields)
    {
      var key = keyFields[k],
        isKeyArr = key instanceof Array,
        val = isKeyArr ? deepLookup(obj, key) : obj[key];

      if (!val) continue;

      val = val.toString();
      val = this.options.ignoreCase ? val.toLowerCase() : val;

      var expandedValues = this.expandString(val);

      for (var v = 0; v < expandedValues.length; v++) {
        var expandedValue = expandedValues[v];

        this.map(expandedValue, obj);
      }
    }
  },
  /**
   * By default using the options.expandRegexes, given a string like 'ö är bra', this will expand it to:
   *
   * ['ö är bra', 'o är bra', 'ö ar bra', 'o ar bra']
   *
   * By default this was built to allow for internationalization, but it could be also be expanded to
   * allow for word alternates, etc. like spelling alternates ('teh' and 'the').
   *
   * This is used for insertion! This should not be used for lookup since if a person explicitly types
   * 'ä' they probably do not want to see all results for 'a'.
   *
   * @param value The string to find alternates for.
   * @returns {Array} Always returns an array even if no matches.
   */
  expandString: function(value) {
    var values = [value];

    if (this.options.expandRegexes && this.options.expandRegexes.length) {
      for (var i = 0; i < this.options.expandRegexes.length; i++) {
        var er = this.options.expandRegexes[i];
        var match;

        while((match = er.regex.exec(value)) !== null) {
          var alternateValue = value.replaceCharAt(match.index, er.alternate);
          values.push(alternateValue);
        }
      }
    }

    return values;
  },
  addAll: function (arr, customKeys) {
    for (var i = 0; i < arr.length; i++)
      this.add(arr[i], customKeys);
  },
  reset: function () {
    this.root = {};
    this.size = 0;
  },
  clearCache: function () {
    // if (this.getCache && !this.getCache._list.length) {
    //   return;
    // }
    this.getCache = new HashArray('key');
  },
  cleanCache: function () {
    while (this.getCache.all.length > this.options.maxCacheSize)
      this.getCache.remove(this.getCache.all[0]);
  },
  addFromObject: function (obj, valueField) {
    if (this.options.cache)
      this.clearCache();

    valueField = valueField || 'value';

    if (this.keyFields.indexOf('_key_') == -1)
      this.keyFields.push('_key_');

    for (var key in obj)
    {
      var o = {_key_: key};
      o[valueField] = obj[key];
      this.add(o);
    }
  },
  map: function (key, value) {
    if (this.options.splitOnRegEx && this.options.splitOnRegEx.test(key))
    {
      var phrases = key.split(this.options.splitOnRegEx);
      var emptySplitMatch = phrases.filter(function(p) { return IS_WHITESPACE.test(p); });
      var selfMatch = phrases.filter(function(p) { return p === key; });
      var selfIsOnlyMatch = selfMatch.length + emptySplitMatch.length === phrases.length;

      // There is an edge case that a RegEx with a positive lookeahed like:
      //  /?=[A-Z]/ // Split on capital letters for a camelcase sentence
      // Will then match again when we call map, creating an infinite stack loop.
      if (!selfIsOnlyMatch) {
        for (var i = 0, l = phrases.length; i < l; i++) {
          if (!IS_WHITESPACE.test(phrases[i])) {
            this.map(phrases[i], value);
          }
        }

        if (!this.options.insertFullUnsplitKey) {
          return;
        }
      }
    }

    if (this.options.cache)
      this.clearCache();

    if (this.options.keepAll) {
      this.indexed = this.indexed || new HashArray([this.options.keepAllKey]);
      this.indexed.add(value);
    }

    if (this.options.ignoreCase) {
      key = key.toLowerCase();
    }

    var keyArr = this.keyToArr(key),
      self = this;

    insert(keyArr, value, this.root);

    function insert(keyArr, value, node) {
      if (keyArr.length == 0)
      {
        node['value'] = node['value'] || [];
        node['value'].push(value);
        return; 
      }

      var k = keyArr.shift();

      if (!node[k])
        self.size++;

      node[k] = node[k] || {};

      insert(keyArr, value, node[k])
    }
  },
  keyToArr: function (key) {
    var keyArr;
      
    if (this.options.min && this.options.min > 1)
    {
      if (key.length < this.options.min)
        return [];

      keyArr = [key.substr(0, this.options.min)];
      keyArr = keyArr.concat(key.substr(this.options.min).split(''));
    }
    else keyArr = key.split('');

    return keyArr;
  },
  findNode: function (key) {
    if (this.options.min > 0 && key.length < this.options.min)
      return [];

    return f(this.keyToArr(key), this.root);

    function f(keyArr, node) {
      if (!node) return undefined;
      if (keyArr.length == 0) return node;

      var k = keyArr.shift();
      return f(keyArr, node[k]);
    }
  },
  _get: function (phrase) {
    phrase = this.options.ignoreCase ? phrase.toLowerCase() : phrase;
    
    var c, node;
    if (this.options.cache && (c = this.getCache.get(phrase)))
      return c.value;

    var ret = undefined,
      haKeyFields = this.options.indexField ? [this.options.indexField] : this.keyFields,
      words = this.options.splitOnGetRegEx ? phrase.split(this.options.splitOnGetRegEx) : [phrase];

    for (var w = 0, l = words.length; w < l; w++)
    {
      if (this.options.min && words[w].length < this.options.min)
        continue;

      var temp = new HashArray(haKeyFields);

      if (node = this.findNode(words[w]))
        aggregate(node, temp);

      ret = ret ? ret.intersection(temp) : temp;
    }
    
    var v = ret ? ret.all : [];

    if (this.options.cache)
    {
      this.getCache.add({key: phrase, value: v});
      this.cleanCache();
    }

    return v;
    
    function aggregate(node, ha) {
      if (node.value && node.value.length)
        ha.addAll(node.value);

      for (var k in node)
        if (k != 'value')
          aggregate(node[k], ha);
    }
  },
  get: function (phrases, reducer) {
    var self = this,
      haKeyFields = this.options.indexField ? [this.options.indexField] : this.keyFields,
      ret = undefined,
      accumulator = undefined;

    if (reducer && !this.options.idFieldOrFunction) {
      throw new Error('To use the accumulator, you must specify and idFieldOrFunction');
    }

    phrases = (phrases instanceof Array) ? phrases : [phrases];

    for (var i = 0, l = phrases.length; i < l; i++)
    {
      var matches = this._get(phrases[i]);

      if (reducer) {
        accumulator = reducer(accumulator, phrases[i], matches, this);
      } else {
        ret = ret ? ret.addAll(matches) : new HashArray(haKeyFields).addAll(matches);
      }
    }

    if (!reducer) {
      return ret.all;
    }

    return accumulator;
  },
  getId: function (item) {
    return typeof this.options.idFieldOrFunction === 'function' ? this.options.idFieldOrFunction(item) : item[this.options.idFieldOrFunction];
  }
};

TrieSearch.UNION_REDUCER = function(accumulator, phrase, matches, trie) {
  if (accumulator === undefined) {
    return matches;
  }

  var map = {}, i, id;
  var maxLength = Math.max(accumulator.length, matches.length);
  var results = [];
  var l = 0;

  // One loop, O(N) for max length of accumulator or matches.
  for (i = 0; i < maxLength; i++) {
    if (i < accumulator.length) {
      id = trie.getId(accumulator[i]);
      map[id] = map[id] ? map[id] : 0;
      map[id]++;

      if (map[id] === 2) {
        results[l++] = accumulator[i];
      }
    }

    if (i < matches.length) {
      id = trie.getId(matches[i]);
      map[id] = map[id] ? map[id] : 0;
      map[id]++;

      if (map[id] === 2) {
        results[l++] = matches[i];
      }
    }
  }

  return results;
};

module.exports = TrieSearch;


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(65);

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

/*===========================================================================*\
 * Requires
\*===========================================================================*/
var JClass = __webpack_require__(66);

/*===========================================================================*\
 * HashArray
\*===========================================================================*/
var HashArray = JClass._extend({
  //-----------------------------------
  // Constructor
  //-----------------------------------
  init: function(keyFields, callback, options) {
    keyFields = keyFields instanceof Array ? keyFields : [keyFields];

    this._map = {};
    this._list = [];
    this.callback = callback;

    this.keyFields = keyFields;

    this.isHashArray = true;
    
    this.options = options || {
      ignoreDuplicates: false
    };

    if (callback) {
      callback('construct');
    }
  },
  //-----------------------------------
  // add()
  //-----------------------------------
  addOne: function (obj) {
    var needsDupCheck = false;
    for (var key in this.keyFields) {
      key = this.keyFields[key];
      var inst = this.objectAt(obj, key);
      if (inst) {
        if (this.has(inst)) {
          if (this.options.ignoreDuplicates)
            return;
          if (this._map[inst].indexOf(obj) != -1) {
            // Cannot add the same item twice
            needsDupCheck = true;
            continue;
          }
          this._map[inst].push(obj);
        }
        else this._map[inst] = [obj];
      }
    }

    if (!needsDupCheck || this._list.indexOf(obj) == -1)
      this._list.push(obj);
  },
  add: function() {
    for (var i = 0; i < arguments.length; i++) {
      this.addOne(arguments[i]);
    }

    if (this.callback) {
      this.callback('add', Array.prototype.slice.call(arguments, 0));
    }
    
    return this;
  },
  addAll: function (arr) {
    if (arr.length < 100)
      this.add.apply(this, arr);
    else {
      for (var i = 0; i < arr.length; i++)
        this.add(arr[i]);
    }
    
    return this;
  },
  addMap: function(key, obj) {
    this._map[key] = obj;
    if (this.callback) {
      this.callback('addMap', {
        key: key,
        obj: obj
      });
    }
    
    return this;
  },
  //-----------------------------------
  // Intersection, union, etc.
  //-----------------------------------
  /**
   * Returns a new HashArray that contains the intersection between this (A) and the hasharray passed in (B). Returns A ^ B.
   */
  intersection: function (other) {
    var self = this;

    if (!other || !other.isHashArray)
      throw Error('Cannot HashArray.intersection() on a non-hasharray object. You passed in: ', other);

    var ret = this.clone(null, true),
      allItems = this.clone(null, true).addAll(this.all.concat(other.all));

    allItems.all.forEach(function (item) {
      if (self.collides(item) && other.collides(item))
        ret.add(item);
    });

    return ret;
  },
  /**
   * Returns a new HashArray that contains the complement (difference) between this hash array (A) and the hasharray passed in (B). Returns A - B.
   */
  complement: function (other) {
    var self = this;

    if (!other || !other.isHashArray)
      throw Error('Cannot HashArray.complement() on a non-hasharray object. You passed in: ', other);

    var ret = this.clone(null, true);

    this.all.forEach(function (item) {
      if (!other.collides(item))
        ret.add(item);
    });

    return ret;
  },
  //-----------------------------------
  // Retrieval
  //-----------------------------------
  get: function(key) {
    return (!(this._map[key] instanceof Array) || this._map[key].length != 1) ? this._map[key] : this._map[key][0];
  },
  getAll: function(keys) {
    keys = keys instanceof Array ? keys : [keys];

    if (keys[0] == '*')
      return this.all;

    var res = new HashArray(this.keyFields);
    for (var key in keys)
      res.add.apply(res, this.getAsArray(keys[key]));

    return res.all;
  },
  getAsArray: function(key) {
    return this._map[key] || [];
  },
  getUniqueRandomIntegers: function (count, min, max) {
    var res = [], map = {};

    count = Math.min(Math.max(max - min, 1), count);
    
    while (res.length < count)
    {
      var r = Math.floor(min + (Math.random() * (max + 1)));
      if (map[r]) continue;
      map[r] = true;
      res.push(r);
    }

    return res;
  },
  sample: function (count, keys) {
    // http://en.wikipedia.org/wiki/Image_(mathematics)
    var image = this.all,
      ixs = {},
      res = [];

    if (keys)
      image = this.getAll(keys);

    var rand = this.getUniqueRandomIntegers(count, 0, image.length - 1);

    for (var i = 0; i < rand.length; i++)
      res.push(image[rand[i]]);

    return res;
  },
  //-----------------------------------
  // Peeking
  //-----------------------------------
  has: function(key) {
    return this._map.hasOwnProperty(key);
  },
  collides: function (item) {
    for (var k in this.keyFields)
      if (this.has(this.objectAt(item, this.keyFields[k])))
        return true;
    
    return false;
  },
  hasMultiple: function(key) {
    return this._map[key] instanceof Array;
  },
  //-----------------------------------
  // Removal
  //-----------------------------------
  removeByKey: function() {
    var removed = [];
    for (var i = 0; i < arguments.length; i++) {
      var key = arguments[i];
      var items = this._map[key].concat();
      if (items) {
        removed = removed.concat(items);
        for (var j in items) {
          var item = items[j];
          for (var ix in this.keyFields) {
            var key2 = this.objectAt(item, this.keyFields[ix]);
            if (key2 && this.has(key2)) {
              var ix = this._map[key2].indexOf(item);
              if (ix != -1) {
                this._map[key2].splice(ix, 1);
              }

              if (this._map[key2].length == 0)
                delete this._map[key2];
            }
          }

          this._list.splice(this._list.indexOf(item), 1);
        }
      }
      delete this._map[key];
    }

    if (this.callback) {
      this.callback('removeByKey', removed);
    }
    
    return this;
  },
  remove: function() {
    for (var i = 0; i < arguments.length; i++) {
      var item = arguments[i];
      for (var ix in this.keyFields) {
        var key = this.objectAt(item, this.keyFields[ix]);
        if (key) {
          var ix = this._map[key].indexOf(item);
          if (ix != -1)
            this._map[key].splice(ix, 1);
          else
            throw new Error('HashArray: attempting to remove an object that was never added!' + key);

          if (this._map[key].length == 0)
            delete this._map[key];
        }
      }

      var ix = this._list.indexOf(item);

      if (ix != -1)
        this._list.splice(ix, 1);
      else
        throw new Error('HashArray: attempting to remove an object that was never added!' + key);
    }

    if (this.callback) {
      this.callback('remove', arguments);
    }
    
    return this;
  },
  removeAll: function() {
    var old = this._list.concat();
    this._map = {};
    this._list = [];

    if (this.callback) {
      this.callback('remove', old);
    }
    
    return this;
  },
  //-----------------------------------
  // Utility
  //-----------------------------------
  objectAt: function(obj, path) {
    if (typeof path === 'string') {
      return obj[path];
    }

    var dup = path.concat();
    // else assume array.
    while (dup.length && obj) {
      obj = obj[dup.shift()];
    }

    return obj;
  },
  //-----------------------------------
  // Iteration
  //-----------------------------------
  forEach: function(keys, callback) {
    keys = keys instanceof Array ? keys : [keys];

    var objs = this.getAll(keys);

    objs.forEach(callback);
    
    return this;
  },
  forEachDeep: function(keys, key, callback) {
    keys = keys instanceof Array ? keys : [keys];

    var self = this,
      objs = this.getAll(keys);

    objs.forEach(function (item) {
      callback(self.objectAt(item, key), item);
    });
    
    return this;
  },
  //-----------------------------------
  // Cloning
  //-----------------------------------
  clone: function(callback, ignoreItems) {
    var n = new HashArray(this.keyFields.concat(), callback ? callback : this.callback);
    if (!ignoreItems)
      n.add.apply(n, this.all.concat());
    return n;
  },
  //-----------------------------------
  // Mathematical
  //-----------------------------------
  sum: function(keys, key, weightKey) {
    var self = this,
      ret = 0;
    this.forEachDeep(keys, key, function (value, item) {
      if (weightKey !== undefined)
        value *= self.objectAt(item, weightKey);

      ret += value;
    });
    return ret;
  },
  average: function(keys, key, weightKey) {
    var ret = 0,
      tot = 0,
      weightsTotal = 0,
      self = this;

    if (weightKey !== undefined)
      this.forEachDeep(keys, weightKey, function (value) {
        weightsTotal += value;
      })

    this.forEachDeep(keys, key, function (value, item) {
      if (weightKey !== undefined)
        value *= (self.objectAt(item, weightKey) / weightsTotal);

      ret += value;
      tot++;
    });

    return weightKey !== undefined ? ret : ret / tot;
  },
  //-----------------------------------
  // Filtering
  //-----------------------------------
  filter: function (keys, callbackOrKey) {
    var self = this;
    
    var callback = (typeof(callbackOrKey) == 'function') ? callbackOrKey : defaultCallback;

    var ha = new HashArray(this.keyFields);
    ha.addAll(this.getAll(keys).filter(callback));
    return ha;
    
    function defaultCallback(item) {
      var val = self.objectAt(item, callbackOrKey);
      return val !== undefined && val !== false;
    }
  }
});

//-----------------------------------
// Operators
//-----------------------------------
Object.defineProperty(HashArray.prototype, 'all', {
  get: function () {
    return this._list;
  }
});

Object.defineProperty(HashArray.prototype, 'map', {
  get: function () {
    return this._map;
  }
});

module.exports = HashArray;

//-----------------------------------
// Browser
//-----------------------------------
if (typeof window !== 'undefined')
  window.HashArray = HashArray;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * jclass v1.1.9
 * https://github.com/riga/jclass
 *
 * Marcel Rieger, 2015
 * MIT licensed, http://www.opensource.org/licenses/mit-license
 */

(function(factory) {

  /**
   * Make jclass available in any context.
   */

  if (true) {
    // AMD
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

  } else if (typeof(exports) == "object") {
    // CommonJS
    exports = factory();

    if (typeof(module) == "object") {
      // NodeJS
      module.exports = exports;
    }

  } else if (window) {
    // Browser
    window.JClass = factory();

  } else if (typeof(console) == "object" && console.error instanceof Function) {
    // error case
    console.error("cannot determine environment");
  }

})(function() {

  /**
   * Helper functions.
   */

  /**
   * Checks whether a passed object is a function.
   *
   * @param obj - The object to check.
   * @returns {boolean}
   */
  var isFn = function(obj) {
    return obj instanceof Function;
  };

  /**
   * Extends a target object by one or more source objects with shallow key comparisons. Note that
   * the extension is done in-place.
   *
   * @param {object} target - The target object to extend.
   * @param {...object} source - Source objects.
   * @returns {object} The extended object.
   */
  var extend = function(target) {
    var sources = Array.prototype.slice.call(arguments, 1);

    // loop through all sources
    for (var i in sources) {
      var source = sources[i];

      // object check
      if (typeof(source) != "object") {
        continue;
      }

      // loop through all source attributes
      for (var key in source) {
        target[key] = source[key];
      }
    }

    return target;
  };


  /**
   * Default options.
   */

  var defaultOptions = {
    // internal object for indicating that class objects don't have a class object themselves,
    // may not be used by users
    _isClassObject: false
  };


  /**
   * Flags.
   */

  // flag to distinguish between prototype and class instantiation 
  var initializing = false;


  /**
   * Base class definition.
   */

  // empty BaseClass implementation
  var BaseClass = function(){};

  // add the _subClasses entry
  BaseClass._subClasses = [];

  // empty init method
  BaseClass.prototype.init = function(){};


  /**
   * Extend mechanism. Returns a derived class.
   *
   * @param {object} instanceMembers - Members that will be owned by instances.
   * @param {object} classMembers - Members that will be owned by the class itself.
   * @returns {JClass}
   */
  BaseClass._extend = function(instanceMembers, classMembers, options) {

    // default arguments
    if (instanceMembers === undefined) {
      instanceMembers = {};
    }
    if (classMembers === undefined) {
      classMembers = {};
    }
    if (options === undefined) {
      options = {};
    }

    // mixin default options
    options = extend({}, defaultOptions, options);


    // sub class dummy constructor
    var JClass = function() {
      // nothing happens here when we are initializing
      if (initializing) {
        return;
      }

      // store a reference to the class itself
      this._class = JClass;

      // all construction is actually done in the init method
      if (this.init instanceof Function) {
        this.init.apply(this, arguments);
      }
    };


    // alias for readability
    var SuperClass = this;

    // create an instance of the super class via new
    // the flag sandwich prevents a call to the init method
    initializing = true;
    var prototype = new SuperClass();
    initializing = false;

    // get the prototype of the super class
    var superPrototype = SuperClass.prototype;

    // the instance of the super class is our new prototype
    JClass.prototype = prototype;

    // enforce the constructor to be what we expect
    // calls to the constructor will invoke the init method (see above)
    JClass.prototype.constructor = JClass;

    // store a reference to the super class
    JClass._superClass = SuperClass;

    // store references to all extending classes
    JClass._subClasses = [];
    SuperClass._subClasses.push(JClass);

    // make this class extendable as well
    JClass._extend = SuperClass._extend;


    // _extends returns true if the class itself extended "target"
    // in any hierarchy, e.g. every class extends "JClass" itself
    JClass._extends = function(target) {
      // this function operates recursive, so stop when the super class is our BaseClass
      if (this._superClass == BaseClass) {
        return false;
      }

      // success case
      if (target == this._superClass || target == BaseClass) {
        return true;
      }

      // continue with the next super class
      return this._superClass._extends(target);
    };


    // propagate instance members directly to the created protoype,
    // the member is either a normal member or a descriptor
    for (var key in instanceMembers) {
      var property = Object.getOwnPropertyDescriptor(instanceMembers, key);
      var member   = property.value;

      // descriptor flag set?
      if (member !== null && typeof(member) == "object" && member.descriptor) {
        Object.defineProperty(prototype, key, member);

      // getter/setter syntax
      } else if (!("value" in property) && ("set" in property || "get" in property)) {
        Object.defineProperty(prototype, key, property);

      // normal member, simple assignment
      } else {
        prototype[key] = member;

        // if both member and the super member are distinct functions
        // add the super member to the member as "_super"
        var superMember = superPrototype[key];
        if (isFn(member) && isFn(superMember) && member !== superMember) {
          member._super = superMember;
        }
      }
    }


    // propagate class members to the _members object
    if (!options._isClassObject) {
      // try to find the super class of the _members object 
      var ClassMembersSuperClass = SuperClass._members === undefined ?
        BaseClass : SuperClass._members._class;

      // create the actual class of the _members instance
      // with an updated version of our options
      var opts = extend({}, options, { _isClassObject: true });
      var ClassMembersClass = ClassMembersSuperClass._extend(classMembers, {}, opts);

      // store the actual JClass in ClassMembersClass
      ClassMembersClass._instanceClass = JClass;

      // create the _members instance
      JClass._members = new ClassMembersClass();
    }


    // return the new class
    return JClass;
  };


  /**
   * Converts arbitrary protoype-style classes to our JClass definition.
   *
   * @param {function} cls - The class to convert.
   * @returns {JClass}
   */
  BaseClass._convert = function(cls, options) {
    // the properties consist of the class' prototype
    var instanceMembers = cls.prototype;

    // add the constructor function
    instanceMembers.init = function() {
      // simply create an instance of our target class
      var origin = this._origin = BaseClass._construct(cls, arguments);

      // add properties for each own property in _origin
      Object.keys(origin).forEach(function(key) {
        if (!origin.hasOwnProperty(key)) {
          return;
        }

        Object.defineProperty(this, key, {
          get: function() {
            return origin[key];
          }
        });
      }, this);
    };

    // finally, create and return our new class
    return BaseClass._extend(instanceMembers, {}, options);
  };


  /**
   * Returns an instance of a class with a list of arguments. This provides an apply-like
   * constructor usage. Note that this approach does not work with native constructors (e.g. String
   * or Boolean).
   *
   * @param {Class|JClass} cls - The class to instantiate. This may be a JClass or a prototype-based
   *   class.
   * @param {array} [args=[]] - Arguments to pass to the constructor.
   * @returns {instance}
   */
  BaseClass._construct = function(cls, args) {
    // empty default args
    if (args === undefined) {
      args = [];
    }

    // create a class wrapper that calls cls like a function
    var Class = function() {
      return cls.apply(this, args);
    };

    // copy the prototype
    Class.prototype = cls.prototype;

    // return a new instance
    return new Class();
  };


  /**
   * Returns a property descriptor of the super class.
   *
   * @param {JClass|instance} cls - A JClass or an instance of a JClass to retrieve the property
   *   descriptor from.
   * @param {string} prop - The name of the property descriptor to get.
   * @returns {object}
   */
  BaseClass._superDescriptor = function(cls, prop) {
    // if cls is an instance, use its class
    if ("_class" in cls && cls instanceof cls._class) {
      cls = cls._class;
    }

    // a JClass?
    if ("_extends" in cls && cls._extends instanceof Function && cls._extends(this)) {
      return Object.getOwnPropertyDescriptor(cls._superClass.prototype, prop);
    } else {
      return undefined;
    }
  };


  /**
   * Return the BaseClass.
   */

  return BaseClass;
});


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Util = /** @class */ (function () {
    function Util() {
    }
    Util.isValidNodeType = function (node, validTypeArr) {
        if (node && node.type && validTypeArr.indexOf(node.type.toLowerCase()) > -1) {
            return true;
        }
        return false;
    };
    ;
    Util.raiseError = function (str, args) {
        console.log("Error: " + str, args);
    };
    ;
    Util.getIdFromTypeMap = function (value, searchInObj) {
        var id = undefined;
        for (var key in searchInObj) {
            if (searchInObj[key] == value) {
                id = key;
            }
        }
        return id;
    };
    return Util;
}()); //end of class
exports.default = Util;


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var Factory_1 = __webpack_require__(4);
var CommonImport_1 = __webpack_require__(0);
var CommonImport_2 = __webpack_require__(0);
var InputDropdownMenu = /** @class */ (function (_super) {
    __extends(InputDropdownMenu, _super);
    function InputDropdownMenu(props) {
        var _this = _super.call(this, props) || this;
        _this.selfCls = [CommonImport_1.RibbonClasses.inputDropdownMenu];
        _this.menuItemsMap = props.menuItemMap;
        _this.inputFieldValue = props.inputValue;
        return _this;
    }
    InputDropdownMenu.prototype.getControlState = function () {
        return {
            "type": this.props.type,
            "id": this.props.id,
            "stateData": {
                "selectedItemId": this.state.selectedItemId
            }
        };
    };
    InputDropdownMenu.prototype.onMenuItemSelection = function (event, data) {
        this.setState({
            selectedItemId: data.selectedItemId
        });
        this.props.setMenuItemValue(event, data);
    };
    InputDropdownMenu.prototype.componentDidMount = function () {
        //this.props.highlightInputText();
        this.highlightSelectedItem();
    };
    InputDropdownMenu.prototype.componentWillUnmount = function () {
        var ele = this.base.querySelector("." + CommonImport_1.RibbonClasses.inputMenuItemFocused);
        ele ? ele.classList.remove(CommonImport_1.RibbonClasses.inputMenuItemFocused) : null;
    };
    InputDropdownMenu.prototype.highlightSelectedItem = function () {
        var ele = this.base.querySelector("." + this.getSelectedItemCls());
        if (ele) {
            if (!this.isScrolledIntoView(ele)) {
                var topPos = ele.offsetTop;
                this.base.parentElement.firstChild["scrollTop"] = topPos;
            }
            ele.classList.add(CommonImport_1.RibbonClasses.inputMenuItemFocused);
        }
    };
    InputDropdownMenu.prototype.getSelectedItemCls = function () {
        var fontName = this.inputFieldValue.replace(/ /g, '').replace(/\./g, '_');
        var cls = "lr_" + fontName;
        return cls;
    };
    InputDropdownMenu.prototype.onMouseEnter = function (event) {
        var ele = this.base.querySelector("." + CommonImport_1.RibbonClasses.inputMenuItemFocused); // get the currently highlighted menu item
        if (ele) {
            ele.classList.remove(CommonImport_1.RibbonClasses.inputMenuItemFocused); // remove focus
        }
        event.currentTarget.classList.add(CommonImport_1.RibbonClasses.inputMenuItemFocused); // highlight the current target element
    };
    InputDropdownMenu.prototype.onMouseLeave = function (event) {
        var ele = this.base.querySelector("." + CommonImport_1.RibbonClasses.inputMenuItemFocused);
        ele.classList.remove(CommonImport_1.RibbonClasses.inputMenuItemFocused);
    };
    InputDropdownMenu.prototype.handleKeyDown = function (event) {
        switch (event.keyCode) {
            case CommonImport_2.Keycodes.ENTER:
                this.handleEnter();
                break;
            case CommonImport_2.Keycodes.UP_ARROW:
                event.preventDefault();
                this.focusPreviousOption();
                break;
            case CommonImport_2.Keycodes.DOWN_ARROW:
                event.preventDefault();
                this.focusNextOption();
                break;
            case CommonImport_2.Keycodes.TAB:
                this.handleEnter();
                break;
            case CommonImport_2.Keycodes.ESCAPE:
                this.props.hideMenu();
                break;
            case CommonImport_2.Keycodes.LEFT_ARROW:
                event.preventDefault();
                break;
            case CommonImport_2.Keycodes.LEFT_ARROW:
                event.preventDefault();
                break;
            default: break;
        }
    };
    InputDropdownMenu.prototype.disableMouseEvent = function () {
        $(this.base).off(onmouseenter);
        $(this.base).off(onmouseleave);
    };
    InputDropdownMenu.prototype.enableMouseEvent = function () {
        $(this.base).on(onmouseenter);
        $(this.base).on(onmouseleave);
    };
    InputDropdownMenu.prototype.focusNextOption = function () {
        var ele = this.base.querySelector("." + CommonImport_1.RibbonClasses.inputMenuItemFocused);
        if (ele) {
            var nextItem = this.getNextClickableElement(ele);
            if (nextItem) {
                ele.classList.remove(CommonImport_1.RibbonClasses.inputMenuItemFocused);
                nextItem.classList.add(CommonImport_1.RibbonClasses.inputMenuItemFocused);
                if (!this.isScrolledIntoView(nextItem)) {
                    var topPos = nextItem.offsetTop;
                    this.base.parentElement.firstChild["scrollTop"] = topPos;
                }
            }
        }
        else {
            var itemToFocus = this.base.querySelector("." + CommonImport_1.RibbonClasses.inputDropdownMenuItem);
            itemToFocus.classList.add(CommonImport_1.RibbonClasses.inputMenuItemFocused);
        }
        this.props.updateInputText(this.base.querySelector("." + CommonImport_1.RibbonClasses.inputMenuItemFocused + " ." + CommonImport_1.RibbonClasses.text).textContent);
    };
    InputDropdownMenu.prototype.isScrolledIntoView = function (el) {
        var rect = el.getBoundingClientRect();
        var elemTop = rect.top;
        var elemBottom = rect.bottom;
        var isVisible = (elemTop >= 0) && (elemBottom <= this.base.parentElement.firstChild["offsetHeight"]);
        return isVisible;
    };
    InputDropdownMenu.prototype.focusPreviousOption = function () {
        var ele = this.base.querySelector("." + CommonImport_1.RibbonClasses.inputMenuItemFocused);
        if (ele) {
            var nextItem = this.getPreviousClickableElement(ele);
            if (nextItem) {
                ele.classList.remove(CommonImport_1.RibbonClasses.inputMenuItemFocused);
                nextItem.classList.add(CommonImport_1.RibbonClasses.inputMenuItemFocused);
                if (this.base.getElementsByClassName('lr_inputDropdownMenuItem')[1] === nextItem) {
                    this.base.parentElement.firstChild["scrollTop"] = 0;
                }
            }
        }
        else {
            var clickableEle = this.base.querySelectorAll("." + CommonImport_1.RibbonClasses.inputDropdownMenuItem);
            var itemToFocus = clickableEle[clickableEle.length - 1];
            itemToFocus.classList.add(CommonImport_1.RibbonClasses.inputMenuItemFocused);
        }
        this.props.updateInputText(this.base.querySelector("." + CommonImport_1.RibbonClasses.inputMenuItemFocused + " ." + CommonImport_1.RibbonClasses.text).textContent);
    };
    InputDropdownMenu.prototype.getPreviousClickableElement = function (ele) {
        var nextEle = ele.previousSibling;
        if (nextEle) {
            if (nextEle.classList.contains(CommonImport_1.RibbonClasses.inputDropdownMenuItem)) {
                return nextEle;
            }
            return this.getPreviousClickableElement(nextEle);
        }
        else {
            return false;
        }
    };
    InputDropdownMenu.prototype.getNextClickableElement = function (ele) {
        var nextEle = ele.nextSibling;
        if (nextEle) {
            if (nextEle.classList.contains(CommonImport_1.RibbonClasses.inputDropdownMenuItem)) {
                return nextEle;
            }
            return this.getNextClickableElement(nextEle);
        }
        else {
            return false;
        }
    };
    InputDropdownMenu.prototype.handleEnter = function () {
        var focusedItem = this.base.querySelector("." + CommonImport_1.RibbonClasses.inputMenuItemFocused + " ." + CommonImport_1.RibbonClasses.text);
        var itemValue = this.inputFieldValue;
        if (focusedItem) {
            itemValue = focusedItem.textContent;
        }
        var id = this.menuItemsMap[itemValue] != undefined ? this.menuItemsMap[itemValue] : -1;
        var data = new CommonImport_2.InputDropdownItemEventArg(id, event.type, itemValue);
        this.onMenuItemSelection(event, data);
    };
    InputDropdownMenu.prototype.render = function (props) {
        var _this = this;
        var cls = classNames(this.selfCls, CommonImport_1.RibbonClasses[this.props.mode]);
        var onMouseEnter = this.onMouseEnter.bind(this);
        var onMouseLeave = this.onMouseLeave.bind(this);
        var onMenuItemSelection = this.onMenuItemSelection.bind(this);
        var mode = this.props.mode;
        var showMenuItemTooltip = this.props.layoutData.showMenuItemTooltip;
        return preact_1.h("div", { class: cls, role: "menu", ref: function (eleRef) { return _this.eleRef = eleRef; }, tabIndex: -1, onKeyDown: this.handleKeyDown.bind(this) }, props.items.map(function (item, i) {
            var newProps = __assign({}, item);
            newProps.ftype = item.type;
            newProps.onMouseEnter = onMouseEnter;
            newProps.onMouseLeave = onMouseLeave;
            newProps.onMenuItemSelection = onMenuItemSelection;
            newProps.ribbonModel = props.ribbonModel;
            newProps.mode = mode;
            newProps.showMenuItemTooltip = showMenuItemTooltip;
            return preact_1.h(Factory_1.default, __assign({}, newProps));
        }));
    };
    return InputDropdownMenu;
}(preact_1.Component));
exports.default = InputDropdownMenu;


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var Factory_1 = __webpack_require__(4);
var CommonImport_1 = __webpack_require__(0);
var CommonImport_2 = __webpack_require__(0);
var CommonImport_3 = __webpack_require__(0);
var InputDropdownMenuItem = /** @class */ (function (_super) {
    __extends(InputDropdownMenuItem, _super);
    function InputDropdownMenuItem() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selfCls = [CommonImport_1.RibbonClasses.inputDropdownMenuItem];
        return _this;
    }
    InputDropdownMenuItem.prototype.onClick = function (event) {
        var data = new CommonImport_3.InputDropdownItemEventArg(this.props.id, event.type, this.props.layoutData.text);
        this.props.onMenuItemSelection(event, data);
    };
    // Render the Subtext based on type of value. Permitted Value type: string || Object
    InputDropdownMenuItem.prototype.getSubtextNode = function (subText) {
        if (typeof (subText) === "string") {
            return preact_1.h("span", { class: "lr_subText" }, subText);
        }
        else {
            return preact_1.h("span", { style: subText.fontStyle, class: "lr_subText " + subText.mode }, subText.text);
        }
    };
    InputDropdownMenuItem.prototype.getTooltip = function (props) {
        var subText = props.layoutData.subText == null ? '' : typeof (props.layoutData.subText) == "string" ? props.layoutData.subText : props.layoutData.subText.text;
        return props.layoutData.text + " " + subText;
    };
    InputDropdownMenuItem.prototype.render = function (props) {
        var _this = this;
        var generatedClsName = props.layoutData.text.replace(/ /g, '').replace(/\./g, '_');
        var cls = classNames(this.selfCls, props.layoutData.customCls, "lr_" + generatedClsName);
        var fontFamily = props.layoutData.fontFamily || "SANS-SERIF";
        var styles = "font-family: " + fontFamily + ";";
        var iconPartProps = props.layoutData.icon;
        iconPartProps ? iconPartProps.ribbonModel = props.ribbonModel : null;
        var title = props.showMenuItemTooltip == false ? null : this.getTooltip(props);
        return preact_1.h("div", { class: cls, role: "menuItem", title: title, ref: function (eleRef) { return _this.eleRef = eleRef; }, style: styles, onClick: this.onClick.bind(this), tabIndex: -1, onMouseEnter: props.onMouseEnter, onMouseLeave: props.onMouseLeave },
            preact_1.h("div", { class: CommonImport_1.RibbonClasses.inputMenuItem },
                props.layoutData.icon &&
                    preact_1.h(Factory_1.default, __assign({ ftype: CommonImport_2.RendererType.icon }, iconPartProps)),
                preact_1.h("div", { className: CommonImport_1.RibbonClasses.inputDropdownMenuItemText },
                    preact_1.h(Factory_1.default, __assign({ ftype: CommonImport_2.RendererType.text }, { text: props.layoutData.text })),
                    props.layoutData.subText && this.getSubtextNode(props.layoutData.subText))));
    };
    return InputDropdownMenuItem;
}(preact_1.Component));
exports.default = InputDropdownMenuItem;


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var Factory_1 = __webpack_require__(4);
var CommonImport_1 = __webpack_require__(0);
var CommonImport_2 = __webpack_require__(0);
var ButtonPart = /** @class */ (function (_super) {
    __extends(ButtonPart, _super);
    function ButtonPart() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selfCls = [CommonImport_1.RibbonClasses.controlPartButton];
        return _this;
    }
    ButtonPart.prototype.getCls = function (inputCls, props) {
        return classNames(inputCls);
    };
    ButtonPart.prototype.render = function (props) {
        var cls = this.getCls(this.selfCls, props);
        return preact_1.h("div", { class: cls, onClick: props.onClick },
            (props.icon != undefined)
                && preact_1.h(Factory_1.default, __assign({ ftype: CommonImport_2.RendererType.icon }, props.icon)),
            (props.text != undefined)
                && preact_1.h(Factory_1.default, __assign({ ftype: CommonImport_2.RendererType.text }, { text: props.text })));
    };
    return ButtonPart;
}(preact_1.Component));
exports.default = ButtonPart;


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var Factory_1 = __webpack_require__(4);
var CommonImport_1 = __webpack_require__(0);
var CommonImport_2 = __webpack_require__(0);
var ButtonPartWithColorDiv = /** @class */ (function (_super) {
    __extends(ButtonPartWithColorDiv, _super);
    function ButtonPartWithColorDiv() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selfCls = [CommonImport_1.RibbonClasses.controlPartButton];
        return _this;
    }
    ButtonPartWithColorDiv.prototype.getCls = function (inputCls, props) {
        return classNames(inputCls);
    };
    ButtonPartWithColorDiv.prototype.render = function (props) {
        var cls = this.getCls(this.selfCls, props);
        return preact_1.h("div", { onClick: props.onClick, class: cls, onMouseOver: props.onMouseOver, onMouseOut: props.onMouseOut },
            (props.icon != undefined)
                && preact_1.h(Factory_1.default, __assign({ ftype: CommonImport_2.RendererType.icon }, props.icon)),
            (props.text != undefined)
                && preact_1.h(Factory_1.default, __assign({ ftype: CommonImport_2.RendererType.text }, { text: props.text })),
            preact_1.h("div", { className: CommonImport_1.RibbonClasses.controlPartColorDiv, style: "background-color:" + props.color }));
    };
    return ButtonPartWithColorDiv;
}(preact_1.Component));
exports.default = ButtonPartWithColorDiv;


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var CommonImport_1 = __webpack_require__(0);
var InputPart = /** @class */ (function (_super) {
    __extends(InputPart, _super);
    function InputPart() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selfCls = [CommonImport_1.RibbonClasses.controlPartInput];
        return _this;
    }
    InputPart.prototype.getCls = function (inputCls, props) {
        return classNames(inputCls);
    };
    InputPart.prototype.render = function (props) {
        var cls = this.getCls(this.selfCls, props);
        return preact_1.h("input", { type: "text", class: cls, onClick: props.onClick, value: props.text, onKeyUp: props.onKeyUp, onKeyDown: props.onKeyDown });
    };
    return InputPart;
}(preact_1.Component));
exports.default = InputPart;


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var CommonImport_1 = __webpack_require__(0);
var MenuOpenerPart = /** @class */ (function (_super) {
    __extends(MenuOpenerPart, _super);
    function MenuOpenerPart() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selfCls = [CommonImport_1.RibbonClasses.menu_opener];
        return _this;
    }
    MenuOpenerPart.prototype.getCls = function (inputCls, props) {
        return classNames(inputCls);
    };
    MenuOpenerPart.prototype.render = function (props) {
        var cls = this.getCls(this.selfCls, props);
        return preact_1.h("div", { class: cls, onClick: props.onClick, onMouseOver: props.onMouseOver, onMouseOut: props.onMouseOut },
            preact_1.h("span", { class: "caret" }));
    };
    return MenuOpenerPart;
}(preact_1.Component));
exports.default = MenuOpenerPart;


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var Factory_1 = __webpack_require__(4);
var CommonImport_1 = __webpack_require__(0);
var CommonImport_2 = __webpack_require__(0);
var MenuOpenerPartWithText = /** @class */ (function (_super) {
    __extends(MenuOpenerPartWithText, _super);
    function MenuOpenerPartWithText() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selfCls = [CommonImport_1.RibbonClasses.menu_opener, CommonImport_1.RibbonClasses.menu_openerWithText];
        return _this;
    }
    MenuOpenerPartWithText.prototype.getCls = function (inputCls, props) {
        return classNames(inputCls);
    };
    MenuOpenerPartWithText.prototype.render = function (props) {
        var cls = this.getCls(this.selfCls, props);
        return preact_1.h("div", { class: cls, onClick: props.onClick, onMouseOver: props.onMouseOver, onMouseOut: props.onMouseOut },
            (props.text != undefined)
                && preact_1.h(Factory_1.default, __assign({ ftype: CommonImport_2.RendererType.text }, { text: props.text })),
            preact_1.h("div", { class: "caretWrapper" },
                preact_1.h("span", { class: "caret" })));
    };
    return MenuOpenerPartWithText;
}(preact_1.Component));
exports.default = MenuOpenerPartWithText;


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var CommonImport_1 = __webpack_require__(0);
var MenuControl_1 = __webpack_require__(28);
var CommonImport_2 = __webpack_require__(0);
var SubmenuControlWrapper = /** @class */ (function (_super) {
    __extends(SubmenuControlWrapper, _super);
    function SubmenuControlWrapper() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.itemRefs = {};
        return _this;
    }
    SubmenuControlWrapper.prototype.childrenRefs = function () {
        return this.itemRefs;
    };
    SubmenuControlWrapper.prototype.pushToItemRefs = function (ref) {
        this.itemRefs[CommonImport_1.Constants.itemRefDefaultKey] = ref;
    };
    SubmenuControlWrapper.prototype.render = function (props) {
        var _this = this;
        return preact_1.h(CommonImport_2.MyContext.Consumer, null, function (passedArgs) {
            return preact_1.h(SubmenuControl, __assign({ ref: function (ref) { return _this.pushToItemRefs(ref); } }, props, { ribbonModel: passedArgs.ribbonModel, controlMap: passedArgs.controlMap, pubSub: passedArgs.pubSub }));
        });
    };
    return SubmenuControlWrapper;
}(preact_1.Component));
exports.SubmenuControlWrapper = SubmenuControlWrapper;
var SubmenuControl = /** @class */ (function (_super) {
    __extends(SubmenuControl, _super);
    function SubmenuControl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isSubmenu = true;
        _this.menuIdPrefix = "submenu_";
        _this.selfCls = [CommonImport_1.RibbonClasses.submenu]; //, "dropdown-menu1"
        return _this;
    }
    return SubmenuControl;
}(MenuControl_1.MenuControl));
exports.SubmenuControl = SubmenuControl;


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var BaseMenuItemNew_1 = __webpack_require__(9);
var Factory_1 = __webpack_require__(4);
var CommonImport_1 = __webpack_require__(0);
var CommonImport_2 = __webpack_require__(0);
var CommonImport_3 = __webpack_require__(0);
var CommonImport_4 = __webpack_require__(0);
var MenuItemSelectable = /** @class */ (function (_super) {
    __extends(MenuItemSelectable, _super);
    function MenuItemSelectable(props) {
        var _this = _super.call(this, props) || this;
        _this.mode = "";
        _this.selfCls = [CommonImport_2.RibbonClasses.menuitem];
        _this.holdsState = true;
        _this.mode = (props.layoutData && props.layoutData.mode) ? props.layoutData.mode : undefined;
        switch (_this.mode) {
            case CommonImport_4.MenuItemModes.selectable:
                _this.selfCls = [CommonImport_2.RibbonClasses.menuitem];
                break;
            case CommonImport_4.MenuItemModes.linestyle:
                _this.selfCls = [CommonImport_2.RibbonClasses.menuitem, CommonImport_2.RibbonClasses.menuitemLinestyle];
                break;
            case CommonImport_4.MenuItemModes.statelessOnlyText:
                _this.selfCls = [CommonImport_2.RibbonClasses.menuitem, CommonImport_2.RibbonClasses.menuitemText];
                break;
            case CommonImport_4.MenuItemModes.stateless:
            default:
                _this.selfCls = [CommonImport_2.RibbonClasses.menuitem, CommonImport_2.RibbonClasses.menuitemIconText];
                break;
        }
        _this.setState(_this.getStateObjFromProps(props));
        if (typeof props.buildControlData == "function") {
            props.buildControlData(props.id, props);
        }
        return _this;
    }
    MenuItemSelectable.prototype.getStateObjFromProps = function (props) {
        return {
            enable: (props.visData && props.visData.enable == false) ? false : true,
            visible: (props.visData && props.visData.visible == false) ? false : true,
            selected: (props.stateData && props.stateData.selected == true) ? true : false
        };
    };
    MenuItemSelectable.prototype.getCls = function (inputCls, props) {
        var cls = classNames(inputCls, CommonImport_2.RibbonClasses.tooltipWrapper, (props.layoutData && props.layoutData.customCls), (_a = {},
            _a["" + CommonImport_2.RibbonClasses.disable] = (this.state.enable == false) ? true : false,
            _a["" + CommonImport_2.RibbonClasses.hidden] = (this.state.visible == false) ? true : false,
            _a["" + CommonImport_2.RibbonClasses.toggled] = (CommonImport_4.MenuItemToggleableModes.indexOf(this.mode) > -1
                && this.state.selected == true) ? true : false,
            _a));
        return cls;
        var _a;
    };
    MenuItemSelectable.prototype.getControlState = function () {
        return CommonImport_1.ModelUtil.getItemDeepState(this);
    };
    MenuItemSelectable.prototype.setControlState = function (state) {
        if (state == undefined) {
            return;
        }
        CommonImport_1.ModelUtil.setItemDeepState(this, "", state);
    };
    MenuItemSelectable.prototype.getControlSelfState = function () {
        var stateData = {};
        stateData["id"] = this.id;
        stateData["type"] = this.type;
        switch (this.mode) {
            case CommonImport_4.MenuItemModes.stateless:
            case CommonImport_4.MenuItemModes.statelessOnlyText:
                stateData["stateData"] = {};
                stateData["visData"] = {
                    "visible": this.state.visible,
                    "enable": this.state.enable
                };
                break;
            case CommonImport_4.MenuItemModes.selectable:
            case CommonImport_4.MenuItemModes.linestyle:
            default:
                stateData["stateData"] = {
                    "selected": (this.state.selected == true) ? true : false
                };
                stateData["visData"] = {
                    "visible": this.state.visible,
                    "enable": this.state.enable
                };
                break;
        }
        return stateData;
    };
    MenuItemSelectable.prototype.setControlSelfState = function (stateData) {
        if (!(stateData)) {
            return;
        }
        switch (this.mode) {
            case CommonImport_4.MenuItemModes.stateless:
            case CommonImport_4.MenuItemModes.statelessOnlyText:
                this.setState(function (prevState, props) {
                    return {
                        visible: (stateData.visData && stateData.visData.visible != undefined) ? stateData.visData.visible : prevState.visible,
                        enable: (stateData.visData && stateData.visData.enable != undefined) ? stateData.visData.enable : prevState.enable
                    };
                });
                break;
            case CommonImport_4.MenuItemModes.selectable:
            case CommonImport_4.MenuItemModes.linestyle:
            default:
                this.setState(function (prevState, props) {
                    return {
                        selected: (stateData.stateData && stateData.stateData.selected != undefined) ? stateData.stateData.selected : prevState.selected,
                        visible: (stateData.visData && stateData.visData.visible != undefined) ? stateData.visData.visible : prevState.visible,
                        enable: (stateData.visData && stateData.visData.enable != undefined) ? stateData.visData.enable : prevState.enable
                    };
                });
                break;
        }
    };
    MenuItemSelectable.prototype.onClick = function (event) {
        if (CommonImport_1.ModelUtil.isInactiveByState(this.state)) {
            return true;
        }
        var changeParentIcon = (this.props.layoutData && this.props.layoutData.changeParentIcon == true) ? true : false;
        var updatingIcon = (changeParentIcon && this.props.layoutData && this.props.layoutData.icon)
            ? this.props.layoutData.icon : undefined;
        var toggleable = CommonImport_4.MenuItemToggleableModes.indexOf(this.mode) > -1;
        var stateData = this.getControlSelfState();
        var toggleGroup = (this.props.layoutData && this.props.layoutData.toggleGroup)
            ? this.props.layoutData.toggleGroup : undefined;
        var pressThisItemOnClick = (this.props.layoutData && this.props.layoutData.pressThisItemOnClick)
            ? this.props.layoutData.pressThisItemOnClick : undefined;
        var data = new CommonImport_2.ItemEventExtArg(this.id, event.type, updatingIcon, toggleable, toggleGroup, pressThisItemOnClick, stateData);
        if (typeof this.props.onMenuItemClick == "function") {
            this.props.onMenuItemClick(data);
        }
        return true;
    };
    MenuItemSelectable.prototype.render = function (props) {
        var cls = this.getCls(this.selfCls, props);
        var newAKTooltipProps = {
            accessKey: props.accessKey,
            ftype: CommonImport_3.RendererType.accessKeyTooltip
        };
        var icon = (props.layoutData && props.layoutData.icon)
            || (props.contextData && props.contextData.childrenConfig && props.contextData.childrenConfig.defaultIcon);
        icon ? icon.ribbonModel = props.ribbonModel : null;
        return preact_1.h("li", { class: cls, onClick: this.onClick.bind(this) },
            preact_1.h("div", null,
                (CommonImport_4.MenuItemWithIconModes.indexOf(this.mode) > -1 && icon != undefined)
                    && preact_1.h(Factory_1.default, __assign({ ftype: CommonImport_3.RendererType.icon }, icon)),
                (props.layoutData && props.layoutData.text != undefined)
                    && preact_1.h(Factory_1.default, __assign({ ftype: CommonImport_3.RendererType.text }, { text: props.layoutData.text }))),
            props.contextData && props.contextData.accessKeyTooltipInfo
                && props.contextData.accessKeyTooltipInfo.isAccessKeyTooltipShown
                && preact_1.h(Factory_1.default, __assign({}, newAKTooltipProps)),
            preact_1.h(Factory_1.default, { ftype: CommonImport_3.RendererType.tooltip, isItemTooltip: true, data: props.tooltip }));
    };
    return MenuItemSelectable;
}(BaseMenuItemNew_1.default)); //end of class
exports.default = MenuItemSelectable;


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var BaseMenuItemNew_1 = __webpack_require__(9);
var Factory_1 = __webpack_require__(4);
var CommonImport_1 = __webpack_require__(0);
var CommonImport_2 = __webpack_require__(0);
var CommonImport_3 = __webpack_require__(0);
var CommonImport_4 = __webpack_require__(0);
var CommonImport_5 = __webpack_require__(0);
var MenuItemWithItems = /** @class */ (function (_super) {
    __extends(MenuItemWithItems, _super);
    function MenuItemWithItems(props) {
        var _this = _super.call(this, props) || this;
        _this.mode = "";
        _this.itemRefs = {};
        _this.selfCls = [];
        _this.holdsState = true;
        _this.mode = (props.layoutData && props.layoutData.mode) ? props.layoutData.mode : undefined;
        switch (_this.mode) {
            case CommonImport_5.MenuItemWithItemsModes.withoutIcon:
                _this.selfCls = [CommonImport_1.RibbonClasses.menuitem, CommonImport_1.RibbonClasses.menuitemTextWithSubmenu];
                break;
            case CommonImport_5.MenuItemWithItemsModes.withIcon:
            default:
                _this.selfCls = [CommonImport_1.RibbonClasses.menuitem, CommonImport_1.RibbonClasses.menuitemWithSubmenu];
                break;
        }
        _this.setState(_this.getStateObjFromProps(props));
        if (typeof props.buildControlData == "function") {
            props.buildControlData(undefined, props);
        }
        return _this;
    }
    MenuItemWithItems.prototype.getStateObjFromProps = function (props) {
        return {
            enable: (props.visData && props.visData.enable == false) ? false : true,
            visible: (props.visData && props.visData.visible == false) ? false : true
        };
    };
    MenuItemWithItems.prototype.componentDidMount = function () {
        $(this.eleRef).on(CommonImport_4.InternalEvents.menuItemClick, this.onMenuItemClick.bind(this));
    };
    MenuItemWithItems.prototype.componentWillUnmount = function () {
        $(this.eleRef).off(CommonImport_4.InternalEvents.menuItemClick);
    };
    MenuItemWithItems.prototype.onMenuItemClick = function (data) {
        if (!data.id) {
            return true;
        }
        var splitIds = data.id.split("|");
        if (splitIds.length && splitIds[0] == this.id) {
            return true;
        }
        data.id = this.id + "|" + data.id;
        if (typeof this.props.onMenuItemClick == "function") {
            this.props.onMenuItemClick(data);
        }
    };
    MenuItemWithItems.prototype.buildControlData = function (fullId, props) {
        if (fullId != undefined && typeof this.props.buildControlData == "function") {
            fullId = this.id + "|" + fullId;
            this.props.buildControlData(fullId, props);
        }
    };
    MenuItemWithItems.prototype.getCls = function (inputCls, props) {
        var cls = classNames(inputCls, CommonImport_1.RibbonClasses.tooltipWrapper, (props.layoutData && props.layoutData.customCls), (_a = {},
            _a["" + CommonImport_1.RibbonClasses.disable] = (this.state.enable == false) ? true : false,
            _a["" + CommonImport_1.RibbonClasses.hidden] = (this.state.visible == false) ? true : false,
            _a));
        return cls;
        var _a;
    };
    MenuItemWithItems.prototype.getControlState = function () {
        return CommonImport_3.ModelUtil.getItemDeepState(this);
    };
    MenuItemWithItems.prototype.setControlState = function (state) {
        if (state == undefined) {
            return;
        }
        CommonImport_3.ModelUtil.setItemDeepState(this, "", state);
    };
    MenuItemWithItems.prototype.getControlSelfState = function () {
        var stateData = {};
        stateData["id"] = this.id;
        stateData["type"] = this.type;
        switch (this.mode) {
            case CommonImport_5.MenuItemWithItemsModes.withIcon:
            case CommonImport_5.MenuItemWithItemsModes.withoutIcon:
            default:
                stateData["stateData"] = {};
                stateData["visData"] = {
                    "visible": this.state.visible,
                    "enable": this.state.enable
                };
                break;
        }
        return stateData;
    };
    MenuItemWithItems.prototype.setControlSelfState = function (stateData) {
        if (!(stateData)) {
            return;
        }
        switch (this.mode) {
            case CommonImport_5.MenuItemWithItemsModes.withIcon:
            case CommonImport_5.MenuItemWithItemsModes.withoutIcon:
            default:
                this.setState(function (prevState, props) {
                    return {
                        visible: (stateData.visData && stateData.visData.visible != undefined) ? stateData.visData.visible : prevState.visible,
                        enable: (stateData.visData && stateData.visData.enable != undefined) ? stateData.visData.enable : prevState.enable
                    };
                });
                break;
        }
    };
    MenuItemWithItems.prototype.childrenRefs = function () {
        return this.itemRefs;
    };
    MenuItemWithItems.prototype.pushToItemRefs = function (id, ref) {
        this.itemRefs[CommonImport_1.Constants.itemRefDefaultKey] = (ref && ref.factoriedRef) ? ref.factoriedRef : null;
    };
    MenuItemWithItems.prototype.render = function (props) {
        var _this = this;
        var cls = this.getCls(this.selfCls, props);
        var newPropsSubmenu = {
            items: props.items,
            contextData: props.contextData,
            ftype: CommonImport_2.RendererType.submenu
        };
        var iconPartProps = props.layoutData.icon;
        iconPartProps ? iconPartProps.ribbonModel = props.ribbonModel : null;
        return preact_1.h("li", { class: cls, ref: function (eleRef) { return _this.eleRef = eleRef; } },
            preact_1.h("div", { class: "dropdown-toggle" },
                (props.layoutData && props.layoutData.icon != undefined)
                    && preact_1.h(Factory_1.default, __assign({ ftype: CommonImport_2.RendererType.icon }, iconPartProps)),
                (props.layoutData && props.layoutData.text != undefined)
                    && preact_1.h(Factory_1.default, __assign({ ftype: CommonImport_2.RendererType.text }, { text: props.layoutData.text })),
                preact_1.h("span", { class: "caretSubmenu" })),
            (props.items != undefined) &&
                preact_1.h(Factory_1.default, __assign({ ref: function (ref) { return _this.pushToItemRefs(undefined, ref); } }, newPropsSubmenu, { buildControlData: this.buildControlData.bind(this), onMenuItemClick: this.onMenuItemClick.bind(this) })));
    };
    return MenuItemWithItems;
}(BaseMenuItemNew_1.default)); //end of class
exports.default = MenuItemWithItems;


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var BaseMenuItemNew_1 = __webpack_require__(9);
var Factory_1 = __webpack_require__(4);
var CommonImport_1 = __webpack_require__(0);
var CommonImport_2 = __webpack_require__(0);
var MenuItemMultiItem = /** @class */ (function (_super) {
    __extends(MenuItemMultiItem, _super);
    function MenuItemMultiItem() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selfCls = [CommonImport_1.RibbonClasses.menuitem, CommonImport_1.RibbonClasses.multiItemMultiItem];
        _this.itemRefs = {};
        return _this;
    }
    MenuItemMultiItem.prototype.childrenRefs = function () {
        return this.itemRefs;
    };
    MenuItemMultiItem.prototype.pushToItemRefs = function (id, ref) {
        this.itemRefs[id] = (ref && ref.factoriedRef) ? ref.factoriedRef : null;
    };
    MenuItemMultiItem.prototype.getControlState = function () {
        return CommonImport_2.ModelUtil.getItemDeepState(this);
    };
    MenuItemMultiItem.prototype.setControlState = function (state) {
        if (state == undefined) {
            return;
        }
        CommonImport_2.ModelUtil.setItemDeepState(this, "", state);
    };
    MenuItemMultiItem.prototype.getControlSelfState = function () {
        var stateData = {};
        stateData["id"] = this.id;
        stateData["type"] = this.type;
        stateData["stateData"] = {};
        stateData["visData"] = {
            "visible": this.state.visible,
            "enable": this.state.enable
        };
        return stateData;
    };
    MenuItemMultiItem.prototype.setControlSelfState = function (stateData) {
        if (!(stateData)) {
            return;
        }
        this.setState(function (prevState, props) {
            return {
                visible: (stateData.visData && stateData.visData.visible != undefined) ? stateData.visData.visible : prevState.visible,
                enable: (stateData.visData && stateData.visData.enable != undefined) ? stateData.visData.enable : prevState.enable
            };
        });
    };
    MenuItemMultiItem.prototype.getCls = function (inputCls, props) {
        var cls = classNames(inputCls, (_a = {},
            _a["" + CommonImport_1.RibbonClasses.disable] = (this.state.enable == false) ? true : false,
            _a["" + CommonImport_1.RibbonClasses.hidden] = (this.state.visible == false) ? true : false,
            _a));
        return cls;
        var _a;
        //TODO: check when to hide multiitem row, may be when all further items count is 0
    };
    MenuItemMultiItem.prototype.render = function (props) {
        var that = this;
        var cls = this.getCls(this.selfCls, props);
        return preact_1.h("li", { class: cls },
            preact_1.h("div", { class: CommonImport_1.RibbonClasses.multiItemWrapper }, props.items.map(function (item, i) {
                var newProps = __assign({}, item);
                newProps.contextData = props.contextData;
                newProps.ftype = item.type;
                newProps.ribbonModel = props.ribbonModel;
                newProps.onMenuItemClick = props.onMenuItemClick;
                return preact_1.h(Factory_1.default, __assign({}, newProps, { ref: function (ref) { return that.pushToItemRefs(newProps.id, ref); } }));
            })));
    };
    return MenuItemMultiItem;
}(BaseMenuItemNew_1.default)); //end of class
exports.default = MenuItemMultiItem;


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var BaseMenuItemNew_1 = __webpack_require__(9);
var Factory_1 = __webpack_require__(4);
var CommonImport_1 = __webpack_require__(0);
var CommonImport_2 = __webpack_require__(0);
var CommonImport_3 = __webpack_require__(0);
var MenuItemImageButton = /** @class */ (function (_super) {
    __extends(MenuItemImageButton, _super);
    function MenuItemImageButton(props) {
        var _this = _super.call(this, props) || this;
        _this.selfCls = [CommonImport_1.RibbonClasses.menuItemImageButton];
        _this.holdsState = true;
        _this.setState(_this.getStateObjFromProps(props));
        if (typeof props.buildControlData == "function") {
            props.buildControlData(props.id, props);
        }
        return _this;
    }
    MenuItemImageButton.prototype.getStateObjFromProps = function (props) {
        return {
            enable: (props.visData && props.visData.enable == false) ? false : true,
            visible: (props.visData && props.visData.visible == false) ? false : true
        };
    };
    MenuItemImageButton.prototype.getControlState = function () {
        return CommonImport_3.ModelUtil.getItemDeepState(this);
    };
    MenuItemImageButton.prototype.setControlState = function (state) {
        if (state == undefined) {
            return;
        }
        CommonImport_3.ModelUtil.setItemDeepState(this, "", state);
    };
    MenuItemImageButton.prototype.getControlSelfState = function () {
        return {
            id: this.id,
            type: this.type,
            stateData: {},
            visData: {
                "visible": this.state.visible,
                "enable": this.state.enable
            }
        };
    };
    MenuItemImageButton.prototype.setControlSelfState = function (stateData) {
        if (!(stateData)) {
            return;
        }
        this.setState(function (prevState, props) {
            return {
                visible: (stateData.visData && stateData.visData.visible != undefined) ? stateData.visData.visible : prevState.visible,
                enable: (stateData.visData && stateData.visData.enable != undefined) ? stateData.visData.enable : prevState.enable
            };
        });
    };
    MenuItemImageButton.prototype.getCls = function (inputCls, props) {
        var cls = classNames(inputCls, CommonImport_1.RibbonClasses.tooltipWrapper, (props.layoutData && props.layoutData.customCls), (_a = {},
            _a["" + CommonImport_1.RibbonClasses.disable] = (this.state.enable == false) ? true : false,
            _a["" + CommonImport_1.RibbonClasses.hidden] = (this.state.visible == false) ? true : false,
            _a));
        return cls;
        var _a;
    };
    MenuItemImageButton.prototype.onClick = function (event) {
        if (CommonImport_3.ModelUtil.isInactiveByState(this.state)) {
            return true;
        }
        var data = new CommonImport_1.ItemEventArg(this.id, event.type);
        //let $target = $(event.currentTarget);
        //$target.trigger(InternalEvents.menuItemClick, data);
        if (typeof this.props.onMenuItemClick == "function") {
            this.props.onMenuItemClick(data);
        }
        return true;
    };
    MenuItemImageButton.prototype.render = function (props) {
        var cls = this.getCls(this.selfCls, props);
        var newAKTooltipProps = {
            accessKey: props.accessKey,
            ftype: CommonImport_2.RendererType.accessKeyTooltip
        };
        var iconPartProps = props.layoutData.icon;
        iconPartProps ? iconPartProps.ribbonModel = props.ribbonModel : null;
        return preact_1.h("div", { class: cls, onClick: this.onClick.bind(this) },
            (props.layoutData && props.layoutData.icon != undefined)
                && preact_1.h(Factory_1.default, __assign({ ftype: CommonImport_2.RendererType.icon }, iconPartProps)),
            (props.layoutData && props.layoutData.text != undefined)
                && preact_1.h(Factory_1.default, __assign({ ftype: CommonImport_2.RendererType.text }, { text: props.layoutData.text })),
            props.contextData && props.contextData.accessKeyTooltipInfo
                && props.contextData.accessKeyTooltipInfo.isAccessKeyTooltipShown
                && preact_1.h(Factory_1.default, __assign({}, newAKTooltipProps)),
            preact_1.h(Factory_1.default, { ftype: CommonImport_2.RendererType.tooltip, isItemTooltip: true, data: props.tooltip }));
    };
    return MenuItemImageButton;
}(BaseMenuItemNew_1.default)); //end of class
exports.default = MenuItemImageButton;


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var Factory_1 = __webpack_require__(4);
var BaseMenuItem_1 = __webpack_require__(5);
var CommonImport_1 = __webpack_require__(0);
var MenuItemHeader = /** @class */ (function (_super) {
    __extends(MenuItemHeader, _super);
    function MenuItemHeader() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selfCls = [CommonImport_1.RibbonClasses.menuItemHeader];
        return _this;
    }
    MenuItemHeader.prototype.getCls = function (inputCls, props) {
        return _super.prototype.getCls.call(this, inputCls, props);
    };
    MenuItemHeader.prototype.render = function (props) {
        var cls = this.getCls(this.selfCls, props);
        return preact_1.h("li", { class: cls }, (props.layoutData && props.layoutData.text != undefined)
            && preact_1.h(Factory_1.default, __assign({ ftype: CommonImport_1.RendererType.text }, { text: props.layoutData.text })));
    };
    return MenuItemHeader;
}(BaseMenuItem_1.default));
exports.default = MenuItemHeader;


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var Factory_1 = __webpack_require__(4);
var BaseMenuItemNew_1 = __webpack_require__(9);
var CommonImport_1 = __webpack_require__(0);
var CommonImport_2 = __webpack_require__(0);
var MenuItemHeaderNew = /** @class */ (function (_super) {
    __extends(MenuItemHeaderNew, _super);
    function MenuItemHeaderNew(props) {
        var _this = _super.call(this, props) || this;
        _this.selfCls = [CommonImport_1.RibbonClasses.menuItemHeader];
        _this.holdsState = true;
        _this.setState(_this.getStateObjFromProps(props));
        if (typeof props.buildControlData == "function") {
            props.buildControlData(props.id, props);
        }
        return _this;
    }
    MenuItemHeaderNew.prototype.getStateObjFromProps = function (props) {
        return {
            enable: (props.visData && props.visData.enable == false) ? false : true,
            visible: (props.visData && props.visData.visible == false) ? false : true
        };
    };
    MenuItemHeaderNew.prototype.getCls = function (inputCls, props) {
        var cls = classNames(inputCls, (props.layoutData && props.layoutData.customCls), (_a = {},
            _a["" + CommonImport_1.RibbonClasses.disable] = (this.state.enable == false) ? true : false,
            _a["" + CommonImport_1.RibbonClasses.hidden] = (this.state.visible == false) ? true : false,
            _a));
        return cls;
        var _a;
    };
    MenuItemHeaderNew.prototype.getControlState = function () {
        return CommonImport_2.ModelUtil.getItemDeepState(this);
    };
    MenuItemHeaderNew.prototype.setControlState = function (state) {
        if (state == undefined) {
            return;
        }
        CommonImport_2.ModelUtil.setItemDeepState(this, "", state);
    };
    MenuItemHeaderNew.prototype.getControlSelfState = function () {
        return {
            id: this.id,
            type: this.type,
            stateData: {},
            visData: {
                "visible": this.state.visible,
                "enable": this.state.enable
            }
        };
    };
    MenuItemHeaderNew.prototype.setControlSelfState = function (stateData) {
        if (!(stateData)) {
            return;
        }
        this.setState(function (prevState, props) {
            return {
                visible: (stateData.visData && stateData.visData.visible != undefined) ? stateData.visData.visible : prevState.visible,
                enable: (stateData.visData && stateData.visData.enable != undefined) ? stateData.visData.enable : prevState.enable
            };
        });
    };
    MenuItemHeaderNew.prototype.render = function (props) {
        var cls = this.getCls(this.selfCls, props);
        return preact_1.h("li", { class: cls }, (props.layoutData && props.layoutData.text != undefined)
            && preact_1.h(Factory_1.default, __assign({ ftype: CommonImport_1.RendererType.text }, { text: props.layoutData.text })));
    };
    return MenuItemHeaderNew;
}(BaseMenuItemNew_1.default));
exports.default = MenuItemHeaderNew;


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var BaseMenuItem_1 = __webpack_require__(5);
var CommonImport_1 = __webpack_require__(0);
var MenuItemSeparator = /** @class */ (function (_super) {
    __extends(MenuItemSeparator, _super);
    function MenuItemSeparator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selfCls = [CommonImport_1.RibbonClasses.menuitem_separator, CommonImport_1.RibbonClasses.menuitem_separator_fullWidth];
        return _this;
    }
    MenuItemSeparator.prototype.getCls = function (inputCls, props) {
        var cls = _super.prototype.getCls.call(this, inputCls, props);
        cls = classNames(cls);
        return cls;
    };
    MenuItemSeparator.prototype.render = function (props) {
        var cls = this.getCls(this.selfCls, props);
        return preact_1.h("li", { class: cls });
    };
    return MenuItemSeparator;
}(BaseMenuItem_1.default)); //end of class
exports.default = MenuItemSeparator;


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var BaseMenuItem_1 = __webpack_require__(5);
var CommonImport_1 = __webpack_require__(0);
var CommonImport_2 = __webpack_require__(0);
var CommonImport_3 = __webpack_require__(0);
var MenuItemSeparatorNew = /** @class */ (function (_super) {
    __extends(MenuItemSeparatorNew, _super);
    function MenuItemSeparatorNew(props) {
        var _this = _super.call(this, props) || this;
        _this.mode = "";
        _this.selfCls = [CommonImport_1.RibbonClasses.menuitem_separator, CommonImport_1.RibbonClasses.menuitem_separator_fullWidth];
        _this.holdsState = true;
        _this.mode = (props.layoutData && props.layoutData.mode) ? props.layoutData.mode : undefined;
        switch (_this.mode) {
            case CommonImport_3.MenuItemSeparatorModes.withOffset:
                _this.selfCls = [CommonImport_1.RibbonClasses.menuitem_separator, CommonImport_1.RibbonClasses.menuitem_separator_withOffset];
                break;
            case CommonImport_3.MenuItemSeparatorModes.fullWidth:
            default:
                _this.selfCls = [CommonImport_1.RibbonClasses.menuitem_separator, CommonImport_1.RibbonClasses.menuitem_separator_fullWidth];
                break;
        }
        _this.setState(_this.getStateObjFromProps(props));
        if (typeof props.buildControlData == "function") {
            props.buildControlData(props.id, props);
        }
        return _this;
    }
    MenuItemSeparatorNew.prototype.getStateObjFromProps = function (props) {
        return {
            enable: (props.visData && props.visData.enable == false) ? false : true,
            visible: (props.visData && props.visData.visible == false) ? false : true
        };
    };
    MenuItemSeparatorNew.prototype.getCls = function (inputCls, props) {
        var cls = classNames(inputCls, (props.layoutData && props.layoutData.customCls), (_a = {},
            _a["" + CommonImport_1.RibbonClasses.disable] = (this.state.enable == false) ? true : false,
            _a["" + CommonImport_1.RibbonClasses.hidden] = (this.state.visible == false) ? true : false,
            _a));
        return cls;
        var _a;
    };
    MenuItemSeparatorNew.prototype.getControlState = function () {
        return CommonImport_2.ModelUtil.getItemDeepState(this);
    };
    MenuItemSeparatorNew.prototype.setControlState = function (state) {
        if (state == undefined) {
            return;
        }
        CommonImport_2.ModelUtil.setItemDeepState(this, "", state);
    };
    MenuItemSeparatorNew.prototype.getControlSelfState = function () {
        return {
            id: this.id,
            type: this.type,
            stateData: {},
            visData: {
                "visible": this.state.visible,
                "enable": this.state.enable
            }
        };
    };
    MenuItemSeparatorNew.prototype.setControlSelfState = function (stateData) {
        if (!(stateData)) {
            return;
        }
        this.setState(function (prevState, props) {
            return {
                visible: (stateData.visData && stateData.visData.visible != undefined) ? stateData.visData.visible : prevState.visible,
                enable: (stateData.visData && stateData.visData.enable != undefined) ? stateData.visData.enable : prevState.enable
            };
        });
    };
    MenuItemSeparatorNew.prototype.render = function (props) {
        var cls = this.getCls(this.selfCls, props);
        return preact_1.h("li", { class: cls });
    };
    return MenuItemSeparatorNew;
}(BaseMenuItem_1.default)); //end of class
exports.default = MenuItemSeparatorNew;


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var BaseMenuItem_1 = __webpack_require__(5);
var ColorPickerModeList_1 = __webpack_require__(85);
var ColorPickerThemeList_1 = __webpack_require__(86);
var Factory_1 = __webpack_require__(4);
var CommonImport_1 = __webpack_require__(0);
var CommonImport_2 = __webpack_require__(0);
var ColorPicker = /** @class */ (function (_super) {
    __extends(ColorPicker, _super);
    function ColorPicker(props) {
        var _this = _super.call(this, props) || this;
        _this.selfCls = [CommonImport_1.RibbonClasses.colorPicker, CommonImport_1.RibbonClasses[_this.props.layoutData.mode]];
        _this.holdsState = true;
        _this.indexObj = {
            startIndex: -1,
            endIndex: -1
        };
        _this.colorPickerMenuItemMap = {
            "-2": {
                "cls": "c-nofill",
                "selectedValue": "noFill",
                "color": "noFill"
            },
            "-3": {
                "cls": "c-automatic",
                "selectedValue": "automatic",
                "color": "automatic"
            },
            "-4": {
                "cls": "c-morecolors",
                "selectedValue": "moreColors..."
            }
        };
        _this.focusedCellIdx = -1;
        _this.focusedCls = CommonImport_1.RibbonClasses.colorPickerFocusedItem;
        if (props.contextData && props.contextData.stateData && props.contextData.stateData.selectedValue) {
            _this.setState({
                selectedColor: props.contextData.stateData.selectedValue
            });
        }
        return _this;
    }
    ColorPicker.prototype.getControlState = function () {
        return {
            "type": this.props.type,
            "id": this.props.id,
            "stateData": {
                "selectedValue": this.state.selectedColor
            }
        };
    };
    ColorPicker.prototype.onColorSelect = function (event, data) {
        this.setState({
            selectedColor: data.color
        });
        this.props.onMenuItemClick(data);
    };
    ColorPicker.prototype.getCls = function (inputCls, props) {
        return _super.prototype.getCls.call(this, inputCls, props);
    };
    ColorPicker.prototype.componentDidMount = function () {
        this.highlightSelectedColor();
        this.base.focus();
    };
    ColorPicker.prototype.highlightSelectedColor = function () {
        var selectedColor = this.props.contextData && this.props.contextData.stateData ? this.props.contextData.stateData.selectedValue : "";
        var selectedClass = ".c-" + selectedColor.toLowerCase().replace("#", "").replace(" ", "-").replace(/\./g, "");
        if (selectedClass) {
            var cell = this.base.querySelector(selectedClass);
            if (cell) {
                cell.classList.add(CommonImport_1.RibbonClasses.colorPickerHighlight);
            }
        }
    };
    ColorPicker.prototype.componentWillUnmount = function () {
        this.unHighlightSelectedColor();
        if (this.base.querySelector(".i-" + this.focusedCellIdx)) {
            this.getClassList(this.focusedCellIdx).remove(this.focusedCls);
        }
        this.indexObj.startIndex = this.indexObj.endIndex = this.focusedCellIdx = -1;
    };
    ColorPicker.prototype.unHighlightSelectedColor = function () {
        var cell = this.base.querySelector("." + CommonImport_1.RibbonClasses.colorPickerHighlight);
        if (cell) {
            cell.classList.remove(CommonImport_1.RibbonClasses.colorPickerHighlight);
        }
    };
    ColorPicker.prototype.handleKeyDownEvent = function (event) {
        switch (event.keyCode) {
            case CommonImport_1.Keycodes.TAB: {
                event.shiftKey ? this.focusPreviousOption() : this.focusNextOption();
                break;
            }
            case CommonImport_1.Keycodes.DOWN_ARROW: {
                this.handleDownArrow();
                break;
            }
            case CommonImport_1.Keycodes.UP_ARROW: {
                this.handleUpArrow();
                break;
            }
            case CommonImport_1.Keycodes.LEFT_ARROW: {
                this.handleLeftArrow();
                break;
            }
            case CommonImport_1.Keycodes.RIGHT_ARROW: {
                this.handleRightArrow();
                break;
            }
            case CommonImport_1.Keycodes.ENTER: {
                this.handleEnter(event);
                break;
            }
            case CommonImport_1.Keycodes.SPACE: {
                this.handleEnter(event);
                break;
            }
            case CommonImport_1.Keycodes.ESCAPE: {
                this.props.hideMenu();
            }
            default: break;
        }
        event.preventDefault();
    };
    ColorPicker.prototype.handleEnter = function (event) {
        if (this.focusedCellIdx == -1) {
            return;
        }
        var focusedElement = this.base.querySelector(".i-" + this.focusedCellIdx);
        var selectedValue = "";
        var color = "";
        var eleFound = false;
        for (var item in this.colorPickerMenuItemMap) {
            if (focusedElement.classList.contains(this.colorPickerMenuItemMap[item]["cls"])) {
                selectedValue = this.colorPickerMenuItemMap[item]["selectedValue"];
                color = this.colorPickerMenuItemMap[item]["color"] ? this.colorPickerMenuItemMap[item]["color"] : this.props.contextData.stateData.selectedValue;
                eleFound = !eleFound;
                break;
            }
        }
        if (!eleFound) {
            selectedValue = "color";
            color = this.rgb2hex(focusedElement["style"].backgroundColor);
        }
        var data = new CommonImport_2.ColorItemEventArg(selectedValue, event.type, color);
        this.onColorSelect(event, data);
    };
    ColorPicker.prototype.rgb2hex = function (rgb) {
        var rgbMatrix = rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
        function hex(x) {
            return ("0" + parseInt(x).toString(16)).slice(-2);
        }
        return "#" + hex(rgbMatrix[1]) + hex(rgbMatrix[2]) + hex(rgbMatrix[3]);
    };
    ColorPicker.prototype.handleDownArrow = function () {
        if (this.focusedCellIdx < 0) {
            this.focusedCellIdx = this.indexObj.startIndex;
        }
        else {
            var focusedElement = this.base.querySelector(".i-" + this.focusedCellIdx);
            focusedElement.classList.remove(this.focusedCls);
            if (this.focusedCellIdx === this.indexObj.endIndex) {
                this.focusedCellIdx = this.indexObj.startIndex;
            }
            else if (focusedElement.classList.contains(CommonImport_1.RibbonClasses.colorPickerMenuItem)) {
                this.focusedCellIdx++;
            }
            else if (focusedElement.classList.contains(CommonImport_1.RibbonClasses.colorPickerCell)) {
                var colorCellLength = focusedElement.parentElement.childElementCount;
                if (this.base.querySelector(".i-" + (this.focusedCellIdx + colorCellLength))) {
                    this.focusedCellIdx = this.focusedCellIdx + colorCellLength;
                }
                else {
                    var rowEndCell = this.getChildIndex(focusedElement.parentElement.lastChild);
                    if (this.base.querySelector(".i-" + (rowEndCell + 1))) {
                        this.focusedCellIdx = rowEndCell + 1;
                    }
                    else {
                        this.focusedCellIdx = this.indexObj.startIndex;
                    }
                }
            }
        }
        this.focusEleRef();
    };
    ColorPicker.prototype.handleUpArrow = function () {
        if (this.focusedCellIdx < 0) {
            this.focusedCellIdx = this.indexObj.endIndex;
        }
        else {
            var focusedElement = this.base.querySelector(".i-" + this.focusedCellIdx);
            focusedElement.classList.remove(this.focusedCls);
            if (this.focusedCellIdx === this.indexObj.startIndex) {
                this.focusedCellIdx = this.indexObj.endIndex;
            }
            else if (focusedElement.classList.contains(CommonImport_1.RibbonClasses.colorPickerMenuItem)) {
                this.focusedCellIdx--;
            }
            else {
                var colorCellLength = focusedElement.parentElement.childElementCount;
                if (this.base.querySelector(".i-" + (this.focusedCellIdx - colorCellLength))) {
                    this.focusedCellIdx = this.focusedCellIdx - colorCellLength;
                }
                else {
                    var rowStartCell = this.getChildIndex(focusedElement.parentElement.firstChild);
                    if (this.base.querySelector(".i-" + (rowStartCell - 1))) {
                        this.focusedCellIdx = rowStartCell - 1;
                    }
                    else {
                        this.focusedCellIdx = this.indexObj.endIndex;
                    }
                }
            }
        }
        this.focusEleRef();
    };
    ColorPicker.prototype.handleLeftArrow = function () {
        if (this.focusedCellIdx < 0) {
            this.focusedCellIdx = this.indexObj.endIndex;
        }
        else if (!this.getClassList(this.focusedCellIdx).contains(CommonImport_1.RibbonClasses.colorPickerMenuItem)) {
            var focusedElement = this.base.querySelector(".i-" + this.focusedCellIdx);
            focusedElement.classList.remove(this.focusedCls);
            if (focusedElement.previousSibling) {
                this.focusedCellIdx--;
            }
            else {
                this.focusedCellIdx = this.getChildIndex(focusedElement.parentElement.lastChild);
            }
        }
        this.focusEleRef();
    };
    ColorPicker.prototype.handleRightArrow = function () {
        if (this.focusedCellIdx < 0) {
            this.focusedCellIdx = this.indexObj.startIndex;
        }
        else if (!this.getClassList(this.focusedCellIdx).contains(CommonImport_1.RibbonClasses.colorPickerMenuItem)) {
            var focusedElement = this.base.querySelector(".i-" + this.focusedCellIdx);
            focusedElement.classList.remove(this.focusedCls);
            if (focusedElement.nextSibling) {
                this.focusedCellIdx++;
            }
            else {
                this.focusedCellIdx = this.getChildIndex(focusedElement.parentElement.firstChild);
            }
        }
        this.focusEleRef();
    };
    ColorPicker.prototype.focusPreviousOption = function () {
        if (this.focusedCellIdx < 0) {
            this.focusedCellIdx = this.indexObj.endIndex;
        }
        else {
            this.getClassList(this.focusedCellIdx).remove(this.focusedCls); // remove focused class and tab index
            this.focusedCellIdx = this.focusedCellIdx == this.indexObj.startIndex ? this.indexObj.endIndex : this.focusedCellIdx - 1;
        }
        this.focusEleRef();
    };
    ColorPicker.prototype.focusNextOption = function () {
        if (this.focusedCellIdx < 0) {
            this.focusedCellIdx = this.indexObj.startIndex;
        }
        else {
            this.getClassList(this.focusedCellIdx).remove(this.focusedCls); // remove focused class and tab index
            this.focusedCellIdx = (this.focusedCellIdx == this.indexObj.endIndex) ? this.indexObj.startIndex : this.focusedCellIdx + 1;
        }
        this.focusEleRef();
    };
    ColorPicker.prototype.getClassList = function (index) {
        return this.base.querySelector(".i-" + index).classList;
    };
    ColorPicker.prototype.getChildIndex = function (childEle) {
        var regEx = /i-\d+/;
        return parseInt(childEle.className.match(regEx)[0].slice(2));
    };
    ColorPicker.prototype.focusEleRef = function () {
        var focusedElement = this.base.querySelector(".i-" + this.focusedCellIdx);
        focusedElement.classList.add(this.focusedCls);
        focusedElement.tabIndex = -1;
        focusedElement.focus(); // To be remove after Ribbons Focus strategy is finalized
    };
    ColorPicker.prototype.getObjectCopy = function (object) {
        return JSON.parse(JSON.stringify(object));
    };
    ColorPicker.prototype.render = function (props) {
        var cls = this.getCls(this.selfCls, props);
        var modeName = props.layoutData.mode;
        var themeName = props.layoutData.theme;
        var mode = ColorPickerModeList_1.ColorPickerModeList[modeName];
        this.indexObj = this.getObjectCopy(mode.indexies);
        var theme = ColorPickerThemeList_1.ColorPickerThemeList[themeName];
        var self = this;
        return preact_1.h("div", { class: cls, tabIndex: -1, onKeyDown: this.handleKeyDownEvent.bind(this) }, mode.items.map(function (item, i) {
            var newProps = __assign({}, item);
            newProps.contextData = props.contextData;
            newProps.ftype = item.type;
            newProps.theme = theme;
            newProps.onClick = self.onColorSelect.bind(self);
            newProps.ribbonModel = props.ribbonModel;
            return preact_1.h(Factory_1.default, __assign({}, newProps));
        }));
    };
    return ColorPicker;
}(BaseMenuItem_1.default));
exports.default = ColorPicker;


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ColorPickerModeList = {
    "FillColor": {
        "items": [
            {
                "type": "colorPickerHeader",
                "layoutData": {
                    "text": "Theme Colors"
                }
            },
            {
                "type": "colorPickerGrid",
                "layoutData": {
                    "start": 1,
                    "rowCount": 1,
                    "cellCountInEachRow": 10
                }
            },
            {
                "type": "colorPickerGrid",
                "layoutData": {
                    "start": 11,
                    "rowCount": 5,
                    "cellCountInEachRow": 10
                }
            },
            {
                "type": "colorPickerHeader",
                "layoutData": {
                    "text": "Standard Colors"
                }
            },
            {
                "type": "colorPickerGrid",
                "layoutData": {
                    "start": 61,
                    "rowCount": 1,
                    "cellCountInEachRow": 10
                }
            },
            {
                "type": "colorPickerMenuItem",
                "layoutData": {
                    "text": "~No Fill",
                    "className": "c-nofill",
                    "index": 71,
                    "icon": {
                        "type": "sprite",
                        "wd": "16px",
                        "ht": "16px",
                        "src": "img/nofill.png",
                        "imgcrop": {
                            "top": "0px",
                            "left": "0px"
                        }
                    }
                }
            },
            {
                "type": "menuitemSeparator",
                "id": "id_colorPicker_seperator",
            },
            {
                "type": "colorPickerMenuItem",
                "layoutData": {
                    "text": "~More Colors...",
                    "className": "c-morecolors",
                    "index": 72,
                    "icon": {
                        "type": "sprite",
                        "wd": "16px",
                        "ht": "16px",
                        "src": "img/morecolorimage.png",
                        "imgcrop": {
                            "top": "0px",
                            "left": "0px"
                        }
                    }
                }
            }
        ],
        "indexies": {
            "startIndex": 1,
            "endIndex": 72
        }
    },
    "FontColor": {
        "items": [
            {
                "type": "colorPickerMenuItem",
                "layoutData": {
                    "text": "Automatic",
                    "className": "c-automatic",
                    "index": 0,
                    "icon": {
                        "type": "sprite",
                        "wd": "16px",
                        "ht": "16px",
                        "src": "img/black.png",
                        "imgcrop": {
                            "top": "0px",
                            "left": "0px"
                        }
                    }
                }
            },
            {
                "type": "colorPickerHeader",
                "layoutData": {
                    "text": "Theme Colors"
                }
            },
            {
                "type": "colorPickerGrid",
                "layoutData": {
                    "start": 1,
                    "rowCount": 1,
                    "cellCountInEachRow": 10
                }
            },
            {
                "type": "colorPickerGrid",
                "layoutData": {
                    "start": 11,
                    "rowCount": 5,
                    "cellCountInEachRow": 10
                }
            },
            {
                "type": "colorPickerHeader",
                "layoutData": {
                    "text": "Standard Colors"
                }
            },
            {
                "type": "colorPickerGrid",
                "layoutData": {
                    "start": 61,
                    "rowCount": 1,
                    "cellCountInEachRow": 10
                }
            },
            {
                "type": "menuitemSeparator",
                "id": "id_colorPicker_seperator",
            },
            {
                "type": "colorPickerMenuItem",
                "layoutData": {
                    "text": "~More Colors...",
                    "className": "c-morecolors",
                    "index": 71,
                    "icon": {
                        "type": "sprite",
                        "wd": "16px",
                        "ht": "16px",
                        "src": "img/morecolorimage.png",
                        "imgcrop": {
                            "top": "0px",
                            "left": "0px"
                        }
                    }
                }
            }
        ],
        "indexies": {
            "startIndex": 0,
            "endIndex": 71
        }
    }
};


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ColorPickerThemeList = {
    "OfficeExcel": [
        {
            "color": "Automatic",
            "title": "No Color"
        },
        {
            "color": "FFFFFF",
            "title": "White, Background 1"
        },
        {
            "color": "000000",
            "title": "Black, Text 1"
        },
        {
            "color": "E7E6E6",
            "title": "Gray-25%, Background 2"
        },
        {
            "color": "44546A",
            "title": "Blue-Gray, Text 2"
        },
        {
            "color": "5B9BD5",
            "title": "Blue, Accent 1"
        },
        {
            "color": "ED7D31",
            "title": "Orange, Accent 2"
        },
        {
            "color": "A5A5A5",
            "title": "Gray-50%, Accent 3"
        },
        {
            "color": "FFC000",
            "title": "Gold, Accent 4"
        },
        {
            "color": "4472C4",
            "title": "Blue, Accent 5"
        },
        {
            "color": "70AD47",
            "title": "Green, Accent 6"
        },
        {
            "color": "F2F2F2",
            "title": "White, Background 1, Darker 5%"
        },
        {
            "color": "7F7F7F",
            "title": "Black, Text 1, Lighter 50%"
        },
        {
            "color": "D0CECE",
            "title": "Gray-25%, Background 2, Darker 10%"
        },
        {
            "color": "D6DCE4",
            "title": "Blue-Gray, Text 2, Lighter 80%"
        },
        {
            "color": "DEEBF6",
            "title": "Blue, Accent 1, Lighter 80%"
        },
        {
            "color": "FBE5D5",
            "title": "Orange, Accent 2, Lighter 80%"
        },
        {
            "color": "EDEDED",
            "title": "Gray-50%, Accent 3, Lighter 80%"
        },
        {
            "color": "FFF2CC",
            "title": "Gold, Accent 4, Lighter 80%"
        },
        {
            "color": "D9E2F3",
            "title": "Blue, Accent 5, Lighter 80%"
        },
        {
            "color": "E2EFD9",
            "title": "Green, Accent 6, Lighter 80%"
        },
        {
            "color": "D8D8D8",
            "title": "White, Background 1, Darker 15%"
        },
        {
            "color": "595959",
            "title": "Black, Text 1, Lighter 35%"
        },
        {
            "color": "AEABAB",
            "title": "Gray-25%, Background 2, Darker 25%"
        },
        {
            "color": "ADB9CA",
            "title": "Blue-Gray, Text 2, Lighter 60%"
        },
        {
            "color": "BDD7EE",
            "title": "Blue, Accent 1, Lighter 60%"
        },
        {
            "color": "F7CBAC",
            "title": "Orange, Accent 2, Lighter 60%"
        },
        {
            "color": "DBDBDB",
            "title": "Gray-50%, Accent 3, Lighter 60%"
        },
        {
            "color": "FEE599",
            "title": "Gold, Accent 4, Lighter 60%"
        },
        {
            "color": "B4C6E7",
            "title": "Blue, Accent 5, Lighter 60%"
        },
        {
            "color": "C5E0B3",
            "title": "Green, Accent 6, Lighter 60%"
        },
        {
            "color": "BFBFBF",
            "title": "White, Background 1, Darker 25%"
        },
        {
            "color": "3F3F3F",
            "title": "Black, Text 1, Lighter 25%"
        },
        {
            "color": "757070",
            "title": "Gray-25%, Background 2, Darker 50%"
        },
        {
            "color": "8496B0",
            "title": "Blue-Gray, Text 2, Lighter 40%"
        },
        {
            "color": "9CC3E5",
            "title": "Blue, Accent 1, Lighter 40%"
        },
        {
            "color": "F4B183",
            "title": "Orange, Accent 2, Lighter 40%"
        },
        {
            "color": "C9C9C9",
            "title": "Gray-50%, Accent 3, Lighter 40%"
        },
        {
            "color": "FFD965",
            "title": "Gold, Accent 4, Lighter 40%"
        },
        {
            "color": "8EAADB",
            "title": "Blue, Accent 5, Lighter 40%"
        },
        {
            "color": "A8D08D",
            "title": "Green, Accent 6, Lighter 40%"
        },
        {
            "color": "A5A5A5",
            "title": "White, Background 1, Darker 35%"
        },
        {
            "color": "262626",
            "title": "Black, Text 1, Lighter 15%"
        },
        {
            "color": "3A3838",
            "title": "Gray-25%, Background 2, Darker 75%"
        },
        {
            "color": "323F4F",
            "title": "Blue-Gray, Text 2, Darker 25%"
        },
        {
            "color": "2E75B5",
            "title": "Blue, Accent 1, Darker 25%"
        },
        {
            "color": "C55A11",
            "title": "Orange, Accent 2, Darker 25%"
        },
        {
            "color": "7B7B7B",
            "title": "Gray-50%, Accent 3, Darker 25%"
        },
        {
            "color": "BF9000",
            "title": "Gold, Accent 4, Darker 25%"
        },
        {
            "color": "2F5496",
            "title": "Blue, Accent 5, Darker 25%"
        },
        {
            "color": "538135",
            "title": "Green, Accent 6, Darker 25%"
        },
        {
            "color": "7F7F7F",
            "title": "White, Background 1, Darker 50%"
        },
        {
            "color": "0C0C0C",
            "title": "Black, Text 1, Lighter 5%"
        },
        {
            "color": "171616",
            "title": "Gray-25%, Background 2, Darker 90%"
        },
        {
            "color": "222A35",
            "title": "Blue-Gray, Text 2, Darker 50%"
        },
        {
            "color": "1E4E79",
            "title": "Blue, Accent 1, Darker 50%"
        },
        {
            "color": "833C0B",
            "title": "Orange, Accent 2, Darker 50%"
        },
        {
            "color": "525252",
            "title": "Gray-50%, Accent 3, Darker 50%"
        },
        {
            "color": "7F6000",
            "title": "Gold, Accent 4, Darker 50%"
        },
        {
            "color": "1F3864",
            "title": "Blue, Accent 5, Darker 50%"
        },
        {
            "color": "375623",
            "title": "Green, Accent 6, Darker 50%"
        },
        {
            "color": "C00000",
            "title": "Dark Red"
        },
        {
            "color": "FF0000",
            "title": "Red"
        },
        {
            "color": "FFC000",
            "title": "Orange"
        },
        {
            "color": "FFFF00",
            "title": "Yellow"
        },
        {
            "color": "92D050",
            "title": "Light Green"
        },
        {
            "color": "00B050",
            "title": "Green"
        },
        {
            "color": "00B0F0",
            "title": "Light Blue"
        },
        {
            "color": "0070C0",
            "title": "Blue"
        },
        {
            "color": "002060",
            "title": "Dark Blue"
        },
        {
            "color": "7030A0",
            "title": "Purple"
        },
        {
            "color": "NoFill",
            "title": "NoFill"
        }
    ]
};


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var BaseMenuItem_1 = __webpack_require__(5);
var ColorPickerRow_1 = __webpack_require__(88);
var CommonImport_1 = __webpack_require__(0);
var ColorPickerGrid = /** @class */ (function (_super) {
    __extends(ColorPickerGrid, _super);
    function ColorPickerGrid() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selfCls = [CommonImport_1.RibbonClasses.colorPickerGrid];
        return _this;
    }
    ColorPickerGrid.prototype.getCls = function (inputCls, props) {
        return _super.prototype.getCls.call(this, inputCls, props);
    };
    ColorPickerGrid.prototype.render = function (props) {
        var cls = this.getCls(this.selfCls, props);
        var startCell = props.layoutData.start;
        var rowCount = props.layoutData.rowCount;
        var cellCountInEachRow = props.layoutData.cellCountInEachRow;
        var grid = [];
        var rowClassName = rowCount > 1 ? CommonImport_1.RibbonClasses.colorPickerMultipleRow : CommonImport_1.RibbonClasses.colorPickerSingleRow;
        for (var rowIndex = 0; rowIndex < rowCount; rowIndex++) {
            var newprops = __assign({}, props);
            newprops.start = startCell + cellCountInEachRow * rowIndex;
            newprops.end = newprops.start + cellCountInEachRow - 1;
            newprops.className = rowClassName;
            newprops.onClick = props.onClick;
            newprops.ribbonModel = props.ribbonModel;
            grid.push(preact_1.h(ColorPickerRow_1.ColorPickerRow, __assign({}, newprops), " "));
        }
        return preact_1.h("div", { class: cls }, grid);
    };
    return ColorPickerGrid;
}(BaseMenuItem_1.default));
exports.default = ColorPickerGrid;


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var BaseMenuItem_1 = __webpack_require__(5);
var ColorPickerCell_1 = __webpack_require__(89);
var classNames = __webpack_require__(2);
var CommonImport_1 = __webpack_require__(0);
var ColorPickerRow = /** @class */ (function (_super) {
    __extends(ColorPickerRow, _super);
    function ColorPickerRow() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selfCls = [CommonImport_1.RibbonClasses.colorPickerRow];
        return _this;
    }
    ColorPickerRow.prototype.getCls = function (inputCls, props) {
        var cls = _super.prototype.getCls.call(this, inputCls, props);
        cls = classNames(cls, props.className);
        return cls;
    };
    ColorPickerRow.prototype.render = function (props) {
        var cls = this.getCls(this.selfCls, props);
        var startCell = props.start;
        var endCell = props.end;
        var row = [];
        for (var i = startCell; i <= endCell; i++) {
            var newProps = props.theme[i];
            newProps.contextData = props.contextData;
            newProps.index = i;
            newProps.setIndexObj = props.setIndexObj;
            newProps.onClick = props.onClick;
            newProps.ribbonModel = props.ribbonModel;
            row.push(preact_1.h(ColorPickerCell_1.ColorPickerCell, __assign({}, newProps)));
        }
        return preact_1.h("div", { class: cls }, row);
    };
    return ColorPickerRow;
}(BaseMenuItem_1.default));
exports.ColorPickerRow = ColorPickerRow;


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var BaseMenuItem_1 = __webpack_require__(5);
var CommonImport_1 = __webpack_require__(0);
var ColorPickerCell = /** @class */ (function (_super) {
    __extends(ColorPickerCell, _super);
    function ColorPickerCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorPickerCell.prototype.getCls = function (inputCls, props) {
        return _super.prototype.getCls.call(this, inputCls, props);
    };
    ColorPickerCell.prototype.onClick = function (event) {
        if (this.isDisabled()) {
            return true;
        }
        var $target = $(event.currentTarget);
        var backgroundColor = $target.css("background-color");
        var hexCodedBgColor = this.rgb2hex(backgroundColor).toLowerCase();
        var data = new CommonImport_1.ColorItemEventArg("color", event.type, hexCodedBgColor);
        this.props.onClick(event, data);
    };
    ColorPickerCell.prototype.rgb2hex = function (rgb) {
        var rgbMatrix = rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
        function hex(x) {
            return ("0" + parseInt(x).toString(16)).slice(-2);
        }
        return "#" + hex(rgbMatrix[1]) + hex(rgbMatrix[2]) + hex(rgbMatrix[3]);
    };
    ColorPickerCell.prototype.render = function (props) {
        var color = props.color.toLowerCase();
        var selfCls = [CommonImport_1.RibbonClasses.colorPickerCell, 'c-' + color, 'i-' + props.index];
        var cls = this.getCls(selfCls, props);
        var style = {
            backgroundColor: '#' + color
        };
        return preact_1.h("div", { class: cls, title: props.title, style: style, onClick: this.onClick.bind(this) },
            preact_1.h("div", { class: CommonImport_1.RibbonClasses.colorPickerCellInnerDiv }));
    };
    return ColorPickerCell;
}(BaseMenuItem_1.default));
exports.ColorPickerCell = ColorPickerCell;


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var Factory_1 = __webpack_require__(4);
var BaseMenuItem_1 = __webpack_require__(5);
var CommonImport_1 = __webpack_require__(0);
var CommonImport_2 = __webpack_require__(0);
var ColorPickerMenuItem = /** @class */ (function (_super) {
    __extends(ColorPickerMenuItem, _super);
    function ColorPickerMenuItem() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorPickerMenuItem.prototype.getCls = function (inputCls, props) {
        return _super.prototype.getCls.call(this, inputCls, props);
    };
    ColorPickerMenuItem.prototype.onClick = function (event) {
        if (this.isDisabled()) {
            return true;
        }
        var data = new CommonImport_2.ColorItemEventArg(this.getColorName(this.props.layoutData.text), event.type, this.getColorName(this.props.layoutData.text));
        this.props.onClick(event, data);
    };
    ColorPickerMenuItem.prototype.getColorName = function (color) {
        color = color.replace(/ /, "").replace(/~/, "");
        return color.charAt(0).toLowerCase() + color.substr(1);
    };
    ColorPickerMenuItem.prototype.render = function (props) {
        var selfCls = [CommonImport_1.RibbonClasses.colorPickerMenuItem, this.props.layoutData.className, "i-" + this.props.layoutData.index];
        var cls = this.getCls(selfCls, props);
        var iconPartProps = props.layoutData.icon;
        iconPartProps ? iconPartProps.ribbonModel = props.ribbonModel : null;
        return preact_1.h("div", { class: cls, onClick: this.onClick.bind(this) },
            (props.layoutData && props.layoutData.icon != undefined)
                && preact_1.h(Factory_1.default, __assign({ ftype: CommonImport_1.RendererType.icon }, iconPartProps)),
            (props.layoutData && props.layoutData.text != undefined)
                && preact_1.h(Factory_1.default, __assign({ ftype: CommonImport_1.RendererType.text }, { text: props.layoutData.text })));
    };
    return ColorPickerMenuItem;
}(BaseMenuItem_1.default));
exports.default = ColorPickerMenuItem;


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var classNames = __webpack_require__(2);
var CommonViewImport_1 = __webpack_require__(3);
var CommonViewImport_2 = __webpack_require__(3);
var IconControlContextWrapper = /** @class */ (function (_super) {
    __extends(IconControlContextWrapper, _super);
    function IconControlContextWrapper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IconControlContextWrapper.prototype.render = function (props) {
        return preact_1.h(CommonViewImport_2.MyContext.Consumer, null, function (passedArgs) {
            return preact_1.h(IconControl, __assign({}, props, { ribbonModel: props.ribbonModel ? props.ribbonModel : passedArgs.ribbonModel }));
        });
    };
    return IconControlContextWrapper;
}(preact_1.Component));
exports.default = IconControlContextWrapper;
var IconControl = /** @class */ (function (_super) {
    __extends(IconControl, _super);
    function IconControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IconControl.prototype.render = function (props) {
        var src = props.ribbonModel.imageBaseFolder + "/" + props.src; // to DO
        var cls = classNames(CommonViewImport_1.RibbonClasses.icon, CommonViewImport_1.RibbonClasses.icon_wrapper);
        var iconBinderStyleStr = (props.wd ? ("width:" + props.wd + ";") : "")
            + (props.ht ? ("height:" + props.ht + ";") : "");
        var imgStyleStr = ((props.left != undefined) ? ("left:" + props.left + ";") : "")
            + ((props.top != undefined) ? ("top:" + props.top + ";") : "");
        return preact_1.h("div", { class: cls },
            preact_1.h("span", { class: CommonViewImport_1.RibbonClasses.icon_binder, style: iconBinderStyleStr },
                preact_1.h("img", { src: src, class: CommonViewImport_1.RibbonClasses.icon_img, style: imgStyleStr }),
                props.showBottomStrip && preact_1.h("div", { class: CommonViewImport_1.RibbonClasses.bottomColor })));
    };
    return IconControl;
}(preact_1.Component));
exports.IconControl = IconControl;


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = __webpack_require__(1);
var CommonViewImport_1 = __webpack_require__(3);
var TextControl = /** @class */ (function (_super) {
    __extends(TextControl, _super);
    function TextControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TextControl.prototype.render = function (props) {
        if (!props.text) {
            return null;
        }
        var cls = CommonViewImport_1.RibbonClasses.text;
        var index = props.text.indexOf(CommonViewImport_1.Constants.underlineMark);
        if (index > -1) {
            return preact_1.h("span", { class: cls },
                props.text.substring(0, index),
                preact_1.h("u", null, props.text.substring(index + 1, index + 2)),
                props.text.substring(index + 2, props.text.length));
        }
        else {
            return preact_1.h("span", { class: cls }, props.text);
        }
    };
    return TextControl;
}(preact_1.Component));
exports.default = TextControl;


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Constants_1 = __webpack_require__(8);
var Events_1 = __webpack_require__(10);
var RenderEnums_1 = __webpack_require__(6);
var Enums_1 = __webpack_require__(14);
var RibbonModel = /** @class */ (function () {
    //public initializeValues(configJson: any) {
    function RibbonModel(configJson, controlMap, pubSub, menusContainer) {
        this._controlMap = undefined;
        this._pubSub = undefined;
        this._theme = Enums_1.themeNames.default;
        this._imageBaseFolder = "";
        this._sectionLauncherIcon = "";
        this._pinInfo = undefined; //pinInfo
        this._pinned = true; //pinInfo
        this._activeTab = "";
        this._focusId = "";
        this._showAccessKey = false;
        this._accessKeyActiveLevel = Enums_1.AccessKeyLevel.tab;
        this._focusableArray = [];
        this._controlMap = controlMap;
        this._pubSub = pubSub;
        this._menusContainer = menusContainer;
        //active theme
        if (configJson.layoutData && configJson.layoutData.theme) {
            this.theme = configJson.layoutData.theme;
        }
        else {
            //set first as default
            this.theme = Constants_1.Constants.defaultTheme;
        }
        //imageBaseFolder
        var imageBaseFolder;
        if (configJson.layoutData && configJson.layoutData.imageBaseFolder) {
            imageBaseFolder = configJson.layoutData.imageBaseFolder;
        }
        this.imageBaseFolder = imageBaseFolder;
        //default sectionLauncherIcon
        var sectionLauncherIcon;
        if (configJson.layoutData && configJson.layoutData.sectionLauncherIcon) {
            sectionLauncherIcon = configJson.layoutData.sectionLauncherIcon;
        }
        this.sectionLauncherIcon = sectionLauncherIcon;
        //pininfo
        var pinInfo;
        if (configJson.layoutData && configJson.layoutData.pinInfo) {
            pinInfo = configJson.layoutData.pinInfo;
        }
        this.pinInfo = pinInfo;
        //pinned
        var pinned = true;
        if (configJson.layoutData && configJson.layoutData.pinInfo && configJson.layoutData.pinInfo.stateData
            && configJson.layoutData.pinInfo.stateData.pinned == false) {
            pinned = false;
        }
        this.pinned = pinned;
        //active tab
        if (configJson.stateData && configJson.stateData.activeTab) {
            this._activeTab = configJson.stateData.activeTab;
        }
        else {
            //set first as default
            //hack, as tabs may not even present or present at some other location, as active tab should be property of tabstrip
            this._activeTab = this._getDefaultActiveTab(configJson);
        }
        //focused control
        if (configJson.stateData && configJson.stateData.focusId) {
            this._focusId = configJson.stateData.focusId;
        }
        else {
            //set first as default
        }
    }
    RibbonModel.prototype._getDefaultActiveTab = function (configJson) {
        var activeTab = undefined;
        if (configJson.items && configJson.items.length) {
            for (var i = 0; i < configJson.items.length; i++) {
                if (configJson.items[i] && configJson.items[i].type == RenderEnums_1.RendererType.tab) {
                    activeTab = configJson.items[i].id;
                    break;
                }
            }
        }
        return activeTab;
    };
    Object.defineProperty(RibbonModel.prototype, "controlMap", {
        get: function () {
            return this._controlMap;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RibbonModel.prototype, "pubSub", {
        get: function () {
            return this._pubSub;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RibbonModel.prototype, "menusContainer", {
        get: function () {
            return this._menusContainer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RibbonModel.prototype, "theme", {
        get: function () {
            return this._theme;
        },
        set: function (theme) {
            if (theme in Enums_1.themeNames && this._theme != theme) {
                this._theme = theme;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RibbonModel.prototype, "imageBaseFolder", {
        get: function () {
            return this._imageBaseFolder;
        },
        set: function (path) {
            this._imageBaseFolder = path;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RibbonModel.prototype, "sectionLauncherIcon", {
        get: function () {
            return this._sectionLauncherIcon;
        },
        set: function (icon) {
            this._sectionLauncherIcon = icon;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RibbonModel.prototype, "pinInfo", {
        get: function () {
            return this._pinInfo;
        },
        set: function (info) {
            this._pinInfo = info;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RibbonModel.prototype, "pinned", {
        get: function () {
            return this._pinned;
        },
        set: function (bPin) {
            this._pinned = bPin;
        },
        enumerable: true,
        configurable: true
    });
    RibbonModel.prototype.pin = function () {
        //this.setActiveTab(newTab, true); 
        if (!this._pinned) {
            this._pinned = true;
            this.pubSub.publish(Events_1.InternalEvents.pinStateChange, [{ pinned: this._pinned }]);
            this.pubSub.publish((Constants_1.Constants.nsRibbonAction + "ribbon"), [{ event: Events_1.InternalEvents.pinStateChange, pinned: this._pinned }]);
        }
    };
    RibbonModel.prototype.collapse = function () {
        this.setActiveTab(undefined, true);
        if (this._pinned) {
            this._pinned = false;
            this.pubSub.publish(Events_1.InternalEvents.pinStateChange, [{ pinned: this._pinned }]);
            this.pubSub.publish((Constants_1.Constants.nsRibbonAction + "ribbon"), [{ event: Events_1.InternalEvents.pinStateChange, pinned: this._pinned }]);
        }
    };
    RibbonModel.prototype.getActiveTab = function () {
        return this._activeTab;
    };
    RibbonModel.prototype.setActiveTab = function (tab, raiseEvent) {
        if (this._activeTab != tab) {
            this._activeTab = tab;
            this.pubSub.publish(Events_1.InternalEvents.activeTabChange, [{
                    activeTab: tab
                }]);
            if (raiseEvent) {
                this.pubSub.publish((Constants_1.Constants.nsRibbonAction + "ribbon"), [{ event: Events_1.InternalEvents.activeTabChange, activeTab: this._activeTab }]);
            }
        }
    };
    Object.defineProperty(RibbonModel.prototype, "focusId", {
        get: function () {
            return this._focusId;
        },
        set: function (focusId) {
            if (this._focusId != focusId) {
                this._focusId = focusId;
                this.pubSub.publish((Events_1.InternalEvents.focusChange), [{
                        focusId: focusId
                    }]);
            }
        },
        enumerable: true,
        configurable: true
    });
    RibbonModel.prototype.updateFocusArray = function () {
        return this._focusableArray = this._controlMap.getAllKeys();
    };
    Object.defineProperty(RibbonModel.prototype, "focusableArray", {
        get: function () {
            return this._focusableArray;
        },
        set: function (arr) {
            this._focusableArray = arr;
        },
        enumerable: true,
        configurable: true
    });
    RibbonModel.prototype.focusPrevious = function () {
        if (this._focusableArray && this._focusableArray.length) {
            var focusIndex = this._focusableArray.indexOf(this._focusId);
            if (focusIndex < 0) {
                focusIndex = 0;
            }
            else if (focusIndex > 0) {
                focusIndex--;
            }
            else {
                focusIndex = this._focusableArray.length - 1;
            }
            this.focusId = this._focusableArray[focusIndex];
        }
    };
    RibbonModel.prototype.focusNext = function () {
        if (this._focusableArray && this._focusableArray.length) {
            var focusIndex = this._focusableArray.indexOf(this._focusId);
            if (focusIndex < 0) {
                focusIndex = 0;
            }
            else if (focusIndex < this._focusableArray.length - 1) {
                focusIndex++;
            }
            else {
                focusIndex = 0;
            }
            this.focusId = this._focusableArray[focusIndex];
        }
    };
    RibbonModel.prototype.showAccessKey = function () {
        this._showAccessKey = true;
        this._accessKeyActiveLevel = Enums_1.AccessKeyLevel.tab;
        this.pubSub.publish((Events_1.InternalEvents.showAccessKey), [{
                controlId: undefined,
                eventName: Events_1.InternalEvents.showAccessKey
            }]);
    };
    RibbonModel.prototype.hideAccessKey = function () {
        this._showAccessKey = false;
        this.pubSub.publish((Events_1.InternalEvents.hideAccessKey), [{
                controlId: undefined,
                eventName: Events_1.InternalEvents.hideAccessKey
            }]);
    };
    RibbonModel.prototype.showTab = function (tab) {
        this.pubSub.publish(Events_1.InternalEvents.tabStateChange, [{
                id: tab,
                state: { visible: true }
            }]);
    };
    RibbonModel.prototype.hideTab = function (tab) {
        this.pubSub.publish(Events_1.InternalEvents.tabStateChange, [{
                id: tab,
                state: { visible: false }
            }]);
    };
    RibbonModel.prototype.getControlState = function (controlId) {
        var control = this._controlMap.get("", controlId);
        if (control) {
            return control.getControlState();
        }
    };
    RibbonModel.prototype.getAllControlState = function () {
        var allKeys = this._controlMap.getAllKeys();
        var allState = [];
        for (var key in allKeys) {
            allState.push(this.getControlState(allKeys[key]));
        }
        return allState;
    };
    RibbonModel.prototype.setControlState = function (controlId, state) {
        var control = this._controlMap.get("", controlId);
        if (control) {
            control.setControlState(state);
        }
    };
    return RibbonModel;
}()); //end of class
exports.default = RibbonModel;


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ControlMap = /** @class */ (function () {
    function ControlMap() {
        this.map = new Map();
    }
    ControlMap.prototype.add = function (namespace, controlId, obj) {
        this.map.set((namespace + controlId), obj);
    };
    ControlMap.prototype.remove = function (namespace, controlId) {
        this.map.delete((namespace + controlId));
    };
    ControlMap.prototype.get = function (namespace, controlId) {
        return this.map.get((namespace + controlId));
    };
    ControlMap.prototype.getAllKeys = function () {
        if (typeof this.map.keys == "function") {
            var arr = Array.from(this.map.keys());
            return arr;
        }
        return [];
    };
    return ControlMap;
}()); //end of class
exports.default = ControlMap;


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var pubsub = __webpack_require__(96);
var PubSub = /** @class */ (function () {
    function PubSub() {
        this.privatePubsub = undefined;
        this.privatePubsub = pubsub.newInstance();
    }
    PubSub.prototype.publish = function (path, data) {
        this.privatePubsub.publish(path, data);
    };
    PubSub.prototype.subscribe = function (path, func) {
        this.privatePubsub.subscribe(path, func);
    };
    PubSub.prototype.unsubscribe = function (token) {
        this.privatePubsub.unsubscribe(token);
    };
    PubSub.prototype.unsubscribeAll = function () {
        //todo
    };
    return PubSub;
}()); //end of class
exports.default = PubSub;


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(scope) {
	'use strict';
	var pubsubInstance = null;
	var pubsubConfig = null;

	if(typeof pubsub === 'object') {
		pubsubConfig = pubsub;
	//node.js config from global
	} else if(typeof global === 'object' && typeof global.pubsubConfig === 'object') {
		pubsubConfig = global.pubsubConfig;
	}

	function Pubsub(config) {
		var _eventObject = {};
		var options = {
			separator : (config && config.separator) ? config.separator : '/',
			recurrent : (config && typeof config.recurrent === 'boolean') ? config.recurrent : (false),
			depth     : (config && typeof config.depth === 'number') ? config.depth : null,
			async     : (config && typeof config.async === 'boolean') ? config.async : (false),
			context   : (config && config.context) ? config.context : null,
			log       : (config && config.log) ? config.log : (false)
		};

		function forEach(dataArray, callback) {
			var i = 0,
				arrayLength = dataArray.length;

			for(i = 0; i < arrayLength; i++) {
				callback(i, dataArray[i]);
			}
		}

        function isArray (obj) {
			return Array.isArray ? Array.isArray(obj) : Object.prototype.toString.call(obj) === '[object Array]';
        }

        function executeCallback(subscriptions, args, async) {
			async = (typeof async === 'boolean') ? async : options.async;
			if(!subscriptions.length) {
				return;
			}

			// clone array - callbacks can unsubscribe other subscriptions
			// reduces a lot performance but is safe
			var executedSubscriptions = subscriptions.slice();

			forEach(executedSubscriptions, function(subscriptionId, subscription) {
				if(typeof subscription === 'object' && executedSubscriptions.hasOwnProperty(subscriptionId)) {
					if(async) {
						setTimeout(function() {
							subscription.callback.apply(subscription.context, args);
						}, 4);
					} else {
						subscription.callback.apply(subscription.context, args);
					}
				}
			});
		}

		function executePublishWildcard(nsObject, args) {
			var nsElement;
			for(nsElement in nsObject) {
				if(nsElement[0] !== '_' && nsObject.hasOwnProperty(nsElement)) {
					executeCallback(nsObject[nsElement]._events, args);
				}
			}
		}

		function publish(nsObject, args, parts, params) {
			// work on copy - not on reference
			parts = parts.slice();

			var iPart = parts.shift();
			var depth = params.depth;
			var async = params.async;
			var partsLength = params.partsLength;
			var recurrent = params.recurrent;
			var partNumber = (partsLength - parts.length);

			// parts is empty
			if(!iPart) {
				executeCallback(nsObject._events, args, async);
				return;
			}
			// handle subscribe wildcard
			if(typeof nsObject['*'] !== 'undefined') {
				publish(nsObject['*'], args, parts, params);
			}

			// handle publish wildcard
			if(iPart === '*') {
				executePublishWildcard(nsObject, args, async);
			}

			// no namespace = leave publish
			if(typeof nsObject[iPart] === "undefined") {
				if(params.log) {
					console.warn('There is no ' + params.nsString + ' subscription');
				}
				return;
			}

			nsObject = nsObject[iPart];

			if(recurrent === true && typeof depth !== 'number') { //depth is not defined
				executeCallback(nsObject._events, args, async);
				if(parts.length === 0) {
					return;
				}
			} else if(recurrent === true && typeof depth === 'number' && partNumber >= (partsLength - depth)) { //if depth is defined
				executeCallback(nsObject._events, args, async);
			}

			publish(nsObject, args, parts, params);
		}

		function executeSubscribeWildcard(nsObject, args, params) {
			var parts = params.parts;
			var async = params.async;
			var nextPart = null;

			if(parts.length === 0) {
				executeCallback(nsObject._events, args, async);
			} else {
				nextPart = parts.shift();

				if(nsObject[nextPart]) {
					executeSubscribeWildcard(nsObject[nextPart], args, {
						parts : parts,
						async : async,
						nsString : params.nsString
					});
				}
			}
		}

		function subscribe(nsString, callback, params) {
			var parts = nsString.split(options.separator),
				nsObject, //Namespace object to which we attach event
				context = (params && typeof params.context !== 'undefined') ? params.context : options.context,
				eventObject = null,
				i = 0;

			if(!context) {
				context = callback;
			}

			//Iterating through _eventObject to find proper nsObject
			nsObject = _eventObject;
			for(i = 0; i < parts.length; i += 1) {
				if(typeof nsObject[parts[i]] === "undefined") {
					nsObject[parts[i]] = {};
					nsObject[parts[i]]._events = [];
				}
				nsObject = nsObject[parts[i]];
			}

			eventObject = {
				callback	: callback,
				context		: context // "this" parameter in executed function
			};

			nsObject._events.push(eventObject);
			return { namespace : parts.join(options.separator),
				event : eventObject };
		}

		function unsubscribe(subscribeObject) {
			if(subscribeObject === null || typeof subscribeObject === 'undefined') {
				return null;
			}
			var nsString = subscribeObject.namespace,
				eventObject = subscribeObject.event,
				parts = nsString.split(options.separator),
				nsObject,
				i = 0;

			//Iterating through _eventObject to find proper nsObject
			nsObject = _eventObject;
			for(i = 0; i < parts.length; i += 1) {
				if(typeof nsObject[parts[i]] === "undefined") {
					if(options.log) {
						console.error('There is no ' + nsString + ' subscription');
					}
					return null;
				}
				nsObject = nsObject[parts[i]];
			}

			forEach(nsObject._events, function(eventId) {
				if(nsObject._events[eventId] === eventObject) {
					nsObject._events.splice(eventId, 1);
				}
			});
		}

		return {
			/**
			 * Publish event
			 * @param nsString string namespace string splited by dots
			 * @param args array of arguments given to callbacks
			 * @param params paramaters possible:
			 *        @param recurrent bool should execution be bubbled throught namespace
			 *        @param depth integer how many namespaces separated by dots will be executed
			 */
			publish : function(nsString, args, params) {
				var parts = nsString.split(options.separator),
					recurrent = (typeof params === 'object' && params.recurrent) ? params.recurrent : options.recurrent, // bubbles event throught namespace if true
					depth = (typeof params === 'object' && params.depth) ? params.depth : options.depth,
					async = (typeof params === 'object' && params.async) ? params.async : options.async,
					partsLength = parts.length;

				if(!parts.length) {
					if(options.log) {
						console.error('Wrong namespace provided ' + nsString);
					}
					return;
				}

				publish(_eventObject, args, parts, {
					recurrent : recurrent,
					depth : depth,
					async : async,
					parts : parts,
					nsString : nsString,
					partsLength : partsLength
				});
			},
			/**
			 * Subscribe event
			 * @param nsString string namespace string splited by dots
			 * @param callback function function executed after publishing event
			 * @param params given params
			 *		@param context object/nothing Optional object which will be used as "this" in callback
			 */
			subscribe : function(nsString, callback, params) {
				var self = this,
					subscriptions = [];

				// array of callbacks - multiple subscription
				if(isArray(callback)) {
					forEach(callback, function(number) {
						var oneCallback = callback[number];

						subscriptions =	subscriptions.concat(self.subscribe(nsString, oneCallback, params));
					});
				// array of namespaces - multiple subscription
				} else if(isArray(nsString)) {
					forEach(nsString, function(number) {
						var namespace = nsString[number];

						subscriptions =	subscriptions.concat(self.subscribe(namespace, callback, params));
					});
				} else {
					return subscribe.apply(self, arguments);
				}
				return subscriptions;
			},
			/**
			 * subscribeOnce event - subscribe once to some event, then unsubscribe immadiately
			 * @param nsString string namespace string splited by dots
			 * @param callback function function executed after publishing event
			 * @param params given params
			 *		@param context object/nothing Optional object which will be used as "this" in callback
			 */
			subscribeOnce : function(nsString, callback, params) {
				var self = this,
					subscription = null;

				function subscriptionCallback() {
					var context = this;

					callback.apply(context, arguments);
					self.unsubscribe(subscription);
				}

				subscription = self.subscribe(nsString, subscriptionCallback, params);
				return subscription;
			},
			/**
			 * Unsubscribe from given subscription
			 * @param subscribeObject subscription object given on subscribe (returned from subscription)
			 */
			unsubscribe : function(subscribeObject) {
				var self = this;

				//if we have array of callbacks - multiple subscription
				if(isArray(subscribeObject)) {
					forEach(subscribeObject, function(number) {
						var oneSubscribtion = subscribeObject[number];

						unsubscribe.apply(self, [oneSubscribtion]);
					});
				} else {
					unsubscribe.apply(self, arguments);
				}
			},
			/**
			 * newInstance - makes new instance of pubsub object with its own config
			 * @param params instance configuration
			 *        @param separator separator (default is "/")
			 *        @param recurrent should publish events be bubbled through namespace
			 *        @param async should publish events be asynchronous - not blocking function execution
			 *        @param log console.warn/error every problem
			 */
			newInstance : function(params) {
				return new Pubsub(params);
			}
		}; //return block
	}
	pubsubInstance = new Pubsub(pubsubConfig);

	//if sbd's using requirejs library to load pubsub.js
	if(true) {
		!(__WEBPACK_AMD_DEFINE_FACTORY__ = (pubsubInstance),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}

	//node.js
	if(typeof module === 'object' && module.exports) {
		module.exports = pubsubInstance;
	}

	if(typeof window === 'object') {
		window.pubsub = pubsubInstance;
		if(window !== scope) {
			scope.pubsub = pubsubInstance;
		}
	}
})(this);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(97)))

/***/ }),
/* 97 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 98 */
/***/ (function(module, exports) {

(function () {

    if ( typeof window.CustomEvent === "function" ) return false;
  
    function CustomEvent ( event, params ) {
      params = params || { bubbles: false, cancelable: false, detail: undefined };
      var evt = document.createEvent( 'CustomEvent' );
      evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );
      return evt;
     }
  
    CustomEvent.prototype = window.Event.prototype;
  
    window.CustomEvent = CustomEvent;
  })();

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var IdEnum_1 = __webpack_require__(12);
var ToolOptionEnum_1 = __webpack_require__(30);
exports.IdToOptionTypeMap = {};
var IdToPasteType = {};
IdToPasteType[IdEnum_1.IdEnum.ITEM_PASTE_PASTE] = ToolOptionEnum_1.PasteType.paste;
IdToPasteType[IdEnum_1.IdEnum.ITEM_PASTE_FORMULA] = ToolOptionEnum_1.PasteType.paste_formulas;
IdToPasteType[IdEnum_1.IdEnum.ITEM_PASTE_FORMULA_AND_NUMBER_FORMATTING] = ToolOptionEnum_1.PasteType.paste_formulas_and_number_formatting;
IdToPasteType[IdEnum_1.IdEnum.ITEM_PASTE_NO_BORDER] = ToolOptionEnum_1.PasteType.paste_no_borders;
IdToPasteType[IdEnum_1.IdEnum.ITEM_PASTE_KEEP_SOURCE_COL_WIDTH] = ToolOptionEnum_1.PasteType.paste_keep_source_column_widths;
IdToPasteType[IdEnum_1.IdEnum.ITEM_PASTE_KEEP_SOURCE_FORMATTING] = ToolOptionEnum_1.PasteType.paste_keep_source_formatting;
IdToPasteType[IdEnum_1.IdEnum.ITEM_PASTE_MATCH_DESTINATION_FORMATTING] = ToolOptionEnum_1.PasteType.paste;
IdToPasteType[IdEnum_1.IdEnum.ITEM_PASTE_SPECIAL] = ToolOptionEnum_1.PasteType.paste_special;
exports.IdToOptionTypeMap.IdToPasteType = IdToPasteType;
var IdToCopyType = {};
IdToCopyType[IdEnum_1.IdEnum.ITEM_COPY_COPY] = ToolOptionEnum_1.CopyType.copy;
IdToCopyType[IdEnum_1.IdEnum.ITEM_COPY_COPY_AS_PICTURE] = ToolOptionEnum_1.CopyType.copy_as_picture;
exports.IdToOptionTypeMap.IdToCopyType = IdToCopyType;
var IdToFontFamilyType = {};
IdToFontFamilyType[IdEnum_1.IdEnum.ITEM_FONTFAMILY_CALIBRI_LIGHT] = "Calibri Light";
IdToFontFamilyType[IdEnum_1.IdEnum.ITEM_FONTFAMILY_CALIBRI] = "Calibri";
IdToFontFamilyType[IdEnum_1.IdEnum.ITEM_FONTFAMILY_AGENCYFB] = "Agency FB";
IdToFontFamilyType[IdEnum_1.IdEnum.ITEM_FONTFAMILY_ALGERIAN] = "Algerian";
IdToFontFamilyType[IdEnum_1.IdEnum.ITEM_FONTFAMILY_ARIAL] = "Arial";
IdToFontFamilyType[IdEnum_1.IdEnum.ITEM_FONTFAMILY_ARIALBLACK] = "Arial Black";
IdToFontFamilyType[IdEnum_1.IdEnum.ITEM_FONTFAMILY_BELLMT] = "Bell MT";
IdToFontFamilyType[IdEnum_1.IdEnum.ITEM_FONTFAMILY_BERLINSANFB] = "Berlin Sans FB";
IdToFontFamilyType[IdEnum_1.IdEnum.ITEM_FONTFAMILY_BROADWAY] = "Broadway";
IdToFontFamilyType[IdEnum_1.IdEnum.ITEM_FONTFAMILY_CAMBRIA] = "Cambria";
IdToFontFamilyType[IdEnum_1.IdEnum.ITEM_FONTFAMILY_CENTURY] = "Century";
IdToFontFamilyType[IdEnum_1.IdEnum.ITEM_FONTFAMILY_FORTE] = "Forte";
IdToFontFamilyType[IdEnum_1.IdEnum.ITEM_FONTFAMILY_GEORGIA] = "Georgia";
IdToFontFamilyType[IdEnum_1.IdEnum.ITEM_FONTFAMILY_IMPACT] = "Impact";
IdToFontFamilyType[IdEnum_1.IdEnum.ITEM_FONTFAMILY_JOKERMAN] = "Jokerman";
IdToFontFamilyType[IdEnum_1.IdEnum.ITEM_FONTFAMILY_LUCIDA_SANS] = "Lucida Sans";
IdToFontFamilyType[IdEnum_1.IdEnum.ITEM_FONTFAMILY_SEGOEUI] = "Segoe UI";
IdToFontFamilyType[IdEnum_1.IdEnum.ITEM_FONTFAMILY_TAHOMA] = "Segoe UI";
IdToFontFamilyType[IdEnum_1.IdEnum.ITEM_FONTFAMILY_TIMES_NEW_ROMAN] = "Times New Roman";
IdToFontFamilyType[IdEnum_1.IdEnum.ITEM_FONTFAMILY_VERDANA] = "Verdana";
exports.IdToOptionTypeMap.IdToFontFamilyType = IdToFontFamilyType;
var IdToFontSizeType = {};
IdToFontSizeType[IdEnum_1.IdEnum.ITEM_FONTSIZE_8] = 8;
IdToFontSizeType[IdEnum_1.IdEnum.ITEM_FONTSIZE_9] = 9;
IdToFontSizeType[IdEnum_1.IdEnum.ITEM_FONTSIZE_10] = 10;
IdToFontSizeType[IdEnum_1.IdEnum.ITEM_FONTSIZE_11] = 11;
IdToFontSizeType[IdEnum_1.IdEnum.ITEM_FONTSIZE_12] = 12;
IdToFontSizeType[IdEnum_1.IdEnum.ITEM_FONTSIZE_14] = 14;
IdToFontSizeType[IdEnum_1.IdEnum.ITEM_FONTSIZE_16] = 16;
IdToFontSizeType[IdEnum_1.IdEnum.ITEM_FONTSIZE_18] = 18;
IdToFontSizeType[IdEnum_1.IdEnum.ITEM_FONTSIZE_20] = 20;
IdToFontSizeType[IdEnum_1.IdEnum.ITEM_FONTSIZE_22] = 22;
IdToFontSizeType[IdEnum_1.IdEnum.ITEM_FONTSIZE_24] = 24;
IdToFontSizeType[IdEnum_1.IdEnum.ITEM_FONTSIZE_26] = 26;
IdToFontSizeType[IdEnum_1.IdEnum.ITEM_FONTSIZE_28] = 28;
IdToFontSizeType[IdEnum_1.IdEnum.ITEM_FONTSIZE_36] = 36;
IdToFontSizeType[IdEnum_1.IdEnum.ITEM_FONTSIZE_48] = 48;
IdToFontSizeType[IdEnum_1.IdEnum.ITEM_FONTSIZE_72] = 72;
exports.IdToOptionTypeMap.IdToFontSizeType = IdToFontSizeType;
var FontSizeOrderedList = [
    IdEnum_1.IdEnum.ITEM_FONTSIZE_8,
    IdEnum_1.IdEnum.ITEM_FONTSIZE_9,
    IdEnum_1.IdEnum.ITEM_FONTSIZE_10,
    IdEnum_1.IdEnum.ITEM_FONTSIZE_11,
    IdEnum_1.IdEnum.ITEM_FONTSIZE_12,
    IdEnum_1.IdEnum.ITEM_FONTSIZE_14,
    IdEnum_1.IdEnum.ITEM_FONTSIZE_16,
    IdEnum_1.IdEnum.ITEM_FONTSIZE_18,
    IdEnum_1.IdEnum.ITEM_FONTSIZE_20,
    IdEnum_1.IdEnum.ITEM_FONTSIZE_22,
    IdEnum_1.IdEnum.ITEM_FONTSIZE_24,
    IdEnum_1.IdEnum.ITEM_FONTSIZE_26,
    IdEnum_1.IdEnum.ITEM_FONTSIZE_28,
    IdEnum_1.IdEnum.ITEM_FONTSIZE_36,
    IdEnum_1.IdEnum.ITEM_FONTSIZE_48,
    IdEnum_1.IdEnum.ITEM_FONTSIZE_72
];
exports.IdToOptionTypeMap.FontSizeOrderedList = FontSizeOrderedList;
var IdToBorderType = {};
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_BOTTOM_BORDER] = ToolOptionEnum_1.BorderType.bottomBorder;
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_TOP_BORDER] = ToolOptionEnum_1.BorderType.topBorder;
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_LEFT_BORDER] = ToolOptionEnum_1.BorderType.leftBorder;
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_RIGHT_BORDER] = ToolOptionEnum_1.BorderType.rightBorder;
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_NO_BORDERS] = ToolOptionEnum_1.BorderType.noBorder;
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_ALL_BORDERS] = ToolOptionEnum_1.BorderType.allBorder;
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_OUTSIDE_BORDERS] = ToolOptionEnum_1.BorderType.outsideBorder;
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_THICK_OUTSIDE_BORDERS] = ToolOptionEnum_1.BorderType.custom;
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_BOTTOM_DOUBLE_BORDER] = ToolOptionEnum_1.BorderType.custom;
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_THICK_BOTTOM_BORDER] = ToolOptionEnum_1.BorderType.custom;
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_TOP_N_BOTTOM_BORDER] = ToolOptionEnum_1.BorderType.custom;
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_TOP_N_THICK_BOTTOM_BORDER] = ToolOptionEnum_1.BorderType.custom;
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_TOP_N_DOUBLE_BOTTOM_BORDER] = ToolOptionEnum_1.BorderType.custom;
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_DRAW_BORDER] = ToolOptionEnum_1.BorderType.outsideBorder;
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_DRAW_BORDER_GRID] = ToolOptionEnum_1.BorderType.allBorder;
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_ERASE_BORDER] = ToolOptionEnum_1.BorderType.noBorder;
//IdToBorderType[IdEnum.ITEM_BORDER_LINECOLOR] = BorderType.outsideBorder;
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_LINECOLOR_COLORGRID] = ToolOptionEnum_1.BorderType.outsideBorder;
//IdToBorderType[IdEnum.ITEM_BORDER_LINESTYLE] = BorderType.outsideBorder;
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE0] = ToolOptionEnum_1.BorderType.outsideBorder;
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE1] = ToolOptionEnum_1.BorderType.outsideBorder;
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE2] = ToolOptionEnum_1.BorderType.outsideBorder;
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE3] = ToolOptionEnum_1.BorderType.outsideBorder;
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE4] = ToolOptionEnum_1.BorderType.outsideBorder;
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE5] = ToolOptionEnum_1.BorderType.outsideBorder;
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE6] = ToolOptionEnum_1.BorderType.outsideBorder;
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE7] = ToolOptionEnum_1.BorderType.outsideBorder;
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE8] = ToolOptionEnum_1.BorderType.outsideBorder;
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE9] = ToolOptionEnum_1.BorderType.outsideBorder;
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE10] = ToolOptionEnum_1.BorderType.outsideBorder;
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE11] = ToolOptionEnum_1.BorderType.outsideBorder;
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE12] = ToolOptionEnum_1.BorderType.outsideBorder;
IdToBorderType[IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE13] = ToolOptionEnum_1.BorderType.outsideBorder;
exports.IdToOptionTypeMap.IdToBorderType = IdToBorderType;
var IdToLineStyleType = {};
IdToLineStyleType[IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE0] = ToolOptionEnum_1.BorderLineStyleType.type0;
IdToLineStyleType[IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE1] = ToolOptionEnum_1.BorderLineStyleType.type1;
IdToLineStyleType[IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE2] = ToolOptionEnum_1.BorderLineStyleType.type2;
IdToLineStyleType[IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE3] = ToolOptionEnum_1.BorderLineStyleType.type3;
IdToLineStyleType[IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE4] = ToolOptionEnum_1.BorderLineStyleType.type4;
IdToLineStyleType[IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE5] = ToolOptionEnum_1.BorderLineStyleType.type5;
IdToLineStyleType[IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE6] = ToolOptionEnum_1.BorderLineStyleType.type6;
IdToLineStyleType[IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE7] = ToolOptionEnum_1.BorderLineStyleType.type7;
IdToLineStyleType[IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE8] = ToolOptionEnum_1.BorderLineStyleType.type8;
IdToLineStyleType[IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE9] = ToolOptionEnum_1.BorderLineStyleType.type9;
IdToLineStyleType[IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE10] = ToolOptionEnum_1.BorderLineStyleType.type10;
IdToLineStyleType[IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE11] = ToolOptionEnum_1.BorderLineStyleType.type11;
IdToLineStyleType[IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE12] = ToolOptionEnum_1.BorderLineStyleType.type12;
IdToLineStyleType[IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE13] = ToolOptionEnum_1.BorderLineStyleType.type13;
exports.IdToOptionTypeMap.IdToLineStyleType = IdToLineStyleType;
var seperator = "-";
var ItemToCustomStyle = {};
ItemToCustomStyle[IdEnum_1.IdEnum.ITEM_BORDER_THICK_OUTSIDE_BORDERS] = ToolOptionEnum_1.BorderLineStyleType.type8 + seperator + ToolOptionEnum_1.BorderLineStyleType.type8 + seperator + ToolOptionEnum_1.BorderLineStyleType.type8 + seperator + ToolOptionEnum_1.BorderLineStyleType.type8;
ItemToCustomStyle[IdEnum_1.IdEnum.ITEM_BORDER_BOTTOM_DOUBLE_BORDER] = ToolOptionEnum_1.BorderLineStyleType.type0 + seperator + ToolOptionEnum_1.BorderLineStyleType.type0 + seperator + ToolOptionEnum_1.BorderLineStyleType.type7 + seperator + ToolOptionEnum_1.BorderLineStyleType.type0;
ItemToCustomStyle[IdEnum_1.IdEnum.ITEM_BORDER_THICK_BOTTOM_BORDER] = ToolOptionEnum_1.BorderLineStyleType.type0 + seperator + ToolOptionEnum_1.BorderLineStyleType.type0 + seperator + ToolOptionEnum_1.BorderLineStyleType.type8 + seperator + ToolOptionEnum_1.BorderLineStyleType.type0;
ItemToCustomStyle[IdEnum_1.IdEnum.ITEM_BORDER_TOP_N_BOTTOM_BORDER] = ToolOptionEnum_1.BorderLineStyleType.type1 + seperator + ToolOptionEnum_1.BorderLineStyleType.type0 + seperator + ToolOptionEnum_1.BorderLineStyleType.type1 + seperator + ToolOptionEnum_1.BorderLineStyleType.type0;
ItemToCustomStyle[IdEnum_1.IdEnum.ITEM_BORDER_TOP_N_THICK_BOTTOM_BORDER] = ToolOptionEnum_1.BorderLineStyleType.type1 + seperator + ToolOptionEnum_1.BorderLineStyleType.type0 + seperator + ToolOptionEnum_1.BorderLineStyleType.type8 + seperator + ToolOptionEnum_1.BorderLineStyleType.type0;
ItemToCustomStyle[IdEnum_1.IdEnum.ITEM_BORDER_TOP_N_DOUBLE_BOTTOM_BORDER] = ToolOptionEnum_1.BorderLineStyleType.type1 + seperator + ToolOptionEnum_1.BorderLineStyleType.type0 + seperator + ToolOptionEnum_1.BorderLineStyleType.type7 + seperator + ToolOptionEnum_1.BorderLineStyleType.type0;
exports.IdToOptionTypeMap.ItemToCustomStyle = ItemToCustomStyle;
var ControlIdToVAlignType = {};
ControlIdToVAlignType[IdEnum_1.IdEnum.CONTROL_ALIGN_TOP] = ToolOptionEnum_1.VAlignType.top;
ControlIdToVAlignType[IdEnum_1.IdEnum.CONTROL_ALIGN_MIDDLE] = ToolOptionEnum_1.VAlignType.center;
ControlIdToVAlignType[IdEnum_1.IdEnum.CONTROL_ALIGN_BOTTOM] = ToolOptionEnum_1.VAlignType.bottom;
exports.IdToOptionTypeMap.ControlIdToVAlignType = ControlIdToVAlignType;
var ControlIdToHAlignType = {};
ControlIdToHAlignType[IdEnum_1.IdEnum.CONTROL_ALIGN_LEFT] = ToolOptionEnum_1.HAlignType.left;
ControlIdToHAlignType[IdEnum_1.IdEnum.CONTROL_ALIGN_CENTER] = ToolOptionEnum_1.HAlignType.center;
ControlIdToHAlignType[IdEnum_1.IdEnum.CONTROL_ALIGN_RIGHT] = ToolOptionEnum_1.HAlignType.right;
exports.IdToOptionTypeMap.ControlIdToHAlignType = ControlIdToHAlignType;
var IdToInsertType = {};
IdToInsertType[IdEnum_1.IdEnum.ITEM_INSERT_CELLS] = ToolOptionEnum_1.InsertActionType.insert_cells;
IdToInsertType[IdEnum_1.IdEnum.ITEM_INSERT_SHEET_ROWS] = ToolOptionEnum_1.InsertActionType.insert_sheet_row;
IdToInsertType[IdEnum_1.IdEnum.ITEM_INSERT_SHEET_COLUMNS] = ToolOptionEnum_1.InsertActionType.insert_sheet_column;
IdToInsertType[IdEnum_1.IdEnum.ITEM_INSERT_SHEET] = ToolOptionEnum_1.InsertActionType.insert_sheet;
exports.IdToOptionTypeMap.IdToInsertType = IdToInsertType;
var IdToDeleteType = {};
IdToDeleteType[IdEnum_1.IdEnum.ITEM_DELETE_CELLS] = ToolOptionEnum_1.DeleteActionType.delete_cells;
IdToDeleteType[IdEnum_1.IdEnum.ITEM_DELETE_SHEET_ROWS] = ToolOptionEnum_1.DeleteActionType.delete_sheet_row;
IdToDeleteType[IdEnum_1.IdEnum.ITEM_DELETE_SHEET_COLUMNS] = ToolOptionEnum_1.DeleteActionType.delete_sheet_column;
IdToDeleteType[IdEnum_1.IdEnum.ITEM_DELETE_SHEET] = ToolOptionEnum_1.DeleteActionType.delete_sheet;
exports.IdToOptionTypeMap.IdToDeleteType = IdToDeleteType;
var IdToAutosumType = {};
IdToAutosumType[IdEnum_1.IdEnum.ITEM_AUTOSUM_SUM] = ToolOptionEnum_1.AutosumActionType.sum;
IdToAutosumType[IdEnum_1.IdEnum.ITEM_AUTOSUM_AVERAGE] = ToolOptionEnum_1.AutosumActionType.average;
IdToAutosumType[IdEnum_1.IdEnum.ITEM_AUTOSUM_COUNT_NUMBERS] = ToolOptionEnum_1.AutosumActionType.count_numbers;
IdToAutosumType[IdEnum_1.IdEnum.ITEM_AUTOSUM_MAX] = ToolOptionEnum_1.AutosumActionType.max;
IdToAutosumType[IdEnum_1.IdEnum.ITEM_AUTOSUM_MIN] = ToolOptionEnum_1.AutosumActionType.min;
exports.IdToOptionTypeMap.IdToAutosumType = IdToAutosumType;
var IdToClearType = {};
IdToClearType[IdEnum_1.IdEnum.ITEM_CLEAR_ALL] = ToolOptionEnum_1.ClearActionType.clear_all;
IdToClearType[IdEnum_1.IdEnum.ITEM_CLEAR_FORMATS] = ToolOptionEnum_1.ClearActionType.clear_formats;
IdToClearType[IdEnum_1.IdEnum.ITEM_CLEAR_CONTENTS] = ToolOptionEnum_1.ClearActionType.clear_contents;
IdToClearType[IdEnum_1.IdEnum.ITEM_CLEAR_COMMENTS] = ToolOptionEnum_1.ClearActionType.clear_comments;
IdToClearType[IdEnum_1.IdEnum.ITEM_CLEAR_HYPERLINKS] = ToolOptionEnum_1.ClearActionType.clear_hyperlinks;
IdToClearType[IdEnum_1.IdEnum.ITEM_CLEAR_REMOVE_HYPERLINKS] = ToolOptionEnum_1.ClearActionType.remove_hyperlinks;
exports.IdToOptionTypeMap.IdToClearType = IdToClearType;
var IdToNumberFormatType = {};
IdToNumberFormatType[IdEnum_1.IdEnum.ITEM_NUMBER_FORMAT_GENERAL] = ToolOptionEnum_1.NumberFormatType.general;
IdToNumberFormatType[IdEnum_1.IdEnum.ITEM_NUMBER_FORMAT_NUMBER] = ToolOptionEnum_1.NumberFormatType.number;
IdToNumberFormatType[IdEnum_1.IdEnum.ITEM_NUMBER_FORMAT_CURRENCY] = ToolOptionEnum_1.NumberFormatType.currency;
IdToNumberFormatType[IdEnum_1.IdEnum.ITEM_NUMBER_FORMAT_ACCOUNTING] = ToolOptionEnum_1.NumberFormatType.accounting;
IdToNumberFormatType[IdEnum_1.IdEnum.ITEM_NUMBER_FORMAT_SHORTDATE] = ToolOptionEnum_1.NumberFormatType.short_date;
IdToNumberFormatType[IdEnum_1.IdEnum.ITEM_NUMBER_FORMAT_LONGDATE] = ToolOptionEnum_1.NumberFormatType.long_date;
IdToNumberFormatType[IdEnum_1.IdEnum.ITEM_NUMBER_FORMAT_TIME] = ToolOptionEnum_1.NumberFormatType.time;
IdToNumberFormatType[IdEnum_1.IdEnum.ITEM_NUMBER_FORMAT_PERCENTAGE] = ToolOptionEnum_1.NumberFormatType.percentage;
IdToNumberFormatType[IdEnum_1.IdEnum.ITEM_NUMBER_FORMAT_FRACTION] = ToolOptionEnum_1.NumberFormatType.fraction;
IdToNumberFormatType[IdEnum_1.IdEnum.ITEM_NUMBER_FORMAT_SCIENTIFIC] = ToolOptionEnum_1.NumberFormatType.scientific;
IdToNumberFormatType[IdEnum_1.IdEnum.ITEM_NUMBER_FORMAT_TEXT] = ToolOptionEnum_1.NumberFormatType.text;
IdToNumberFormatType[IdEnum_1.IdEnum.ITEM_NUMBER_FORMAT_CUSTOM] = ToolOptionEnum_1.NumberFormatType.custom;
exports.IdToOptionTypeMap.IdToNumberFormatType = IdToNumberFormatType;


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TabNames;
(function (TabNames) {
    TabNames["home"] = "home";
    TabNames["insert"] = "insert";
    TabNames["page_layout"] = "page_layout";
    TabNames["formulas"] = "formulas";
    TabNames["data"] = "data";
    TabNames["review"] = "review";
    TabNames["view"] = "view";
    TabNames["developer"] = "developer";
    TabNames["team"] = "team";
    TabNames["chart_tools_design"] = "chart_tools_design";
    TabNames["chart_tools_format"] = "chart_tools_format";
})(TabNames = exports.TabNames || (exports.TabNames = {}));
var ControlNames;
(function (ControlNames) {
    ControlNames["paste"] = "paste";
    ControlNames["cut"] = "cut";
    ControlNames["copy"] = "copy";
    ControlNames["formatPainter"] = "formatPainter";
    ControlNames["clipboard_section_launcher"] = "clipboard_section_launcher";
    ControlNames["fontFamily"] = "fontFamily";
    ControlNames["fontSize"] = "fontSize";
    ControlNames["Increase_font"] = "Increase_font";
    ControlNames["decrease_font"] = "decrease_font";
    ControlNames["bold"] = "bold";
    ControlNames["italic"] = "italic";
    ControlNames["underline"] = "underline";
    ControlNames["border"] = "border";
    ControlNames["fill_color"] = "fill_color";
    ControlNames["font_color"] = "font_color";
    ControlNames["font_section_launcher"] = "font_section_launcher";
    ControlNames["valign_top"] = "valign_top";
    ControlNames["valign_middle"] = "valign_middle";
    ControlNames["valign_bottom"] = "valign_bottom";
    ControlNames["halign_left"] = "halign_left";
    ControlNames["halign_center"] = "halign_center";
    ControlNames["halign_right"] = "halign_right";
    ControlNames["orientation"] = "orientation";
    ControlNames["decrease_indent"] = "decrease_indent";
    ControlNames["increase_indent"] = "increase_indent";
    ControlNames["wrap_text"] = "wrap_text";
    ControlNames["merge"] = "merge";
    ControlNames["alignment_section_launcher"] = "alignment_section_launcher";
    ControlNames["number_format"] = "number_format";
    ControlNames["number_section_launcher"] = "number_section_launcher";
    ControlNames["clear"] = "clear";
})(ControlNames = exports.ControlNames || (exports.ControlNames = {}));


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var RibbonCoreEvents;
(function (RibbonCoreEvents) {
    RibbonCoreEvents["onRibbonControlClick"] = "onRibbonControlClick";
    RibbonCoreEvents["onRibbonControlDblClick"] = "onRibbonControlDblClick";
    RibbonCoreEvents["onRibbonControlHoverIn"] = "onRibbonControlHoverIn";
    RibbonCoreEvents["onRibbonControlHoverOut"] = "onRibbonControlHoverOut";
    RibbonCoreEvents["onRibbonControlMenuOpenerClick"] = "onRibbonControlMenuOpenerClick";
    RibbonCoreEvents["onRibbonPinned"] = "onRibbonPinned";
    RibbonCoreEvents["onRibbonCollapsed"] = "onRibbonCollapsed";
    RibbonCoreEvents["onRibbonTabChange"] = "onRibbonTabChange";
    RibbonCoreEvents["onRibbonLoaded"] = "onRibbonLoaded";
    RibbonCoreEvents["onContainerResize"] = "onContainerResize";
})(RibbonCoreEvents = exports.RibbonCoreEvents || (exports.RibbonCoreEvents = {}));
var RibbonEvents;
(function (RibbonEvents) {
    RibbonEvents["onRibbonCommand"] = "onRibbonCommand";
    RibbonEvents["onRibbonPinStateChange"] = "onRibbonPinStateChange";
    RibbonEvents["onRibbonLoaded"] = "onRibbonLoaded";
    RibbonEvents["updateView"] = "updateView";
    RibbonEvents["onContainerSizeChange"] = "onContainerSizeChange";
})(RibbonEvents = exports.RibbonEvents || (exports.RibbonEvents = {}));
var RibbonCommands;
(function (RibbonCommands) {
    RibbonCommands["PASTE"] = "PASTE";
    RibbonCommands["CUT"] = "CUT";
    RibbonCommands["COPY"] = "COPY";
    RibbonCommands["FORMATPAINTER"] = "FORMATPAINTER";
    RibbonCommands["CLIPBOARD_SECTION_LAUNCHER"] = "CLIPBOARD_SECTION_LAUNCHER";
    RibbonCommands["FONT_FAMILY"] = "FONT_FAMILY";
    RibbonCommands["FONT_SIZE"] = "FONT_SIZE";
    RibbonCommands["BOLD"] = "BOLD";
    RibbonCommands["ITALIC"] = "ITALIC";
    RibbonCommands["UNDERLINE"] = "UNDERLINE";
    RibbonCommands["BORDER"] = "BORDER";
    RibbonCommands["BORDER_MODE"] = "BORDER_MODE";
    RibbonCommands["MORE_BORDER"] = "MORE_BORDER";
    RibbonCommands["FILL_COLOR"] = "FILL_COLOR";
    RibbonCommands["MORE_FILL_COLOR"] = "MORE_FILL_COLOR";
    RibbonCommands["FONT_COLOR"] = "FONT_COLOR";
    RibbonCommands["MORE_FONT_COLOR"] = "MORE_FONT_COLOR";
    RibbonCommands["FONT_SECTION_LAUNCHER"] = "FONT_SECTION_LAUNCHER";
    RibbonCommands["HALIGN"] = "HALIGN";
    RibbonCommands["VALIGN"] = "VALIGN";
    RibbonCommands["ORIENTATION"] = "ORIENTATION";
    RibbonCommands["ORIENTATION_FORMAT_CELL_ALIGNMENT"] = "ORIENTATION_FORMAT_CELL_ALIGNMENT";
    RibbonCommands["INDENT"] = "INDENT";
    RibbonCommands["WRAP_TEXT"] = "WRAP_TEXT";
    RibbonCommands["MERGE"] = "MERGE";
    RibbonCommands["ALIGNMENT_SECTION_LAUNCHER"] = "ALIGNMENT_SECTION_LAUNCHER";
    RibbonCommands["NUMBER_FORMAT"] = "NUMBER_FORMAT";
    RibbonCommands["NUMBER_SECTION_LAUNCHER"] = "NUMBER_SECTION_LAUNCHER";
    RibbonCommands["INSERT"] = "INSERT";
    RibbonCommands["DELETE"] = "DELETE";
    RibbonCommands["CLEAR"] = "CLEAR";
    RibbonCommands["FORMULA"] = "FORMULA";
    RibbonCommands["ACTIVE_TAB"] = "ACTIVE_TAB";
    RibbonCommands["SHOW_TAB"] = "SHOW_TAB";
    RibbonCommands["HIDE_TAB"] = "HIDE_TAB";
    RibbonCommands["PIN"] = "PIN";
    RibbonCommands["UNPIN"] = "UNPIN";
    RibbonCommands["ENABLE_CONTROL"] = "ENABLE_CONTROL";
    RibbonCommands["DISABLE_CONTROL"] = "DISABLE_CONTROL";
    RibbonCommands["CONTROL_MODE"] = "CONTROL_MODE";
    RibbonCommands["INACTIVE_CONTROL"] = "INACTIVE_CONTROL";
})(RibbonCommands = exports.RibbonCommands || (exports.RibbonCommands = {}));


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Constants = /** @class */ (function () {
    function Constants() {
    }
    Constants.defaultCommandArgs = "default";
    return Constants;
}());
exports.Constants = Constants;
var StateDataFields = /** @class */ (function () {
    function StateDataFields() {
    }
    StateDataFields.toggleState = "selected";
    StateDataFields.selectedValue = "selectedValue";
    StateDataFields.updateColorStrip = "updateColorStrip";
    return StateDataFields;
}());
exports.StateDataFields = StateDataFields;


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var IdEnum_1 = __webpack_require__(12);
var NamesEnums_1 = __webpack_require__(100);
exports.TabNameToIdMap = {};
exports.TabNameToIdMap[NamesEnums_1.TabNames.home] = IdEnum_1.IdEnum.TAB_HOME;
exports.TabNameToIdMap[NamesEnums_1.TabNames.insert] = IdEnum_1.IdEnum.TAB_INSERT;
exports.TabNameToIdMap[NamesEnums_1.TabNames.page_layout] = IdEnum_1.IdEnum.TAB_PAGE_LAYOUT;
exports.TabNameToIdMap[NamesEnums_1.TabNames.formulas] = IdEnum_1.IdEnum.TAB_FORMULAS;
exports.TabNameToIdMap[NamesEnums_1.TabNames.data] = IdEnum_1.IdEnum.TAB_DATA;
exports.TabNameToIdMap[NamesEnums_1.TabNames.review] = IdEnum_1.IdEnum.TAB_REVIEW;
exports.TabNameToIdMap[NamesEnums_1.TabNames.view] = IdEnum_1.IdEnum.TAB_VIEW;
exports.TabNameToIdMap[NamesEnums_1.TabNames.developer] = IdEnum_1.IdEnum.TAB_DEVELOPER;
exports.TabNameToIdMap[NamesEnums_1.TabNames.team] = IdEnum_1.IdEnum.TAB_TEAM;
exports.TabNameToIdMap[NamesEnums_1.TabNames.chart_tools_design] = IdEnum_1.IdEnum.TAB_CHART_TOOLS_DESIGN;
exports.TabNameToIdMap[NamesEnums_1.TabNames.chart_tools_format] = IdEnum_1.IdEnum.TAB_CHART_TOOLS_FORMAT;


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ControlTypes;
(function (ControlTypes) {
    ControlTypes["button"] = "button";
    ControlTypes["splitButton"] = "splitButton";
    ControlTypes["buttonDropdown"] = "buttonDropdown";
    ControlTypes["colorMenu"] = "colorMenu";
    ControlTypes["verticalSplitButton"] = "verticalSplitButton";
    ControlTypes["splitInput"] = "splitInput";
})(ControlTypes = exports.ControlTypes || (exports.ControlTypes = {}));
var RibbonTypes;
(function (RibbonTypes) {
    RibbonTypes["ribbonConfig_S"] = "ribbonConfig_S";
    RibbonTypes["ribbonConfig_M"] = "ribbonConfig_M";
    RibbonTypes["ribbonConfig_L"] = "ribbonConfig_L";
})(RibbonTypes = exports.RibbonTypes || (exports.RibbonTypes = {}));


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var LeonardoRibbon_1 = __webpack_require__(32);
var RibbonEventHandler_1 = __webpack_require__(106);
var RibbonSetter_1 = __webpack_require__(108);
var configJson_msHomeTab_1 = __webpack_require__(111);
var configJson_msHomeTab_l_1 = __webpack_require__(112);
var configJson_msHomeTab_m_1 = __webpack_require__(113);
//import { GoogleSheetConfigJson } from "./ribbonTypes/googleSheet/configJson.msGoogleSheet";
var Events_1 = __webpack_require__(101);
var TabNameToIdMap_1 = __webpack_require__(103);
var IdEnum_1 = __webpack_require__(12);
var Enums_1 = __webpack_require__(104);
var Util_1 = __webpack_require__(31);
var InactiveControlsMap_1 = __webpack_require__(114);
var RibbonWrapper = /** @class */ (function () {
    function RibbonWrapper(containerEle, imageRootFolderPath, listenerEle, appropriateJsonFile) {
        this.cnt = $(containerEle);
        var configJson = this.getRibbonJSon(appropriateJsonFile);
        configJson = this.getUpdatedConfig(configJson, imageRootFolderPath);
        this.broadcastEle = this.cnt;
        this.listenerEle = $(listenerEle);
        var rbnObj = new LeonardoRibbon_1.LeonardoRibbon(containerEle, configJson);
        this.ribbonCore = rbnObj;
        this.ribbonSetter = new RibbonSetter_1.default(this.ribbonCore, this.broadcastEle);
        this.ribbonEventHandler = new RibbonEventHandler_1.default(this.ribbonCore, this.broadcastEle, this.ribbonSetter);
        this.buildExternalEventHandlerMap();
        this.buildRibbonEventHandlerMap();
        this.bindRibbonEvents(this.ribbonCore.getContainer());
        this.bindExternalEvents(this.listenerEle);
    }
    RibbonWrapper.prototype.getContainer = function () {
        return this.cnt;
    };
    RibbonWrapper.prototype.destroy = function () {
        this.listenerEle.off();
        this.ribbonCore.destroy();
    };
    RibbonWrapper.prototype.buildExternalEventHandlerMap = function () {
        var handlerMap = {};
        handlerMap[Events_1.RibbonCommands.FORMATPAINTER] = { handler: this.ribbonSetter.formatPainter };
        handlerMap[Events_1.RibbonCommands.FONT_FAMILY] = { handler: this.ribbonSetter.fontFamily };
        handlerMap[Events_1.RibbonCommands.FONT_SIZE] = { handler: this.ribbonSetter.fontSize };
        handlerMap[Events_1.RibbonCommands.BOLD] = { handler: this.ribbonSetter.bold };
        handlerMap[Events_1.RibbonCommands.ITALIC] = { handler: this.ribbonSetter.italic };
        handlerMap[Events_1.RibbonCommands.UNDERLINE] = { handler: this.ribbonSetter.underline };
        //handlerMap[RibbonCommands.BORDER] = { handler: this.ribbonSetter.border };
        handlerMap[Events_1.RibbonCommands.BORDER_MODE] = { handler: this.ribbonSetter.borderMode };
        handlerMap[Events_1.RibbonCommands.FILL_COLOR] = { handler: this.ribbonSetter.fillColor };
        handlerMap[Events_1.RibbonCommands.FONT_COLOR] = { handler: this.ribbonSetter.fontColor };
        handlerMap[Events_1.RibbonCommands.VALIGN] = { handler: this.ribbonSetter.verticalAlign };
        handlerMap[Events_1.RibbonCommands.HALIGN] = { handler: this.ribbonSetter.textAlign };
        handlerMap[Events_1.RibbonCommands.WRAP_TEXT] = { handler: this.ribbonSetter.wrap };
        handlerMap[Events_1.RibbonCommands.MERGE] = { handler: this.ribbonSetter.merge };
        handlerMap[Events_1.RibbonCommands.NUMBER_FORMAT] = { handler: this.ribbonSetter.numberFormat };
        handlerMap[Events_1.RibbonCommands.ACTIVE_TAB] = { handler: this.ribbonSetter.setActiveTab };
        handlerMap[Events_1.RibbonCommands.SHOW_TAB] = { handler: this.ribbonSetter.showTab };
        handlerMap[Events_1.RibbonCommands.HIDE_TAB] = { handler: this.ribbonSetter.hideTab };
        handlerMap[Events_1.RibbonCommands.ENABLE_CONTROL] = { handler: this.ribbonSetter.enableControls };
        handlerMap[Events_1.RibbonCommands.DISABLE_CONTROL] = { handler: this.ribbonSetter.disableControls };
        handlerMap[Events_1.RibbonCommands.CONTROL_MODE] = { handler: this.ribbonSetter.updateControlModes };
        this.externalEventHandlerMap = handlerMap;
    };
    RibbonWrapper.prototype.buildRibbonEventHandlerMap = function () {
        this.ribbonEventHandlerMap = {};
        //single click handler
        var handlerMap = {};
        handlerMap[IdEnum_1.IdEnum.CONTROL_PASTE] = { handler: this.ribbonEventHandler.paste };
        handlerMap[IdEnum_1.IdEnum.CONTROL_CUT] = { handler: this.ribbonEventHandler.cut };
        handlerMap[IdEnum_1.IdEnum.CONTROL_COPY] = { handler: this.ribbonEventHandler.copy };
        handlerMap[IdEnum_1.IdEnum.CONTROL_FORMATPAINTER] = { handler: this.ribbonEventHandler.formatPainterOnClick };
        handlerMap[IdEnum_1.IdEnum.CONTROL_CLIPBOARD_SECTION_LAUNCHER] = { handler: this.ribbonEventHandler.clipboardSectionLAuncher };
        handlerMap[IdEnum_1.IdEnum.CONTROL_FONTFAMILY] = { handler: this.ribbonEventHandler.fontFamily };
        handlerMap[IdEnum_1.IdEnum.CONTROL_FONTSIZE] = { handler: this.ribbonEventHandler.fontSize };
        handlerMap[IdEnum_1.IdEnum.CONTROL_INCREASE_FONT] = { handler: this.ribbonEventHandler.increaseFont };
        handlerMap[IdEnum_1.IdEnum.CONTROL_DECREASE_FONT] = { handler: this.ribbonEventHandler.decreaseFont };
        handlerMap[IdEnum_1.IdEnum.CONTROL_BOLD] = { handler: this.ribbonEventHandler.bold };
        handlerMap[IdEnum_1.IdEnum.CONTROL_ITALIC] = { handler: this.ribbonEventHandler.italic };
        handlerMap[IdEnum_1.IdEnum.CONTROL_UNDERLINE] = { handler: this.ribbonEventHandler.underline };
        handlerMap[IdEnum_1.IdEnum.CONTROL_BORDER] = { handler: this.ribbonEventHandler.border };
        handlerMap[IdEnum_1.IdEnum.CONTROL_FILLCOLOR] = { handler: this.ribbonEventHandler.fillColor };
        handlerMap[IdEnum_1.IdEnum.CONTROL_FONTCOLOR] = { handler: this.ribbonEventHandler.fontColor };
        handlerMap[IdEnum_1.IdEnum.CONTROL_FONT_SECTION_LAUNCHER] = { handler: this.ribbonEventHandler.fontSectionLauncher };
        handlerMap[IdEnum_1.IdEnum.CONTROL_ALIGN_TOP] = { handler: this.ribbonEventHandler.vAlign };
        handlerMap[IdEnum_1.IdEnum.CONTROL_ALIGN_MIDDLE] = { handler: this.ribbonEventHandler.vAlign };
        handlerMap[IdEnum_1.IdEnum.CONTROL_ALIGN_BOTTOM] = { handler: this.ribbonEventHandler.vAlign };
        handlerMap[IdEnum_1.IdEnum.CONTROL_ALIGN_LEFT] = { handler: this.ribbonEventHandler.hAlign };
        handlerMap[IdEnum_1.IdEnum.CONTROL_ALIGN_CENTER] = { handler: this.ribbonEventHandler.hAlign };
        handlerMap[IdEnum_1.IdEnum.CONTROL_ALIGN_RIGHT] = { handler: this.ribbonEventHandler.hAlign };
        // handlerMap[IdEnum.CONTROL_ORIENTATION] = { handler: this.ribbonEventHandler.};
        handlerMap[IdEnum_1.IdEnum.CONTROL_DECREASE_INDENT] = { handler: this.ribbonEventHandler.decreaseIndent };
        handlerMap[IdEnum_1.IdEnum.CONTROL_INCREASE_INDENT] = { handler: this.ribbonEventHandler.increaseIndent };
        handlerMap[IdEnum_1.IdEnum.CONTROL_WRAPTEXT] = { handler: this.ribbonEventHandler.wrapText };
        handlerMap[IdEnum_1.IdEnum.CONTROL_MERGE_N_CENTER] = { handler: this.ribbonEventHandler.merge };
        handlerMap[IdEnum_1.IdEnum.CONTROL_ALIGNMENT_SECTION_LAUNCHER] = { handler: this.ribbonEventHandler.alignmentSectionLauncher };
        handlerMap[IdEnum_1.IdEnum.CONTROL_NUMBER_FORMAT] = { handler: this.ribbonEventHandler.numberFormat };
        handlerMap[IdEnum_1.IdEnum.CONTROL_ACCOUNTING_NUMBER_FORMAT] = { handler: this.ribbonEventHandler.accountingNumberFormat };
        handlerMap[IdEnum_1.IdEnum.CONTROL_PERCENT_STYLE] = { handler: this.ribbonEventHandler.percentStyle };
        handlerMap[IdEnum_1.IdEnum.CONTROL_COMMA_STYLE] = { handler: this.ribbonEventHandler.commaStyle };
        handlerMap[IdEnum_1.IdEnum.CONTROL_INCREASE_DECIMAL] = { handler: this.ribbonEventHandler.increaseDecimal };
        handlerMap[IdEnum_1.IdEnum.CONTROL_DECREASE_DECIMAL] = { handler: this.ribbonEventHandler.decreaseDecimal };
        handlerMap[IdEnum_1.IdEnum.CONTROL_NUMBER_SECTION_LAUNCHER] = { handler: this.ribbonEventHandler.numberSectionLauncher };
        handlerMap[IdEnum_1.IdEnum.CONTROL_INSERT] = { handler: this.ribbonEventHandler.insert };
        handlerMap[IdEnum_1.IdEnum.CONTROL_DELETE] = { handler: this.ribbonEventHandler.delete };
        handlerMap[IdEnum_1.IdEnum.CONTROL_AUTOSUM] = { handler: this.ribbonEventHandler.autosum };
        handlerMap[IdEnum_1.IdEnum.CONTROL_CLEAR] = { handler: this.ribbonEventHandler.clear };
        var that = this;
        InactiveControlsMap_1.inactiveControls.map(function (item) {
            handlerMap[item] = { handler: that.ribbonEventHandler.inactiveControl };
        });
        this.ribbonEventHandlerMap["click"] = handlerMap;
        //dblClick click handler
        var dblClickHandlerMap = {};
        dblClickHandlerMap[IdEnum_1.IdEnum.CONTROL_FORMATPAINTER] = { handler: this.ribbonEventHandler.formatPainterOnDblClick };
        this.ribbonEventHandlerMap["dblClick"] = dblClickHandlerMap;
        //menuOpener handler
        var menuOpenerHandlerMap = {};
        InactiveControlsMap_1.inactiveControlsWithDropdown.map(function (item) {
            menuOpenerHandlerMap[item] = { handler: that.ribbonEventHandler.inactiveControl };
        });
        this.ribbonEventHandlerMap["menuOpenerClick"] = menuOpenerHandlerMap;
    };
    RibbonWrapper.prototype.bindExternalEvents = function (externalEle) {
        var that = this;
        externalEle.on(Events_1.RibbonEvents.updateView, function (event, eventArgs) {
            for (var key in that.externalEventHandlerMap) {
                if (eventArgs[key] != undefined) {
                    var handlerObj = that.externalEventHandlerMap[key];
                    var handler = handlerObj.handler;
                    handler.apply(that.ribbonSetter, [eventArgs[key]]);
                }
            }
        });
    };
    RibbonWrapper.prototype.bindRibbonEvents = function (coreEle) {
        var that = this;
        coreEle.on(Events_1.RibbonCoreEvents.onRibbonControlClick, function (event, data) {
            var controlId = data.controlId;
            var handler = that.ribbonEventHandlerMap["click"][controlId];
            if (handler && handler.handler) {
                var eventTargetElementId = data.eventTargetElementId;
                handler.handler.apply(that.ribbonEventHandler, [controlId, eventTargetElementId]);
            }
        });
        coreEle.on(Events_1.RibbonCoreEvents.onRibbonControlDblClick, function (event, data) {
            var controlId = data.controlId;
            var handler = that.ribbonEventHandlerMap["dblClick"][controlId];
            if (handler && handler.handler) {
                var eventTargetElementId = data.eventTargetElementId;
                handler.handler.apply(that.ribbonEventHandler, [controlId, eventTargetElementId]);
            }
        });
        coreEle.on(Events_1.RibbonCoreEvents.onRibbonControlMenuOpenerClick, function (event, data) {
            var controlId = data.controlId;
            var handler = that.ribbonEventHandlerMap["menuOpenerClick"][controlId];
            if (handler && handler.handler) {
                var eventTargetElementId = data.eventTargetElementId;
                handler.handler.apply(that.ribbonEventHandler, [controlId, eventTargetElementId]);
            }
        });
        coreEle.on(Events_1.RibbonCoreEvents.onRibbonPinned, function (event, data) {
            var evtArgs = { height: data.height };
            that.broadcastEle.trigger(Events_1.RibbonEvents.onRibbonPinStateChange, [evtArgs]);
        });
        coreEle.on(Events_1.RibbonCoreEvents.onRibbonCollapsed, function (event, data) {
            var evtArgs = { height: data.height };
            that.broadcastEle.trigger(Events_1.RibbonEvents.onRibbonPinStateChange, [evtArgs]);
        });
        coreEle.on(Events_1.RibbonCoreEvents.onContainerResize, function (event, data) {
            var evtArgs = { width: data.width, height: data.height };
            that.broadcastEle.trigger(Events_1.RibbonEvents.onContainerSizeChange, [evtArgs]);
        });
        coreEle.on(Events_1.RibbonCoreEvents.onRibbonLoaded, function (event, data) {
            that.broadcastEle.trigger(Events_1.RibbonEvents.onRibbonLoaded, [{}]);
        });
        coreEle.on(Events_1.RibbonCoreEvents.onRibbonTabChange, function (event, data) {
            var evtArgs = {};
            var tabName = Util_1.Util.getIdFromTypeMap(data.activeTab, TabNameToIdMap_1.TabNameToIdMap);
            evtArgs[Events_1.RibbonCommands.ACTIVE_TAB] = tabName;
            that.broadcastEle.trigger(Events_1.RibbonEvents.onRibbonCommand, [evtArgs]);
        });
    };
    RibbonWrapper.prototype.handleContainerResize = function () {
        this.ribbonCore.handleContainerResize();
    };
    RibbonWrapper.prototype.getRibbonJSon = function (appropriateJsonFile) {
        var configJson = undefined;
        switch (appropriateJsonFile) {
            case Enums_1.RibbonTypes.ribbonConfig_L:
                configJson = configJson_msHomeTab_l_1.MsOfficeConfigJson_l;
                break;
            case Enums_1.RibbonTypes.ribbonConfig_M:
                configJson = configJson_msHomeTab_m_1.MsOfficeConfigJson_m;
                break;
            case Enums_1.RibbonTypes.ribbonConfig_S:
            default:
                configJson = configJson_msHomeTab_1.MsOfficeConfigJson;
                break;
        }
        return configJson;
    };
    RibbonWrapper.prototype.getUpdatedConfig = function (configJson, imageRootFolderPath) {
        if (imageRootFolderPath && imageRootFolderPath != "") {
            configJson.layoutData = configJson.layoutData || {};
            configJson.layoutData.imageBaseFolder = imageRootFolderPath;
        }
        return configJson;
    };
    return RibbonWrapper;
}()); //end of class
exports.RibbonWrapper = RibbonWrapper;


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Events_1 = __webpack_require__(101);
var IdEnum_1 = __webpack_require__(12);
var Constants_1 = __webpack_require__(102);
var ToolOptionEnum_1 = __webpack_require__(30);
var IdToOptionTypeMap_1 = __webpack_require__(99);
var MapperHelper_1 = __webpack_require__(107);
var Util_1 = __webpack_require__(31);
var RibbonEventHandler = /** @class */ (function () {
    function RibbonEventHandler(ribbonCoreObj, broadcastEle, ribbonSetter) {
        this.ribbonSetter = ribbonSetter;
        this.broadcastEle = broadcastEle;
        this.ribbonCore = ribbonCoreObj;
    }
    RibbonEventHandler.prototype.paste = function (controlId, eventTargetElementId) {
        var splitIds = eventTargetElementId.split("|");
        var clickedId = splitIds[splitIds.length - 1];
        var evtArgs;
        if (clickedId == IdEnum_1.IdEnum.CONTROL_PASTE) {
            evtArgs = ToolOptionEnum_1.PasteType.paste;
        }
        else {
            evtArgs = IdToOptionTypeMap_1.IdToOptionTypeMap.IdToPasteType[clickedId];
        }
        this.triggerRibbonEvent(Events_1.RibbonCommands.PASTE, evtArgs);
    };
    RibbonEventHandler.prototype.cut = function (controlId, eventTargetElementId) {
        this.raiseButtonCmd(Events_1.RibbonCommands.CUT);
    };
    RibbonEventHandler.prototype.copy = function (controlId, eventTargetElementId) {
        var splitIds = eventTargetElementId.split("|");
        var clickedId = splitIds[splitIds.length - 1];
        var evtArgs;
        if (clickedId == IdEnum_1.IdEnum.CONTROL_COPY) {
            evtArgs = ToolOptionEnum_1.CopyType.copy;
        }
        else {
            evtArgs = IdToOptionTypeMap_1.IdToOptionTypeMap.IdToCopyType[clickedId];
        }
        this.triggerRibbonEvent(Events_1.RibbonCommands.COPY, evtArgs);
    };
    RibbonEventHandler.prototype.formatPainterOnClick = function (controlId, eventTargetElementId) {
        var controlStateObj = this.ribbonCore.getControlState(controlId);
        var bSelected = Util_1.Util.getControlToggleState(controlStateObj);
        var evtArgs = bSelected ? ToolOptionEnum_1.FormatPainterType.click : ToolOptionEnum_1.FormatPainterType.unclick;
        this.triggerRibbonEvent(Events_1.RibbonCommands.FORMATPAINTER, evtArgs);
    };
    RibbonEventHandler.prototype.formatPainterOnDblClick = function (controlId, eventTargetElementId) {
        var controlStateObj = this.ribbonCore.getControlState(controlId);
        var bSelected = Util_1.Util.getControlToggleState(controlStateObj);
        var evtArgs = bSelected ? ToolOptionEnum_1.FormatPainterType.double_click : ToolOptionEnum_1.FormatPainterType.unclick;
        this.triggerRibbonEvent(Events_1.RibbonCommands.FORMATPAINTER, evtArgs);
    };
    RibbonEventHandler.prototype.clipboardSectionLAuncher = function (controlId, eventTargetElementId) {
        this.raiseButtonCmd(Events_1.RibbonCommands.CLIPBOARD_SECTION_LAUNCHER);
    };
    RibbonEventHandler.prototype.fontFamily = function (controlId, eventTargetElementId) {
        var controlStateObj = this.ribbonCore.getControlState(controlId);
        if (controlStateObj && controlStateObj.stateData) {
            var evtArgs = IdToOptionTypeMap_1.IdToOptionTypeMap.IdToFontFamilyType[Util_1.Util.getControlValue(controlStateObj, "selectedItemId")];
            this.triggerRibbonEvent(Events_1.RibbonCommands.FONT_FAMILY, evtArgs);
        }
    };
    RibbonEventHandler.prototype.fontSize = function (controlId, eventTargetElementId) {
        var controlStateObj = this.ribbonCore.getControlState(controlId);
        if (controlStateObj && controlStateObj.stateData) {
            var evtArgs = IdToOptionTypeMap_1.IdToOptionTypeMap.IdToFontSizeType[Util_1.Util.getControlValue(controlStateObj, "selectedItemId")];
            this.triggerRibbonEvent(Events_1.RibbonCommands.FONT_SIZE, evtArgs);
        }
    };
    RibbonEventHandler.prototype.increaseFont = function (controlId, eventTargetElementId) {
        this.handleFontSizeChange("INCREASE");
    };
    RibbonEventHandler.prototype.decreaseFont = function (controlId, eventTargetElementId) {
        this.handleFontSizeChange("DECREASE");
    };
    RibbonEventHandler.prototype.bold = function (controlId, eventTargetElementId) {
        this.raiseToggleButtonCmd(controlId, Events_1.RibbonCommands.BOLD);
    };
    RibbonEventHandler.prototype.italic = function (controlId, eventTargetElementId) {
        this.raiseToggleButtonCmd(controlId, Events_1.RibbonCommands.ITALIC);
    };
    RibbonEventHandler.prototype.underline = function (controlId, eventTargetElementId) {
        var controlStateObj = this.ribbonCore.getControlState(controlId);
        var evtArgs = MapperHelper_1.MapperHelper.getUnderlineToolState(eventTargetElementId, controlStateObj);
        this.triggerRibbonEvent(Events_1.RibbonCommands.UNDERLINE, evtArgs);
    };
    RibbonEventHandler.prototype.border = function (controlId, eventTargetElementId) {
        var controlStateObj = this.ribbonCore.getControlState(controlId);
        var splitIds = eventTargetElementId.split("|");
        var clickedId = splitIds[splitIds.length - 1];
        var evtArgs;
        if (clickedId == IdEnum_1.IdEnum.ITEM_BORDER_MORE_BORDERS) {
            evtArgs = Constants_1.Constants.defaultCommandArgs;
            this.triggerRibbonEvent(Events_1.RibbonCommands.MORE_BORDER, evtArgs);
        }
        else {
            var processedBorderState = MapperHelper_1.MapperHelper.getBorderToolState(eventTargetElementId, controlStateObj);
            if (processedBorderState && processedBorderState.value != undefined) {
                evtArgs = processedBorderState;
                this.triggerRibbonEvent(Events_1.RibbonCommands.BORDER_MODE, evtArgs);
            }
            else {
                evtArgs = processedBorderState;
                this.triggerRibbonEvent(Events_1.RibbonCommands.BORDER, evtArgs);
            }
        }
    };
    RibbonEventHandler.prototype.fillColor = function (controlId, eventTargetElementId) {
        var controlStateObj = this.ribbonCore.getControlState(controlId);
        var splitIds = eventTargetElementId.split("|");
        var clickedId = splitIds[splitIds.length - 1];
        var evtArgs;
        if (clickedId == ToolOptionEnum_1.ColorPickerItemType.MORE_COLOR) {
            evtArgs = Constants_1.Constants.defaultCommandArgs;
            this.triggerRibbonEvent(Events_1.RibbonCommands.MORE_FILL_COLOR, evtArgs);
        }
        else {
            evtArgs = {
                color: Util_1.Util.getControlValue(controlStateObj, Constants_1.StateDataFields.selectedValue),
                updateControlIcon: Util_1.Util.getControlValue(controlStateObj, "updateColorStrip")
            };
            this.triggerRibbonEvent(Events_1.RibbonCommands.FILL_COLOR, evtArgs);
        }
    };
    RibbonEventHandler.prototype.fontColor = function (controlId, eventTargetElementId) {
        var controlStateObj = this.ribbonCore.getControlState(controlId);
        var splitIds = eventTargetElementId.split("|");
        var clickedId = splitIds[splitIds.length - 1];
        var evtArgs;
        if (clickedId == ToolOptionEnum_1.ColorPickerItemType.MORE_COLOR) {
            evtArgs = Constants_1.Constants.defaultCommandArgs;
            this.triggerRibbonEvent(Events_1.RibbonCommands.MORE_FONT_COLOR, evtArgs);
        }
        else {
            evtArgs = {
                color: Util_1.Util.getControlValue(controlStateObj, Constants_1.StateDataFields.selectedValue),
                updateControlIcon: Util_1.Util.getControlValue(controlStateObj, "updateColorStrip")
            };
            this.triggerRibbonEvent(Events_1.RibbonCommands.FONT_COLOR, evtArgs);
        }
    };
    RibbonEventHandler.prototype.fontSectionLauncher = function (controlId, eventTargetElementId) {
        this.raiseButtonCmd(Events_1.RibbonCommands.FONT_SECTION_LAUNCHER);
    };
    RibbonEventHandler.prototype.vAlign = function (controlId, eventTargetElementId) {
        var controlStateObj = this.ribbonCore.getControlState(controlId);
        var vAlignOption = IdToOptionTypeMap_1.IdToOptionTypeMap.ControlIdToVAlignType[controlId];
        var evtArgs = (Util_1.Util.getControlToggleState(controlStateObj) == true)
            ? vAlignOption : ToolOptionEnum_1.VAlignType.none;
        this.ribbonSetter.verticalAlign(evtArgs);
        this.triggerRibbonEvent(Events_1.RibbonCommands.VALIGN, evtArgs);
    };
    RibbonEventHandler.prototype.hAlign = function (controlId, eventTargetElementId) {
        var controlStateObj = this.ribbonCore.getControlState(controlId);
        var hAlignOption = IdToOptionTypeMap_1.IdToOptionTypeMap.ControlIdToHAlignType[controlId];
        var evtArgs = (Util_1.Util.getControlToggleState(controlStateObj) == true)
            ? hAlignOption : ToolOptionEnum_1.HAlignType.none;
        this.ribbonSetter.textAlign(evtArgs);
        this.triggerRibbonEvent(Events_1.RibbonCommands.HALIGN, evtArgs);
    };
    RibbonEventHandler.prototype.decreaseIndent = function (controlId, eventTargetElementId) {
        this.triggerRibbonEvent(Events_1.RibbonCommands.INDENT, ToolOptionEnum_1.IndentActionType.decrease);
    };
    RibbonEventHandler.prototype.increaseIndent = function (controlId, eventTargetElementId) {
        this.triggerRibbonEvent(Events_1.RibbonCommands.INDENT, ToolOptionEnum_1.IndentActionType.increase);
    };
    RibbonEventHandler.prototype.numberSectionLauncher = function (controlId, eventTargetElementId) {
        this.raiseButtonCmd(Events_1.RibbonCommands.NUMBER_SECTION_LAUNCHER);
    };
    RibbonEventHandler.prototype.wrapText = function (controlId, eventTargetElementId) {
        this.raiseToggleButtonCmd(controlId, Events_1.RibbonCommands.WRAP_TEXT);
    };
    RibbonEventHandler.prototype.merge = function (controlId, eventTargetElementId) {
        var controlStateObj = this.ribbonCore.getControlState(controlId);
        var splitIds = eventTargetElementId.split("|");
        var clickedId = splitIds[splitIds.length - 1];
        switch (clickedId) {
            case IdEnum_1.IdEnum.CONTROL_MERGE_N_CENTER:
            case IdEnum_1.IdEnum.ITEM_MERGE_N_CENTER:
                var evtArgs = (Util_1.Util.getControlToggleState(controlStateObj) == true)
                    ? ToolOptionEnum_1.MergeActionType.merge_and_center : ToolOptionEnum_1.MergeActionType.unmerge_and_reset_alignment;
                this.triggerRibbonEvent(Events_1.RibbonCommands.MERGE, evtArgs);
                break;
            case IdEnum_1.IdEnum.ITEM_MERGE_ACROSS:
                this.triggerRibbonEvent(Events_1.RibbonCommands.MERGE, ToolOptionEnum_1.MergeActionType.merge_across);
                break;
            case IdEnum_1.IdEnum.ITEM_MERGE_CELLS:
                this.triggerRibbonEvent(Events_1.RibbonCommands.MERGE, ToolOptionEnum_1.MergeActionType.merge_cells);
                break;
            case IdEnum_1.IdEnum.ITEM_UNMERGE_CELLS:
                this.triggerRibbonEvent(Events_1.RibbonCommands.MERGE, ToolOptionEnum_1.MergeActionType.unmerge);
                break;
        }
    };
    RibbonEventHandler.prototype.alignmentSectionLauncher = function (controlId, eventTargetElementId) {
        this.raiseButtonCmd(Events_1.RibbonCommands.ALIGNMENT_SECTION_LAUNCHER);
    };
    RibbonEventHandler.prototype.numberFormat = function (controlId, eventTargetElementId) {
        var controlStateObj = this.ribbonCore.getControlState(controlId);
        if (controlStateObj && controlStateObj.stateData) {
            var format = IdToOptionTypeMap_1.IdToOptionTypeMap.IdToNumberFormatType[Util_1.Util.getControlValue(controlStateObj, "selectedItemId")];
            var evtArgs = {
                type: format,
                value: this.getNumberFormatDetail(controlId, format)
            };
            this.triggerRibbonEvent(Events_1.RibbonCommands.NUMBER_FORMAT, evtArgs);
        }
    };
    RibbonEventHandler.prototype.accountingNumberFormat = function (controlId, eventTargetElementId) {
        var evtArgs = {
            type: ToolOptionEnum_1.NumberFormatType.accounting,
            value: ToolOptionEnum_1.AccountingNumberFormatDetailType.USD
        };
        this.triggerRibbonEvent(Events_1.RibbonCommands.NUMBER_FORMAT, evtArgs);
    };
    RibbonEventHandler.prototype.percentStyle = function (controlId, eventTargetElementId) {
        var evtArgs = {
            type: ToolOptionEnum_1.NumberFormatType.accounting,
            value: ToolOptionEnum_1.AccountingNumberFormatDetailType.percentage
        };
        this.triggerRibbonEvent(Events_1.RibbonCommands.NUMBER_FORMAT, evtArgs);
    };
    RibbonEventHandler.prototype.commaStyle = function (controlId, eventTargetElementId) {
        var evtArgs = {
            type: ToolOptionEnum_1.NumberFormatType.accounting,
            value: ToolOptionEnum_1.AccountingNumberFormatDetailType.comma
        };
        this.triggerRibbonEvent(Events_1.RibbonCommands.NUMBER_FORMAT, evtArgs);
    };
    RibbonEventHandler.prototype.increaseDecimal = function (controlId, eventTargetElementId) {
        var evtArgs = {
            type: ToolOptionEnum_1.NumberFormatType.decimal,
            value: ToolOptionEnum_1.DecimalNumberFormatDetailType.increase
        };
        this.triggerRibbonEvent(Events_1.RibbonCommands.NUMBER_FORMAT, evtArgs);
    };
    RibbonEventHandler.prototype.decreaseDecimal = function (controlId, eventTargetElementId) {
        var evtArgs = {
            type: ToolOptionEnum_1.NumberFormatType.decimal,
            value: ToolOptionEnum_1.DecimalNumberFormatDetailType.decrease
        };
        this.triggerRibbonEvent(Events_1.RibbonCommands.NUMBER_FORMAT, evtArgs);
    };
    RibbonEventHandler.prototype.insert = function (controlId, eventTargetElementId) {
        var splitIds = eventTargetElementId.split("|");
        var clickedId = splitIds[splitIds.length - 1];
        var evtArgs;
        if (clickedId == IdEnum_1.IdEnum.CONTROL_INSERT) {
            evtArgs = ToolOptionEnum_1.InsertActionType.insert_cells;
        }
        else {
            evtArgs = IdToOptionTypeMap_1.IdToOptionTypeMap.IdToInsertType[clickedId];
        }
        this.triggerRibbonEvent(Events_1.RibbonCommands.INSERT, evtArgs);
    };
    RibbonEventHandler.prototype.delete = function (controlId, eventTargetElementId) {
        var splitIds = eventTargetElementId.split("|");
        var clickedId = splitIds[splitIds.length - 1];
        var evtArgs;
        if (clickedId == IdEnum_1.IdEnum.CONTROL_DELETE) {
            evtArgs = ToolOptionEnum_1.DeleteActionType.delete_cells;
        }
        else {
            evtArgs = IdToOptionTypeMap_1.IdToOptionTypeMap.IdToDeleteType[clickedId];
        }
        this.triggerRibbonEvent(Events_1.RibbonCommands.DELETE, evtArgs);
    };
    RibbonEventHandler.prototype.autosum = function (controlId, eventTargetElementId) {
        var splitIds = eventTargetElementId.split("|");
        var clickedId = splitIds[splitIds.length - 1];
        var evtArgs;
        if (clickedId == IdEnum_1.IdEnum.CONTROL_AUTOSUM) {
            evtArgs = ToolOptionEnum_1.AutosumActionType.sum;
        }
        else {
            evtArgs = IdToOptionTypeMap_1.IdToOptionTypeMap.IdToAutosumType[clickedId];
        }
        this.triggerRibbonEvent(Events_1.RibbonCommands.FORMULA, evtArgs);
    };
    RibbonEventHandler.prototype.clear = function (controlId, eventTargetElementId) {
        var splitIds = eventTargetElementId.split("|");
        var clickedId = splitIds[splitIds.length - 1];
        var evtArgs = IdToOptionTypeMap_1.IdToOptionTypeMap.IdToClearType[clickedId];
        this.triggerRibbonEvent(Events_1.RibbonCommands.CLEAR, evtArgs);
    };
    RibbonEventHandler.prototype.getNumberFormatDetail = function (controlId, format) {
        if (format == ToolOptionEnum_1.NumberFormatType.accounting) {
            return ToolOptionEnum_1.AccountingNumberFormatDetailType.USD;
        }
        return undefined;
    };
    RibbonEventHandler.prototype.inactiveControl = function (controlId, eventTargetElementId) {
        this.raiseButtonCmd(Events_1.RibbonCommands.INACTIVE_CONTROL);
    };
    RibbonEventHandler.prototype.raiseButtonCmd = function (cmd) {
        this.triggerRibbonEvent(cmd, Constants_1.Constants.defaultCommandArgs);
    };
    RibbonEventHandler.prototype.raiseToggleButtonCmd = function (controlId, cmd) {
        var controlStateObj = this.ribbonCore.getControlState(controlId);
        var evtArgs = Util_1.Util.getControlToggleState(controlStateObj);
        this.triggerRibbonEvent(cmd, evtArgs);
    };
    RibbonEventHandler.prototype.handleFontSizeChange = function (dir) {
        var fontSizeState = this.ribbonCore.getControlState(IdEnum_1.IdEnum.CONTROL_FONTSIZE);
        if (fontSizeState && fontSizeState.stateData) {
            var itemId = fontSizeState.stateData["selectedItemId"];
            if (itemId) {
                var index = IdToOptionTypeMap_1.IdToOptionTypeMap.FontSizeOrderedList.indexOf(itemId);
                var reqIndex = index;
                if (dir == "INCREASE") {
                    reqIndex = (index < (IdToOptionTypeMap_1.IdToOptionTypeMap.FontSizeOrderedList.length - 1)) ? (index + 1) : index;
                }
                else if (dir == "DECREASE") {
                    reqIndex = (index > 0) ? (index - 1) : index;
                }
                var reqItemId = IdToOptionTypeMap_1.IdToOptionTypeMap.FontSizeOrderedList[reqIndex];
                var evtArgs = IdToOptionTypeMap_1.IdToOptionTypeMap.IdToFontSizeType[reqItemId];
                this.ribbonSetter.fontSize(evtArgs);
                this.triggerRibbonEvent(Events_1.RibbonCommands.FONT_SIZE, evtArgs);
            }
        }
    };
    RibbonEventHandler.prototype.triggerRibbonEvent = function (cmd, cmdArgs) {
        var evtArgs = {};
        evtArgs[cmd] = cmdArgs;
        this.broadcastEle.trigger(Events_1.RibbonEvents.onRibbonCommand, [evtArgs]);
    };
    return RibbonEventHandler;
}()); //end of class
exports.default = RibbonEventHandler;


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var IdToOptionTypeMap_1 = __webpack_require__(99);
var ToolOptionEnum_1 = __webpack_require__(30);
var IdEnum_1 = __webpack_require__(12);
var Util_1 = __webpack_require__(31);
var MapperHelper = /** @class */ (function () {
    function MapperHelper() {
    }
    MapperHelper.getUnderlineToolState = function (eventTargetElementId, controlStateObj) {
        var IdToUnderlineTypeMap = {};
        IdToUnderlineTypeMap[IdEnum_1.IdEnum.ITEM_UNDERLINE_SINGLE] = ToolOptionEnum_1.UnderlineType.single;
        IdToUnderlineTypeMap[IdEnum_1.IdEnum.ITEM_UNDERLINE_DOUBLE] = ToolOptionEnum_1.UnderlineType.double;
        var underlineType = undefined;
        var toggleState = undefined;
        var splitIds = eventTargetElementId.split("|");
        var leafItemId = splitIds[splitIds.length - 1];
        if (leafItemId == IdEnum_1.IdEnum.CONTROL_UNDERLINE) {
            var selectedItemId = controlStateObj.stateData ? controlStateObj.stateData["selectedItem"] : undefined;
            if (!selectedItemId) {
                return; //error
            }
            var splitIds2 = selectedItemId.split("|");
            var leafItemId2 = splitIds2[splitIds2.length - 1];
            underlineType = IdToUnderlineTypeMap[leafItemId2];
            toggleState = Util_1.Util.getControlToggleState(controlStateObj);
        }
        else {
            underlineType = IdToUnderlineTypeMap[leafItemId];
            var itemObj = Util_1.Util.getItemStateData(eventTargetElementId, controlStateObj);
            toggleState = Util_1.Util.getControlToggleState(itemObj);
        }
        var data = toggleState ? underlineType : ToolOptionEnum_1.UnderlineType.none;
        return data;
    };
    MapperHelper.getBorderToolState = function (eventTargetElementId, controlStateObj) {
        var borderWithModeItemIDs = [
            IdEnum_1.IdEnum.ITEM_BORDER_DRAW_BORDER,
            IdEnum_1.IdEnum.ITEM_BORDER_DRAW_BORDER_GRID,
            IdEnum_1.IdEnum.ITEM_BORDER_ERASE_BORDER
        ];
        var colorItemIDs = [
            IdEnum_1.IdEnum.ITEM_BORDER_LINECOLOR_COLORGRID
        ];
        var lineStyleIDs = [
            IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE0,
            IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE1,
            IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE2,
            IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE3,
            IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE4,
            IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE5,
            IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE6,
            IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE7,
            IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE8,
            IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE9,
            IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE10,
            IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE11,
            IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE12,
            IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE_TYPE13
        ];
        var customStyleIDs = [
            IdEnum_1.IdEnum.ITEM_BORDER_THICK_OUTSIDE_BORDERS,
            IdEnum_1.IdEnum.ITEM_BORDER_BOTTOM_DOUBLE_BORDER,
            IdEnum_1.IdEnum.ITEM_BORDER_THICK_BOTTOM_BORDER,
            IdEnum_1.IdEnum.ITEM_BORDER_TOP_N_BOTTOM_BORDER,
            IdEnum_1.IdEnum.ITEM_BORDER_TOP_N_THICK_BOTTOM_BORDER,
            IdEnum_1.IdEnum.ITEM_BORDER_TOP_N_DOUBLE_BOTTOM_BORDER
        ];
        var splitIds = eventTargetElementId.split("|");
        var leafItemId = splitIds[splitIds.length - 1];
        var toggleState = undefined;
        var data = {};
        var selectedItemId = controlStateObj.stateData ? controlStateObj.stateData["selectedItem"] : undefined;
        if (!selectedItemId) {
            return; //todo:
        }
        var splitIds2 = selectedItemId.split("|");
        var leafItemId2 = splitIds2[splitIds2.length - 1];
        if (leafItemId == IdEnum_1.IdEnum.CONTROL_BORDER) {
            data["name"] = IdToOptionTypeMap_1.IdToOptionTypeMap.IdToBorderType[leafItemId2];
            if (borderWithModeItemIDs.indexOf(leafItemId2) > -1) {
                var itemObj = Util_1.Util.getItemStateData(selectedItemId, controlStateObj);
                toggleState = Util_1.Util.getControlToggleState(itemObj);
                data["value"] = toggleState ? ToolOptionEnum_1.BorderModeType.begin : ToolOptionEnum_1.BorderModeType.end;
            }
        }
        else {
            data["name"] = IdToOptionTypeMap_1.IdToOptionTypeMap.IdToBorderType[leafItemId]
                ? IdToOptionTypeMap_1.IdToOptionTypeMap.IdToBorderType[leafItemId] : undefined;
            var itemObj = Util_1.Util.getItemStateData(eventTargetElementId, controlStateObj);
            toggleState = Util_1.Util.getControlToggleState(itemObj);
            if (lineStyleIDs.concat([colorItemIDs]).indexOf(leafItemId) > -1) {
                data["value"] = ToolOptionEnum_1.BorderModeType.begin;
            }
            else if (borderWithModeItemIDs.indexOf(leafItemId) > -1) {
                var itemObj_1 = Util_1.Util.getItemStateData(eventTargetElementId, controlStateObj);
                toggleState = Util_1.Util.getControlToggleState(itemObj_1);
                data["value"] = toggleState ? ToolOptionEnum_1.BorderModeType.begin : ToolOptionEnum_1.BorderModeType.end;
            }
        }
        var colorGridFullId = [IdEnum_1.IdEnum.CONTROL_BORDER,
            IdEnum_1.IdEnum.ITEM_BORDER_LINECOLOR,
            IdEnum_1.IdEnum.ITEM_BORDER_LINECOLOR_COLORGRID].join("|");
        var colorItemStateObj = Util_1.Util.getItemStateData(colorGridFullId, controlStateObj);
        var color = (colorItemStateObj && colorItemStateObj.stateData && colorItemStateObj.stateData.selectedValue);
        data["color"] = color ? color : "automatic";
        data["lineColor"] = data["color"];
        var lineStyleRootFullId = [IdEnum_1.IdEnum.CONTROL_BORDER,
            IdEnum_1.IdEnum.ITEM_BORDER_LINESTYLE].join("|");
        var lineStyleArrObj = Util_1.Util.getItemStateData(lineStyleRootFullId, controlStateObj);
        if (lineStyleArrObj && lineStyleArrObj.items && lineStyleArrObj.items.length) {
            var selectedLineStyleId_1 = undefined;
            lineStyleArrObj.items.map(function (item, i) {
                if (item && item.stateData && item.stateData.selected == true) {
                    selectedLineStyleId_1 = item.id;
                }
            });
            data["lineStyle"] = IdToOptionTypeMap_1.IdToOptionTypeMap.IdToLineStyleType[selectedLineStyleId_1]
                ? IdToOptionTypeMap_1.IdToOptionTypeMap.IdToLineStyleType[selectedLineStyleId_1] : ToolOptionEnum_1.BorderLineStyleType.type1;
        }
        if (customStyleIDs.indexOf(leafItemId) > -1) {
            data["style"] = IdToOptionTypeMap_1.IdToOptionTypeMap.ItemToCustomStyle[leafItemId]
                ? IdToOptionTypeMap_1.IdToOptionTypeMap.ItemToCustomStyle[leafItemId] : data["lineStyle"];
        }
        else {
            data["style"] = data["lineStyle"];
        }
        return data;
    };
    return MapperHelper;
}()); //end of class
exports.MapperHelper = MapperHelper;


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var IdEnum_1 = __webpack_require__(12);
var NamesEnums_1 = __webpack_require__(100);
var TabNameToIdMap_1 = __webpack_require__(103);
var ControlNameToIdMap_1 = __webpack_require__(109);
var ToolOptionEnum_1 = __webpack_require__(30);
var IdToOptionTypeMap_1 = __webpack_require__(99);
var IdToControlTypeMap_1 = __webpack_require__(110);
var Util_1 = __webpack_require__(31);
var RibbonSetter = /** @class */ (function () {
    function RibbonSetter(ribbonCoreObj, broadcastEle) {
        this.broadcastEle = broadcastEle;
        this.ribbonCore = ribbonCoreObj;
    }
    RibbonSetter.prototype.formatPainter = function (value) {
        if (!Util_1.Util.inputCheckString(value)) {
            return;
        }
        if (!Util_1.Util.inputCheckInEnum(value, ToolOptionEnum_1.FormatPainterType)) {
            return;
        }
        var bToggle = undefined;
        if (ToolOptionEnum_1.FormatPainterType.click || value == ToolOptionEnum_1.FormatPainterType.double_click) {
            bToggle = true;
        }
        else if (ToolOptionEnum_1.FormatPainterType.unclick) {
            bToggle = false;
        }
        else {
            return;
        }
        var controlType = IdToControlTypeMap_1.IdToControlTypeMap[NamesEnums_1.ControlNames.formatPainter];
        var controlState = Util_1.Util.getStateToToggle(IdEnum_1.IdEnum.CONTROL_FORMATPAINTER, controlType, bToggle);
        this.ribbonCore.setControlState(IdEnum_1.IdEnum.CONTROL_FORMATPAINTER, controlType, controlState);
    };
    RibbonSetter.prototype.fontFamily = function (value) {
        if (!Util_1.Util.inputCheckString(value)) {
            return;
        }
        var itemId = Util_1.Util.getIdFromTypeMap(value, IdToOptionTypeMap_1.IdToOptionTypeMap.IdToFontFamilyType);
        if (itemId == undefined) {
            return;
        }
        var controlType = "";
        var controlState = {
            id: IdEnum_1.IdEnum.CONTROL_FONTFAMILY,
            type: controlType,
            stateData: {
                selectedItemId: itemId,
                inputFieldValue: value
            },
            visData: {
                enable: true,
                visible: true
            }
        };
        this.ribbonCore.setControlState(IdEnum_1.IdEnum.CONTROL_FONTFAMILY, controlType, controlState);
    };
    RibbonSetter.prototype.fontSize = function (value) {
        if (!Util_1.Util.inputCheckNumber(value)) {
            return;
        }
        var itemId = Util_1.Util.getIdFromTypeMap(value, IdToOptionTypeMap_1.IdToOptionTypeMap.IdToFontSizeType);
        if (itemId == undefined) {
            return;
        }
        var controlType = "";
        var controlState = {
            id: IdEnum_1.IdEnum.CONTROL_FONTSIZE,
            type: controlType,
            stateData: {
                selectedItemId: itemId,
                inputFieldValue: value.toString()
            },
            visData: {
                enable: true,
                visible: true
            }
        };
        this.ribbonCore.setControlState(IdEnum_1.IdEnum.CONTROL_FONTSIZE, controlType, controlState);
    };
    RibbonSetter.prototype.bold = function (value) {
        if (!Util_1.Util.inputCheckBoolean(value)) {
            return;
        }
        var controlType = IdToControlTypeMap_1.IdToControlTypeMap[NamesEnums_1.ControlNames.bold];
        var controlState = Util_1.Util.getStateToToggle(IdEnum_1.IdEnum.CONTROL_BOLD, controlType, value);
        this.ribbonCore.setControlState(IdEnum_1.IdEnum.CONTROL_BOLD, controlType, controlState);
    };
    RibbonSetter.prototype.italic = function (value) {
        if (!Util_1.Util.inputCheckBoolean(value)) {
            return;
        }
        var controlType = IdToControlTypeMap_1.IdToControlTypeMap[NamesEnums_1.ControlNames.italic];
        var controlState = Util_1.Util.getStateToToggle(IdEnum_1.IdEnum.CONTROL_ITALIC, controlType, value);
        this.ribbonCore.setControlState(IdEnum_1.IdEnum.CONTROL_ITALIC, controlType, controlState);
    };
    RibbonSetter.prototype.underline = function (value) {
        if (!Util_1.Util.inputCheckString(value)) {
            return;
        }
        if (!Util_1.Util.inputCheckInEnum(value, ToolOptionEnum_1.UnderlineType)) {
            return;
        }
        var controlId = IdEnum_1.IdEnum.CONTROL_UNDERLINE;
        var controlStateObj = this.ribbonCore.getControlState(controlId);
        var selectedItem = controlStateObj.stateData.selectedItem;
        var isIconSelected = false;
        if (selectedItem) {
            var splitIds = selectedItem.split("|");
            var leafItemId = splitIds[splitIds.length - 1];
            if ((leafItemId == IdEnum_1.IdEnum.ITEM_UNDERLINE_SINGLE && value == ToolOptionEnum_1.UnderlineType.single)
                || (leafItemId == IdEnum_1.IdEnum.ITEM_UNDERLINE_DOUBLE && value == ToolOptionEnum_1.UnderlineType.double)) {
                isIconSelected = true;
            }
        }
        var controlState = {
            id: IdEnum_1.IdEnum.CONTROL_UNDERLINE,
            stateData: {
                selected: isIconSelected
            },
            items: [{
                    id: IdEnum_1.IdEnum.ITEM_UNDERLINE_SINGLE,
                    stateData: {
                        selected: (value == ToolOptionEnum_1.UnderlineType.single) ? true : false
                    }
                },
                {
                    id: IdEnum_1.IdEnum.ITEM_UNDERLINE_DOUBLE,
                    stateData: {
                        selected: (value == ToolOptionEnum_1.UnderlineType.double) ? true : false
                    }
                }]
        };
        var controlType = "";
        this.ribbonCore.setControlState(controlId, controlType, controlState);
    };
    RibbonSetter.prototype.borderMode = function (value) {
        //todo: validation
        if (value && value.value == ToolOptionEnum_1.BorderModeType.end) {
            var controlId = IdEnum_1.IdEnum.CONTROL_BORDER;
            var controlStateObj_1 = this.ribbonCore.getControlState(controlId);
            var selectedItem = controlStateObj_1.stateData.selectedItem;
            var splitIds = selectedItem.split("|");
            var leafItemId = splitIds[splitIds.length - 1];
            var borderWithModeItemIDs = [
                IdEnum_1.IdEnum.ITEM_BORDER_DRAW_BORDER,
                IdEnum_1.IdEnum.ITEM_BORDER_DRAW_BORDER_GRID,
                IdEnum_1.IdEnum.ITEM_BORDER_ERASE_BORDER
            ];
            var controlState_1 = {};
            controlState_1["id"] = IdEnum_1.IdEnum.CONTROL_BORDER;
            if (borderWithModeItemIDs.indexOf(leafItemId) > -1) {
                var itemObj = Util_1.Util.getItemStateData(selectedItem, controlStateObj_1);
                var toggleState = Util_1.Util.getControlToggleState(itemObj);
                if (toggleState) {
                    controlState_1["stateData"] = {
                        selected: false
                    };
                }
            }
            var that = this;
            borderWithModeItemIDs.map(function (item, i) {
                var fullItemId = (IdEnum_1.IdEnum.CONTROL_BORDER + "|" + item);
                var itemObj = Util_1.Util.getItemStateData(fullItemId, controlStateObj_1);
                var toggleState = Util_1.Util.getControlToggleState(itemObj);
                if (toggleState) {
                    var bToggle = false;
                    controlState_1 = Util_1.Util.toggleSomeItemState(fullItemId, bToggle, controlState_1);
                }
            });
            var controlType = "";
            this.ribbonCore.setControlState(controlId, controlType, controlState_1);
        }
    };
    RibbonSetter.prototype.fillColor = function (value) {
        if (!(value && value.color)) {
            return;
        }
        if (!Util_1.Util.inputCheckString(value.color)) {
            return;
        }
        if (value.updateControlIcon && !Util_1.Util.inputCheckBoolean(value.updateControlIcon)) {
            return;
        }
        var controlType = IdToControlTypeMap_1.IdToControlTypeMap[NamesEnums_1.ControlNames.fill_color];
        var controlState = Util_1.Util.getStateToColor(IdEnum_1.IdEnum.CONTROL_FILLCOLOR, controlType, value);
        this.ribbonCore.setControlState(IdEnum_1.IdEnum.CONTROL_FILLCOLOR, controlType, controlState);
    };
    RibbonSetter.prototype.fontColor = function (value) {
        if (!(value && value.color)) {
            return;
        }
        if (!Util_1.Util.inputCheckString(value.color)) {
            return;
        }
        if (value.updateControlIcon && !Util_1.Util.inputCheckBoolean(value.updateControlIcon)) {
            return;
        }
        var controlType = IdToControlTypeMap_1.IdToControlTypeMap[NamesEnums_1.ControlNames.font_color];
        var controlState = Util_1.Util.getStateToColor(IdEnum_1.IdEnum.CONTROL_FONTCOLOR, controlType, value);
        this.ribbonCore.setControlState(IdEnum_1.IdEnum.CONTROL_FONTCOLOR, controlType, controlState);
    };
    RibbonSetter.prototype.verticalAlign = function (value) {
        if (!Util_1.Util.inputCheckString(value)) {
            return;
        }
        if (!Util_1.Util.inputCheckInEnum(value, ToolOptionEnum_1.VAlignType)) {
            return;
        }
        var toggledControlId = Util_1.Util.getIdFromTypeMap(value, IdToOptionTypeMap_1.IdToOptionTypeMap.ControlIdToVAlignType);
        var allGroupIDs = [IdEnum_1.IdEnum.CONTROL_ALIGN_TOP,
            IdEnum_1.IdEnum.CONTROL_ALIGN_MIDDLE,
            IdEnum_1.IdEnum.CONTROL_ALIGN_BOTTOM
        ];
        var that = this;
        allGroupIDs.forEach(function (loopControlId, index, arr) {
            var controlType = IdToControlTypeMap_1.IdToControlTypeMap[loopControlId];
            var controlState = Util_1.Util.getStateToToggle(loopControlId, controlType, (loopControlId == toggledControlId));
            that.ribbonCore.setControlState(loopControlId, controlType, controlState);
        });
    };
    RibbonSetter.prototype.textAlign = function (value) {
        if (!Util_1.Util.inputCheckString(value)) {
            return;
        }
        if (!Util_1.Util.inputCheckInEnum(value, ToolOptionEnum_1.HAlignType)) {
            return;
        }
        var toggledControlId = Util_1.Util.getIdFromTypeMap(value, IdToOptionTypeMap_1.IdToOptionTypeMap.ControlIdToHAlignType);
        var allGroupIDs = [IdEnum_1.IdEnum.CONTROL_ALIGN_LEFT,
            IdEnum_1.IdEnum.CONTROL_ALIGN_CENTER,
            IdEnum_1.IdEnum.CONTROL_ALIGN_RIGHT
        ];
        var that = this;
        allGroupIDs.forEach(function (loopControlId, index, arr) {
            var controlType = IdToControlTypeMap_1.IdToControlTypeMap[loopControlId];
            var controlState = Util_1.Util.getStateToToggle(loopControlId, controlType, (loopControlId == toggledControlId));
            that.ribbonCore.setControlState(loopControlId, controlType, controlState);
        });
    };
    RibbonSetter.prototype.wrap = function (value) {
        if (!Util_1.Util.inputCheckBoolean(value)) {
            return;
        }
        var controlType = IdToControlTypeMap_1.IdToControlTypeMap[NamesEnums_1.ControlNames.wrap_text];
        var controlState = Util_1.Util.getStateToToggle(IdEnum_1.IdEnum.CONTROL_WRAPTEXT, controlType, value);
        this.ribbonCore.setControlState(IdEnum_1.IdEnum.CONTROL_WRAPTEXT, controlType, controlState);
    };
    RibbonSetter.prototype.merge = function (value) {
        if (!Util_1.Util.inputCheckBoolean(value)) {
            return;
        }
        var controlType = IdToControlTypeMap_1.IdToControlTypeMap[NamesEnums_1.ControlNames.merge];
        var controlState = {
            id: IdEnum_1.IdEnum.CONTROL_MERGE_N_CENTER,
            type: controlType,
            stateData: { selected: value },
            items: [{
                    id: IdEnum_1.IdEnum.ITEM_MERGE_N_CENTER,
                    type: "",
                    stateData: { selected: value }
                }]
        };
        this.ribbonCore.setControlState(IdEnum_1.IdEnum.CONTROL_MERGE_N_CENTER, controlType, controlState);
    };
    RibbonSetter.prototype.numberFormat = function (obj) {
        if (!(obj && obj.type)) {
            return;
        }
        if (!Util_1.Util.inputCheckString(obj.type)) {
            return;
        }
        var itemId = Util_1.Util.getIdFromTypeMap(obj.type, IdToOptionTypeMap_1.IdToOptionTypeMap.IdToNumberFormatType);
        if (itemId == undefined) {
            return;
        }
        var controlType = "";
        var controlState = {
            id: IdEnum_1.IdEnum.CONTROL_NUMBER_FORMAT,
            type: controlType,
            stateData: {
                selectedItemId: itemId
            }
        };
        this.ribbonCore.setControlState(IdEnum_1.IdEnum.CONTROL_NUMBER_FORMAT, controlType, controlState);
    };
    RibbonSetter.prototype.disableControls = function (controlNames) {
        var _this = this;
        if (!Util_1.Util.inputCheckArray(controlNames)) {
            return;
        }
        controlNames.forEach(function (controlName) {
            _this.enableDisableControl(controlName, false);
        });
    };
    RibbonSetter.prototype.enableControls = function (controlNames) {
        var _this = this;
        if (!Util_1.Util.inputCheckArray(controlNames)) {
            return;
        }
        controlNames.forEach(function (controlName) {
            _this.enableDisableControl(controlName, true);
        });
    };
    RibbonSetter.prototype.setActiveTab = function (tabName) {
        //todo: handle if its hiddenTab
        //this.ribbonCore.showTab(tabId);
        if (!Util_1.Util.inputCheckString(tabName)) {
            return;
        }
        var tabId = TabNameToIdMap_1.TabNameToIdMap[tabName];
        if (tabId) {
            this.ribbonCore.setActiveTab(tabId);
        }
    };
    RibbonSetter.prototype.showTab = function (tabName) {
        if (!Util_1.Util.inputCheckString(tabName)) {
            return;
        }
        var tabId = TabNameToIdMap_1.TabNameToIdMap[tabName];
        if (tabId) {
            this.ribbonCore.showTab(tabId);
        }
    };
    RibbonSetter.prototype.hideTab = function (tabName) {
        if (!Util_1.Util.inputCheckString(tabName)) {
            return;
        }
        var tabId = TabNameToIdMap_1.TabNameToIdMap[tabName];
        if (tabId) {
            //todo: handle if its activeTab
            var activeTabId = this.ribbonCore.getActiveTab();
            if (activeTabId == tabId) {
                return false;
            }
            this.ribbonCore.hideTab(tabId);
        }
    };
    RibbonSetter.prototype.updateControlModes = function (arr) {
        var _this = this;
        if (!Util_1.Util.inputCheckArray(arr)) {
            return;
        }
        arr.forEach(function (obj) {
            _this.updateControlMode(obj);
        });
    };
    RibbonSetter.prototype.updateControlMode = function (value) {
        if (!value || !Util_1.Util.inputCheckString(value.name) || !Util_1.Util.inputCheckString(value.mode)) {
            return;
        }
        //todo:
    };
    RibbonSetter.prototype.enableDisableControl = function (controlName, bEnable) {
        var controlId = ControlNameToIdMap_1.ControlNameToIdMap[controlName];
        if (controlId) {
            var controlType = IdToControlTypeMap_1.IdToControlTypeMap[controlName];
            var stateData = {
                id: controlId,
                type: controlType,
                visData: { enable: bEnable }
            };
            this.ribbonCore.setControlState(controlId, controlType, stateData);
        }
    };
    return RibbonSetter;
}()); //end of class
exports.default = RibbonSetter;


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var IdEnum_1 = __webpack_require__(12);
var NamesEnums_1 = __webpack_require__(100);
exports.ControlNameToIdMap = {};
exports.ControlNameToIdMap[NamesEnums_1.ControlNames.paste] = IdEnum_1.IdEnum.CONTROL_PASTE;
exports.ControlNameToIdMap[NamesEnums_1.ControlNames.copy] = IdEnum_1.IdEnum.CONTROL_COPY;
exports.ControlNameToIdMap[NamesEnums_1.ControlNames.cut] = IdEnum_1.IdEnum.CONTROL_CUT;
exports.ControlNameToIdMap[NamesEnums_1.ControlNames.formatPainter] = IdEnum_1.IdEnum.CONTROL_FORMATPAINTER;
exports.ControlNameToIdMap[NamesEnums_1.ControlNames.clipboard_section_launcher] = IdEnum_1.IdEnum.CONTROL_CLIPBOARD_SECTION_LAUNCHER;
exports.ControlNameToIdMap[NamesEnums_1.ControlNames.fontFamily] = IdEnum_1.IdEnum.CONTROL_FONTFAMILY;
exports.ControlNameToIdMap[NamesEnums_1.ControlNames.fontSize] = IdEnum_1.IdEnum.CONTROL_FONTSIZE;
exports.ControlNameToIdMap[NamesEnums_1.ControlNames.Increase_font] = IdEnum_1.IdEnum.CONTROL_INCREASE_FONT;
exports.ControlNameToIdMap[NamesEnums_1.ControlNames.decrease_font] = IdEnum_1.IdEnum.CONTROL_DECREASE_FONT;
exports.ControlNameToIdMap[NamesEnums_1.ControlNames.font_section_launcher] = IdEnum_1.IdEnum.CONTROL_FONT_SECTION_LAUNCHER;
exports.ControlNameToIdMap[NamesEnums_1.ControlNames.bold] = IdEnum_1.IdEnum.CONTROL_BOLD;
exports.ControlNameToIdMap[NamesEnums_1.ControlNames.italic] = IdEnum_1.IdEnum.CONTROL_ITALIC;
exports.ControlNameToIdMap[NamesEnums_1.ControlNames.underline] = IdEnum_1.IdEnum.CONTROL_UNDERLINE;
exports.ControlNameToIdMap[NamesEnums_1.ControlNames.border] = IdEnum_1.IdEnum.CONTROL_BORDER;
exports.ControlNameToIdMap[NamesEnums_1.ControlNames.fill_color] = IdEnum_1.IdEnum.CONTROL_FILLCOLOR;
exports.ControlNameToIdMap[NamesEnums_1.ControlNames.font_color] = IdEnum_1.IdEnum.CONTROL_FONTCOLOR;
exports.ControlNameToIdMap[NamesEnums_1.ControlNames.valign_top] = IdEnum_1.IdEnum.CONTROL_ALIGN_TOP;
exports.ControlNameToIdMap[NamesEnums_1.ControlNames.valign_middle] = IdEnum_1.IdEnum.CONTROL_ALIGN_MIDDLE;
exports.ControlNameToIdMap[NamesEnums_1.ControlNames.valign_bottom] = IdEnum_1.IdEnum.CONTROL_ALIGN_BOTTOM;
exports.ControlNameToIdMap[NamesEnums_1.ControlNames.halign_left] = IdEnum_1.IdEnum.CONTROL_ALIGN_LEFT;
exports.ControlNameToIdMap[NamesEnums_1.ControlNames.halign_center] = IdEnum_1.IdEnum.CONTROL_ALIGN_CENTER;
exports.ControlNameToIdMap[NamesEnums_1.ControlNames.halign_right] = IdEnum_1.IdEnum.CONTROL_ALIGN_RIGHT;
exports.ControlNameToIdMap[NamesEnums_1.ControlNames.orientation] = IdEnum_1.IdEnum.CONTROL_ORIENTATION;
exports.ControlNameToIdMap[NamesEnums_1.ControlNames.increase_indent] = IdEnum_1.IdEnum.CONTROL_INCREASE_INDENT;
exports.ControlNameToIdMap[NamesEnums_1.ControlNames.decrease_indent] = IdEnum_1.IdEnum.CONTROL_DECREASE_INDENT;
exports.ControlNameToIdMap[NamesEnums_1.ControlNames.wrap_text] = IdEnum_1.IdEnum.CONTROL_WRAPTEXT;
exports.ControlNameToIdMap[NamesEnums_1.ControlNames.merge] = IdEnum_1.IdEnum.CONTROL_MERGE_N_CENTER;
exports.ControlNameToIdMap[NamesEnums_1.ControlNames.alignment_section_launcher] = IdEnum_1.IdEnum.CONTROL_ALIGNMENT_SECTION_LAUNCHER;
exports.ControlNameToIdMap[NamesEnums_1.ControlNames.number_section_launcher] = IdEnum_1.IdEnum.CONTROL_NUMBER_SECTION_LAUNCHER;
exports.ControlNameToIdMap[NamesEnums_1.ControlNames.clear] = IdEnum_1.IdEnum.CONTROL_CLEAR;


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var IdEnum_1 = __webpack_require__(12);
var Enums_1 = __webpack_require__(104);
exports.IdToControlTypeMap = {};
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_PASTE] = Enums_1.ControlTypes.splitButton;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_CUT] = Enums_1.ControlTypes.button;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_COPY] = Enums_1.ControlTypes.splitButton;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_FORMATPAINTER] = Enums_1.ControlTypes.button;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_CLIPBOARD_SECTION_LAUNCHER] = Enums_1.ControlTypes.button;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_FONTFAMILY] = Enums_1.ControlTypes.splitInput;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_FONTSIZE] = Enums_1.ControlTypes.splitInput;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_INCREASE_FONT] = Enums_1.ControlTypes.button;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_DECREASE_FONT] = Enums_1.ControlTypes.button;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_BOLD] = Enums_1.ControlTypes.button;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_ITALIC] = Enums_1.ControlTypes.button;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_UNDERLINE] = Enums_1.ControlTypes.splitButton;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_BORDER] = Enums_1.ControlTypes.splitButton;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_FILLCOLOR] = Enums_1.ControlTypes.colorMenu;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_FONTCOLOR] = Enums_1.ControlTypes.colorMenu;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_FONT_SECTION_LAUNCHER] = Enums_1.ControlTypes.button;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_ALIGN_LEFT] = Enums_1.ControlTypes.button;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_ALIGN_CENTER] = Enums_1.ControlTypes.button;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_ALIGN_RIGHT] = Enums_1.ControlTypes.button;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_ALIGN_TOP] = Enums_1.ControlTypes.button;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_ALIGN_MIDDLE] = Enums_1.ControlTypes.button;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_ALIGN_BOTTOM] = Enums_1.ControlTypes.button;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_ORIENTATION] = Enums_1.ControlTypes.splitButton;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_DECREASE_INDENT] = Enums_1.ControlTypes.button;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_INCREASE_INDENT] = Enums_1.ControlTypes.button;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_WRAPTEXT] = Enums_1.ControlTypes.button;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_MERGE_N_CENTER] = Enums_1.ControlTypes.splitButton;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_ALIGNMENT_SECTION_LAUNCHER] = Enums_1.ControlTypes.button;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_NUMBER_FORMAT] = Enums_1.ControlTypes.splitInput;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_ACCOUNTING_NUMBER_FORMAT] = Enums_1.ControlTypes.button;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_PERCENT_STYLE] = Enums_1.ControlTypes.button;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_COMMA_STYLE] = Enums_1.ControlTypes.button;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_INCREASE_DECIMAL] = Enums_1.ControlTypes.button;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_DECREASE_DECIMAL] = Enums_1.ControlTypes.button;
exports.IdToControlTypeMap[IdEnum_1.IdEnum.CONTROL_NUMBER_SECTION_LAUNCHER] = Enums_1.ControlTypes.button;


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.MsOfficeConfigJson = {
    "id": "myribbon_1",
    "type": "ribbon",
    "stateData": {},
    "layoutData": {
        "imageBaseFolder": "./sample",
        "theme": "default",
        "sectionLauncherIcon": {
            "type": "sprite",
            "wd": "7px",
            "ht": "7px",
            "src": "img/dialogLauncher.png",
            "top": "0px",
            "left": "0px"
        },
        "tabGroupsInfo": [],
        "pinInfo": {
            "id": "id_pin",
            "type": "pin",
            "stateData": {
                "pinned": true
            },
            "visData": {
                "enable": true,
                "visible": true
            },
            "layoutData": {
                "pinIcon": {
                    "type": "sprite",
                    "wd": "18px",
                    "ht": "18px",
                    "src": "img/new/pin.png",
                    "top": "-1px",
                    "left": "-5px"
                },
                "unpinIcon": {
                    "type": "sprite",
                    "wd": "18px",
                    "ht": "18px",
                    "src": "img/new/unpin.png",
                    "top": "-2px",
                    "left": "-5px"
                }
            }
        }
    },
    "items": [
        {
            "type": "tab",
            "id": "id_home",
            "accessKey": "H",
            "layoutData": {
                "text": "Home"
            },
            "items": [
                {
                    "type": "sectionWithFooter",
                    "layoutData": {
                        "name": "Clipboard",
                        "launcher": {
                            "type": "sectionlauncher",
                            "id": "id_clipboard_section_launcher",
                            "accessKey": "FO",
                            "tooltip": {
                                "type": "tooltip",
                                "img": {
                                    "type": "sprite",
                                    "wd": "62px",
                                    "ht": "128px",
                                    "src": "img/Excel/Home/clipboard_launcher.png",
                                    "top": "0px",
                                    "left": "0px"
                                },
                                "body": "See all the items you've copied to the Clipboard.",
                                "header": "Clipboard"
                            },
                            "layoutData": {
                                "ariaLabel": "This is clipboard section launcher"
                            }
                        },
                        "controlSpacingMode": "3rows"
                    },
                    "items": [
                        {
                            "type": "envelop",
                            "layoutData": {
                                "orientation": "horizontal"
                            },
                            "items": [
                                {
                                    "type": "envelop",
                                    "layoutData": {
                                        "orientation": "vertical"
                                    },
                                    "items": [
                                        {
                                            "id": "id_paste",
                                            "type": "verticalSplitButton",
                                            "accessKey": "V",
                                            "tooltip": [
                                                {
                                                    "type": "tooltip",
                                                    "target": "icon",
                                                    "body": "Add content on the Clipboard to your document.",
                                                    "header": "Paste (Ctrl+V)"
                                                },
                                                {
                                                    "type": "tooltip",
                                                    "target": "arrow",
                                                    "body": "Pick a paste option, such as keeping formatting or pasting only content.",
                                                    "header": "Paste (Ctrl+V)"
                                                }
                                            ],
                                            "layoutData": {
                                                "customCls": "lrc_paste",
                                                "text": "Paste",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "32px",
                                                    "ht": "32px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-35px",
                                                    "left": "-137px"
                                                }
                                            },
                                            "items": [
                                                {
                                                    "type": "menuitemHeaderNew",
                                                    "id": "id_pasteitem_header11",
                                                    "layoutData": {
                                                        "text": "Paste Options"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemmultiitem",
                                                    "id": "id_Paste_Options_2",
                                                    "layoutData": {},
                                                    "items": [
                                                        {
                                                            "type": "menuItemImageButton",
                                                            "id": "id_Paste_Options_3",
                                                            "accessKey": "P",
                                                            "tooltip": {
                                                                "type": "tooltip",
                                                                "body": "Paste (P)"
                                                            },
                                                            "layoutData": {
                                                                "icon": {
                                                                    "wd": "24px",
                                                                    "ht": "24px",
                                                                    "src": "img/Excel/Home/Clipboard/Paste.png",
                                                                    "top": "0px",
                                                                    "left": "0px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuItemImageButton",
                                                            "id": "id_Paste_Options_4",
                                                            "accessKey": "F",
                                                            "tooltip": {
                                                                "type": "tooltip",
                                                                "body": "Formulas (F)"
                                                            },
                                                            "layoutData": {
                                                                "icon": {
                                                                    "wd": "24px",
                                                                    "ht": "24px",
                                                                    "src": "img/Excel/Home/Clipboard/Formulas.png",
                                                                    "top": "0px",
                                                                    "left": "0px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuItemImageButton",
                                                            "id": "id_Paste_Options_5",
                                                            "accessKey": "O",
                                                            "tooltip": {
                                                                "type": "tooltip",
                                                                "body": "Formulas & Number Formatting (O)"
                                                            },
                                                            "layoutData": {
                                                                "icon": {
                                                                    "wd": "24px",
                                                                    "ht": "24px",
                                                                    "src": "img/Excel/Home/Clipboard/FormulasNumber.png",
                                                                    "top": "0px",
                                                                    "left": "0px"
                                                                }
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "menuitemmultiitem",
                                                    "id": "id_Paste_Options_33",
                                                    "layoutData": {},
                                                    "items": [
                                                        {
                                                            "type": "menuItemImageButton",
                                                            "id": "id_Paste_Options_6",
                                                            "accessKey": "B",
                                                            "tooltip": {
                                                                "type": "tooltip",
                                                                "body": "No Borders (B)"
                                                            },
                                                            "layoutData": {
                                                                "icon": {
                                                                    "wd": "24px",
                                                                    "ht": "24px",
                                                                    "src": "img/Excel/Home/Clipboard/NoBorders.png",
                                                                    "top": "0px",
                                                                    "left": "0px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuItemImageButton",
                                                            "id": "id_Paste_Options_7",
                                                            "accessKey": "W",
                                                            "tooltip": {
                                                                "type": "tooltip",
                                                                "body": "Keep Source Column Widths (W)"
                                                            },
                                                            "layoutData": {
                                                                "icon": {
                                                                    "wd": "24px",
                                                                    "ht": "24px",
                                                                    "src": "img/Excel/Home/Clipboard/KeepSourceColumn.png",
                                                                    "top": "0px",
                                                                    "left": "0px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuItemImageButton",
                                                            "id": "id_Paste_Options_8",
                                                            "accessKey": "T",
                                                            "tooltip": {
                                                                "type": "tooltip",
                                                                "body": "Keep Source Formatting (K)"
                                                            },
                                                            "layoutData": {
                                                                "icon": {
                                                                    "wd": "24px",
                                                                    "ht": "24px",
                                                                    "src": "img/Excel/Home/Clipboard/KeepSourceFormatting.png",
                                                                    "top": "0px",
                                                                    "left": "0px"
                                                                }
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "menuitemSeparatorNew",
                                                    "id": "id_paste_options_separator1",
                                                    "layoutData": {
                                                        "mode": "fullWidth"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_Paste_Options_Paste_special",
                                                    "accessKey": "S",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Paste Special (Ctrl+Alt+V)"
                                                    },
                                                    "layoutData": {
                                                        "mode": "statelessOnlyText",
                                                        "text": "Paste ~special..."
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "envelop",
                                    "layoutData": {
                                        "orientation": "vertical"
                                    },
                                    "items": [
                                        {
                                            "type": "button",
                                            "id": "id_cut",
                                            "accessKey": "X",
                                            "tooltip": {
                                                "type": "tooltip",
                                                "body": "Remove the selection and put it on the Clipboard so you can paste it somewhere else.",
                                                "header": "Cut (Ctrl+X)"
                                            },
                                            "layoutData": {
                                                "mode": "stateless",
                                                "customCls": "lrc_cut",
                                                "text": "Cut",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/home_fromword2016.png",
                                                    "top": "-225px",
                                                    "left": "-137px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            }
                                        },
                                        {
                                            "type": "button",
                                            "id": "id_copy",
                                            "accessKey": "C",
                                            "tooltip": {
                                                "type": "tooltip",
                                                "target": "icon",
                                                "body": "Put a copy of the selection on the Clipboard so you can paste it somewhere else.",
                                                "header": "Copy (Ctrl+C)"
                                            },
                                            "layoutData": {
                                                "mode": "stateless",
                                                "customCls": "lrc_copy",
                                                "text": "Copy",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-91px",
                                                    "left": "-173px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            }
                                        },
                                        {
                                            "type": "button",
                                            "id": "id_formatpainter",
                                            "accessKey": "FP",
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": true
                                            },
                                            "visData": {
                                                "enable": true,
                                                "visible": true
                                            },
                                            "tooltip": {
                                                "type": "tooltip",
                                                "body": "Like the look of a particular selection? You can apply that look to other content in the document.<br/><br/>To get started:<br/>1. Select content with the formatting you like<br/>2. Click Format Painter<br/>3. Select something else to automatically apply the formatting<br/><br/>FYI: To apply the formatting in multiple places, double-click Format Painter.",
                                                "header": "Format Painter"
                                            },
                                            "layoutData": {
                                                "mode": "retainSelection",
                                                "customCls": "lrc_formatpainter",
                                                "text": "Format Painter",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/formatpainter.png",
                                                    "top": "0px",
                                                    "left": "0px"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "sectionseparator"
                },
                {
                    "type": "sectionWithFooter",
                    "layoutData": {
                        "name": "Font",
                        "launcher": {
                            "id": "id_font_section_launcher",
                            "type": "sectionlauncher",
                            "accessKey": "FN",
                            "tooltip": {
                                "type": "tooltip",
                                "img": {
                                    "type": "sprite",
                                    "wd": "96px",
                                    "ht": "82px",
                                    "src": "img/tooltipSprite.png",
                                    "top": "-957px",
                                    "left": "-0px"
                                },
                                "body": "Customize your text to give it the exact look you want. <br/><br/> You can add a variety of styles and colors to your text, as well as visual effects such as strikethrough and superscript.",
                                "header": "Font Settings (Ctrl+Shift+F)"
                            }
                        },
                        "controlSpacingMode": "2rows"
                    },
                    "items": [
                        {
                            "type": "envelop",
                            "layoutData": {
                                "orientation": "vertical"
                            },
                            "items": [
                                {
                                    "type": "envelop",
                                    "layoutData": {
                                        "orientation": "horizontal"
                                    },
                                    "items": [
                                        {
                                            "type": "inputDropdown",
                                            "id": "id_fontFamily",
                                            "layoutData": {
                                                "mode": "fontFamilyMode",
                                                "customCls": "lrc_fontfamily",
                                                "accessKey": "FF",
                                                "showMenuItemTooltip": true
                                            },
                                            "tooltip": [
                                                {
                                                    "type": "tooltip",
                                                    "header": "Font",
                                                    "body": "Pick a new font for your text"
                                                }
                                            ],
                                            "stateData": {
                                                "selectedItemId": "id_item_Calibri",
                                                "inputFieldValue": "Calibri"
                                            },
                                            "visData": {
                                                "enable": true,
                                                "visible": true
                                            },
                                            "items": [
                                                {
                                                    "type": "menuitemHeader",
                                                    "id": "id_fontitem_header1",
                                                    "layoutData": {
                                                        "text": "Theme Fonts"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_CalibriLight",
                                                    "layoutData": {
                                                        "text": "Calibri Light",
                                                        "subText": "(Headings)",
                                                        "customCls": "lrc_font_CalibriLight",
                                                        "fontFamily": "Calibri Light",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Calibri",
                                                    "layoutData": {
                                                        "text": "Calibri",
                                                        "subText": "(Body)",
                                                        "customCls": "lrc_font_Calibri",
                                                        "fontFamily": "Calibri",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "menuitemHeader",
                                                    "id": "id_fontitem_header2",
                                                    "layoutData": {
                                                        "text": "All Fonts"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_AgencyFB",
                                                    "layoutData": {
                                                        "text": "Agency FB",
                                                        "customCls": "lrc_font_AgencyFB",
                                                        "fontFamily": "Agency FB",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Algerian",
                                                    "layoutData": {
                                                        "text": "Algerian",
                                                        "customCls": "lrc_font_Algerian",
                                                        "fontFamily": "Algerian",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Arial",
                                                    "layoutData": {
                                                        "text": "Arial",
                                                        "customCls": "lrc_font_Arial",
                                                        "fontFamily": "Arial",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_ArialBlack",
                                                    "layoutData": {
                                                        "text": "Arial Black",
                                                        "customCls": "lrc_font_ArialBlack",
                                                        "fontFamily": "Arial Black",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_BellMT",
                                                    "layoutData": {
                                                        "text": "Bell MT",
                                                        "customCls": "lrc_font_BellMT",
                                                        "fontFamily": "Bell MT",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "lrc_font_BerlinSansFb",
                                                    "layoutData": {
                                                        "text": "Berlin Sans FB",
                                                        "customCls": "lrc_font_BerlinSansFb",
                                                        "fontFamily": "Berlin Sans FB",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "lrc_font_Broadway",
                                                    "layoutData": {
                                                        "text": "Broadway",
                                                        "customCls": "lrc_font_Broadway",
                                                        "fontFamily": "Broadway",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Cambria",
                                                    "layoutData": {
                                                        "text": "Cambria",
                                                        "customCls": "lrc_font_Cambria",
                                                        "fontFamily": "Cambria",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Century",
                                                    "layoutData": {
                                                        "text": "Century",
                                                        "customCls": "lrc_font_Century",
                                                        "fontFamily": "Century",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Forte",
                                                    "layoutData": {
                                                        "text": "Forte",
                                                        "customCls": "lrc_font_Forte",
                                                        "fontFamily": "Forte",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Georgia",
                                                    "layoutData": {
                                                        "text": "Georgia",
                                                        "customCls": "lrc_font_Georgia",
                                                        "fontFamily": "Georgia",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Impact",
                                                    "layoutData": {
                                                        "text": "Impact",
                                                        "customCls": "lrc_font_Impact",
                                                        "fontFamily": "Impact",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Jokerman",
                                                    "layoutData": {
                                                        "text": "Jokerman",
                                                        "customCls": "lrc_font_Jokerman",
                                                        "fontFamily": "Jokerman",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Lucida_Sans",
                                                    "layoutData": {
                                                        "text": "Lucida Sans",
                                                        "customCls": "lrc_font_Lucida_Sans",
                                                        "fontFamily": "Lucida Sans",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Segoe_UI",
                                                    "layoutData": {
                                                        "text": "Segoe UI",
                                                        "customCls": "lrc_font_Century",
                                                        "fontFamily": "Segoe UI",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Tahoma",
                                                    "layoutData": {
                                                        "text": "Tahoma",
                                                        "customCls": "lrc_font_Century",
                                                        "fontFamily": "Tahoma",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Times_New_Roman",
                                                    "layoutData": {
                                                        "text": "Times New Roman",
                                                        "customCls": "lrc_font_Century",
                                                        "fontFamily": "Times New Roman",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Verdana",
                                                    "layoutData": {
                                                        "text": "Verdana",
                                                        "customCls": "lrc_font_Verdana",
                                                        "fontFamily": "Verdana",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            "type": "inputDropdown",
                                            "id": "id_fontsize",
                                            "layoutData": {
                                                "mode": "fontSizeMode",
                                                "customCls": "lrc_fontsize",
                                                "accessKey": "FSA",
                                                "showMenuItemTooltip": false
                                            },
                                            "tooltip": [
                                                {
                                                    "type": "tooltip",
                                                    "header": "Font Size",
                                                    "body": "Change the size of your text"
                                                }
                                            ],
                                            "stateData": {
                                                "selectedItemId": "id_item_11",
                                                "inputFieldValue": "11"
                                            },
                                            "visData": {
                                                "enable": true,
                                                "visible": true
                                            },
                                            "items": [
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_8",
                                                    "layoutData": {
                                                        "text": "8",
                                                        "customCls": "lrc_font_8"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_9",
                                                    "layoutData": {
                                                        "text": "9",
                                                        "customCls": "lrc_font_9"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_10",
                                                    "layoutData": {
                                                        "text": "10",
                                                        "customCls": "lrc_font_10"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_11",
                                                    "layoutData": {
                                                        "text": "11",
                                                        "customCls": "lrc_font_11"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_12",
                                                    "layoutData": {
                                                        "text": "12",
                                                        "customCls": "lrc_font_12"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_14",
                                                    "layoutData": {
                                                        "text": "14",
                                                        "customCls": "lrc_font_14"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_16",
                                                    "layoutData": {
                                                        "text": "16",
                                                        "customCls": "lrc_font_16"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_18",
                                                    "layoutData": {
                                                        "text": "18",
                                                        "customCls": "lrc_font_18"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_20",
                                                    "layoutData": {
                                                        "text": "20",
                                                        "customCls": "lrc_font_20"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_22",
                                                    "layoutData": {
                                                        "text": "22",
                                                        "customCls": "lrc_font_22"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_24",
                                                    "layoutData": {
                                                        "text": "24",
                                                        "customCls": "lrc_font_24"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_26",
                                                    "layoutData": {
                                                        "text": "26",
                                                        "customCls": "lrc_font_26"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_28",
                                                    "layoutData": {
                                                        "text": "28",
                                                        "customCls": "lrc_font_28"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_36",
                                                    "layoutData": {
                                                        "text": "36",
                                                        "customCls": "lrc_font_36"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_48",
                                                    "layoutData": {
                                                        "text": "48",
                                                        "customCls": "lrc_font_48"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_72",
                                                    "layoutData": {
                                                        "text": "72",
                                                        "customCls": "lrc_font_72"
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            "type": "button",
                                            "id": "id_increasefont",
                                            "accessKey": "FG",
                                            "tooltip": {
                                                "type": "tooltip",
                                                "body": "Make your text a bit bigger.",
                                                "header": "Increase Font Size"
                                            },
                                            "layoutData": {
                                                "mode": "stateless",
                                                "customCls": "lrc_increasefont",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/fontupdown.png",
                                                    "top": "0px",
                                                    "left": "2px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            }
                                        },
                                        {
                                            "type": "button",
                                            "id": "id_decreasefont",
                                            "accessKey": "FK",
                                            "tooltip": {
                                                "type": "tooltip",
                                                "body": "Make your text a bit smaller.",
                                                "header": "Decrease Font Size"
                                            },
                                            "layoutData": {
                                                "mode": "stateless",
                                                "customCls": "lrc_decreasefont",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/fontupdown.png",
                                                    "top": "0px",
                                                    "left": "-19px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            }
                                        }
                                    ]
                                },
                                {
                                    "type": "envelop",
                                    "layoutData": {
                                        "orientation": "horizontal"
                                    },
                                    "items": [
                                        {
                                            "type": "button",
                                            "id": "id_bold",
                                            "accessKey": "1",
                                            "tooltip": {
                                                "type": "tooltip",
                                                "body": "Make your text bold.",
                                                "header": "Bold (Ctrl+B)"
                                            },
                                            "layoutData": {
                                                "mode": "selectable",
                                                "customCls": "lrc_bold",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-87px",
                                                    "left": "-137px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "enable": true,
                                                "visible": true
                                            }
                                        },
                                        {
                                            "type": "button",
                                            "id": "id_italic",
                                            "accessKey": "2",
                                            "tooltip": {
                                                "type": "tooltip",
                                                "body": "Italicize your text.",
                                                "header": "Italic (Ctrl+I)"
                                            },
                                            "layoutData": {
                                                "mode": "selectable",
                                                "customCls": "lrc_italic",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-73px",
                                                    "left": "-173px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            }
                                        },
                                        {
                                            "type": "splitButton",
                                            "id": "id_underline",
                                            "accessKey": "3",
                                            "tooltip": [
                                                {
                                                    "type": "tooltip",
                                                    "target": "icon",
                                                    "body": "Underline your text.",
                                                    "header": "Underline (Ctrl+U)"
                                                },
                                                {
                                                    "type": "tooltip",
                                                    "target": "arrow",
                                                    "body": "Underline your text.",
                                                    "header": "Underline (Ctrl+U)"
                                                }
                                            ],
                                            "stateData": {
                                                "selectedItem": "id_underline|id_underline_single",
                                                "isCuttentIconToggleable": true
                                            },
                                            "layoutData": {
                                                "customCls": "lrc_underline",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-104px",
                                                    "left": "-137px"
                                                }
                                            },
                                            "items": [
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_underline_single",
                                                    "accessKey": "U",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Underline your text.",
                                                        "header": "Underline (Ctrl+U)"
                                                    },
                                                    "layoutData": {
                                                        "mode": "selectable",
                                                        "toggleGroup": "default",
                                                        "text": "~Underline",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/ULineSprite.png",
                                                            "top": "1px",
                                                            "left": "0px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_underline_double",
                                                    "accessKey": "D",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Double underline the selected text.",
                                                        "header": "Double Underline"
                                                    },
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "selectable",
                                                        "text": "~Double Underline",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/ULineSprite.png",
                                                            "top": "-23px",
                                                            "left": "0px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            "type": "controlSeparator"
                                        },
                                        {
                                            "type": "splitButton",
                                            "id": "id_border",
                                            "accessKey": "B",
                                            "tooltip": [
                                                {
                                                    "type": "tooltip",
                                                    "target": "icon",
                                                    "body": "Bottom Border"
                                                },
                                                {
                                                    "type": "tooltip",
                                                    "target": "arrow",
                                                    "body": "Apply borders to the currently selected cells.",
                                                    "header": "Bottom Border"
                                                }
                                            ],
                                            "stateData": {
                                                "selectedItem": "id_border|id_item_BottomBorder",
                                                "isCuttentIconToggleable": false
                                            },
                                            "layoutData": {
                                                "customCls": "lrc_border",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/Excel/Home/Font/Font_Borders.png",
                                                    "top": "-5px",
                                                    "left": "-6px"
                                                }
                                            },
                                            "items": [
                                                {
                                                    "type": "menuitemHeaderNew",
                                                    "id": "id_borderitem_header1",
                                                    "layoutData": {
                                                        "text": "Borders"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_BottomBorder",
                                                    "accessKey": "O",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "B~ottom Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-5px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_TopBorder",
                                                    "accessKey": "P",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "To~p Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-29px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_LeftBorder",
                                                    "accessKey": "L",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "~Left Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-53px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_RightBorder",
                                                    "accessKey": "R",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "~Right Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-77px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemSeparatorNew",
                                                    "id": "id_borderitem_separator1",
                                                    "layoutData": {
                                                        "mode": "withOffset"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_NoBorder",
                                                    "accessKey": "N",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "~No Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-103px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_AllBorders",
                                                    "accessKey": "A",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "~All Borders",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-127px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_OutsideBorders",
                                                    "accessKey": "S",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "Out~side Borders",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-151px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_ThickOutsideBorder",
                                                    "accessKey": "T",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "~Thick Outside Borders",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-175px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemSeparatorNew",
                                                    "id": "id_borderitem_separator2",
                                                    "layoutData": {
                                                        "mode": "withOffset"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_BottomDoubleBorder",
                                                    "accessKey": "B",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "~Bottom Double Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-201px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_ThickBottomBorder",
                                                    "accessKey": "H",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "T~hick Bottom Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-226px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_TopAndBottomBorder",
                                                    "accessKey": "D",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "Top an~d Bottom Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-249px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_TopAndThickBottomBorder",
                                                    "accessKey": "C",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "Top and Thi~ck Bottom Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-274px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_TopAndDoubleBottomBorder",
                                                    "accessKey": "U",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "Top and Do~uble Bottom Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-298px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemHeaderNew",
                                                    "id": "id_borderitem_header2",
                                                    "layoutData": {
                                                        "text": "Draw Borders"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_DrawBorder",
                                                    "accessKey": "W",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Draw Outside Border"
                                                    },
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "selectable",
                                                        "text": "Dra~w Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-344px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_DrawBorderGrid",
                                                    "accessKey": "G",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "selectable",
                                                        "text": "Draw Border ~Grid",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-369px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_EraseBorder",
                                                    "accessKey": "E",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "selectable",
                                                        "text": "~Erase Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-393px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithItems",
                                                    "id": "id_item_LineColor",
                                                    "accessKey": "I",
                                                    "layoutData": {
                                                        "mode": "withIcon",
                                                        "text": "L~ine Color",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-417px"
                                                        }
                                                    },
                                                    "items": [
                                                        {
                                                            "type": "colorPicker",
                                                            "id": "color_picker_2",
                                                            "layoutData": {
                                                                "theme": "OfficeExcel",
                                                                "mode": "FontColor"
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "menuitemWithItems",
                                                    "id": "id_item_LineStyle",
                                                    "accessKey": "Y",
                                                    "layoutData": {
                                                        "mode": "withoutIcon",
                                                        "text": "Line St~yle"
                                                    },
                                                    "items": [
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle0",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/1.png",
                                                                    "left": "0px",
                                                                    "top": "-6px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle1",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/2.png",
                                                                    "left": "0px",
                                                                    "top": "-6px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle2",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/3.png",
                                                                    "left": "0px",
                                                                    "top": "-3px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle3",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/4.png",
                                                                    "left": "0px",
                                                                    "top": "-3px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle4",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/5.png",
                                                                    "left": "0px",
                                                                    "top": "-3px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle5",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/6.png",
                                                                    "left": "0px",
                                                                    "top": "-3px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle6",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/7.png",
                                                                    "left": "0px",
                                                                    "top": "-3px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle7",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/8.png",
                                                                    "left": "0px",
                                                                    "top": "-6px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle8",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/9.png",
                                                                    "left": "0px",
                                                                    "top": "-4px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle9",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/10.png",
                                                                    "left": "0px",
                                                                    "top": "-3px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle10",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/11.png",
                                                                    "left": "0px",
                                                                    "top": "-5px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle11",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/12.png",
                                                                    "left": "0px",
                                                                    "top": "-3px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle12",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/13.png",
                                                                    "left": "0px",
                                                                    "top": "-5px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle13",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/14.png",
                                                                    "left": "0px",
                                                                    "top": "-3px"
                                                                }
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "menuitemSeparatorNew",
                                                    "id": "id_borderitem_separator3",
                                                    "layoutData": {
                                                        "mode": "withOffset"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_MoreBorders",
                                                    "accessKey": "M",
                                                    "layoutData": {
                                                        "mode": "stateless",
                                                        "text": "~More Borders...",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-466px"
                                                        }
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            "type": "controlSeparator"
                                        },
                                        {
                                            "type": "colorPickerControl",
                                            "id": "id_fillcolor",
                                            "accessKey": "H",
                                            "stateData": {
                                                "selectedValue": "#FFFF00",
                                                "updateColorStrip": true
                                            },
                                            "visData": {
                                                "enable": true,
                                                "visible": true,
                                            },
                                            "tooltip": [
                                                {
                                                    "type": "tooltip",
                                                    "target": "icon",
                                                    "body": "Color the background of cells to make them stand out.",
                                                    "header": "Fill Color"
                                                },
                                                {
                                                    "type": "tooltip",
                                                    "target": "arrow",
                                                    "body": "Color the background of cells to make them stand out.",
                                                    "header": "Fill Color"
                                                }
                                            ],
                                            "layoutData": {
                                                "theme": "OfficeExcel",
                                                "mode": "FillColor",
                                                "accessKey": "H",
                                                "customCls": "lrc_fillcolor",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-37px",
                                                    "left": "-189px"
                                                }
                                            }
                                        },
                                        {
                                            "type": "colorPickerControl",
                                            "id": "id_fontcolor",
                                            "accessKey": "FC",
                                            "stateData": {
                                                "selectedValue": "#FF0000",
                                                "updateColorStrip": true
                                            },
                                            "visData": {
                                                "enable": true,
                                                "visible": true,
                                            },
                                            "tooltip": [
                                                {
                                                    "type": "tooltip",
                                                    "target": "icon",
                                                    "body": "Change the color of your text.",
                                                    "header": "Font Color"
                                                },
                                                {
                                                    "type": "tooltip",
                                                    "target": "arrow",
                                                    "body": "Change the color of your text.",
                                                    "header": "Font Color"
                                                }
                                            ],
                                            "layoutData": {
                                                "theme": "OfficeExcel",
                                                "mode": "FontColor",
                                                "customCls": "lrc_fontcolor",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-137px",
                                                    "left": "-19px"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "sectionseparator"
                },
                {
                    "type": "sectionWithFooter",
                    "layoutData": {
                        "name": "Alignment",
                        "launcher": {
                            "id": "id_alignment_section_launcher",
                            "type": "sectionlauncher",
                            "accessKey": "FA",
                            "tooltip": {
                                "type": "tooltip",
                                "img": {
                                    "type": "sprite",
                                    "wd": "96px",
                                    "ht": "95px",
                                    "src": "img/tooltipSprite.png",
                                    "top": "-768px",
                                    "left": "-0px"
                                },
                                "body": "Don't see what you're looking for?<br/><br/>Check out the full set of cell alignment options.",
                                "header": "Alignment Settings"
                            }
                        },
                        "controlSpacingMode": "2rows"
                    },
                    "items": [
                        {
                            "type": "envelop",
                            "layoutData": {
                                "orientation": "horizontal"
                            },
                            "items": [
                                {
                                    "type": "envelop",
                                    "layoutData": {
                                        "orientation": "vertical"
                                    },
                                    "items": [
                                        {
                                            "type": "envelop",
                                            "layoutData": {
                                                "orientation": "horizontal"
                                            },
                                            "items": [
                                                {
                                                    "type": "button",
                                                    "id": "id_topAlign",
                                                    "accessKey": "AT",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Align text to the top.",
                                                        "header": "Top Align"
                                                    },
                                                    "layoutData": {
                                                        "mode": "selectable",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/EwaEdit.png",
                                                            "left": "-189px",
                                                            "top": "-1px"
                                                        }
                                                    },
                                                    "stateData": {
                                                        "selected": false,
                                                        "retainSelection": false
                                                    },
                                                    "visData": {
                                                        "visible": true,
                                                        "enable": true
                                                    }
                                                },
                                                {
                                                    "type": "button",
                                                    "id": "id_middlealign",
                                                    "accessKey": "AM",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Align text so that it is centered between the top and bottom of the cell.",
                                                        "header": "Middle Align"
                                                    },
                                                    "layoutData": {
                                                        "mode": "selectable",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/EwaEdit.png",
                                                            "left": "-155px",
                                                            "top": "-69px"
                                                        }
                                                    },
                                                    "stateData": {
                                                        "selected": false,
                                                        "retainSelection": false
                                                    },
                                                    "visData": {
                                                        "visible": true,
                                                        "enable": true
                                                    }
                                                },
                                                {
                                                    "type": "button",
                                                    "id": "id_bottomAlign",
                                                    "accessKey": "AB",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Align text to the bottom.",
                                                        "header": "Bottom Align"
                                                    },
                                                    "layoutData": {
                                                        "mode": "selectable",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/EwaEdit.png",
                                                            "left": "-163px",
                                                            "top": "-159px"
                                                        }
                                                    },
                                                    "stateData": {
                                                        "selected": false,
                                                        "retainSelection": false
                                                    },
                                                    "visData": {
                                                        "visible": true,
                                                        "enable": true
                                                    }
                                                },
                                                {
                                                    "type": "controlSeparator"
                                                },
                                                {
                                                    "type": "imageButton",
                                                    "id": "id_orientation",
                                                    "accessKey": "FQ",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Rotate your text diagonally or vertically. This is a great way to label narrow columns.",
                                                        "header": "Orientation"
                                                    },
                                                    "layoutData": {
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "33px",
                                                            "ht": "23px",
                                                            "src": "img/new/orientation.png",
                                                            "left": "-2px",
                                                            "top": "-1px"
                                                        }
                                                    },
                                                    "items": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "envelop",
                                            "layoutData": {
                                                "orientation": "horizontal"
                                            },
                                            "items": [
                                                {
                                                    "type": "button",
                                                    "id": "id_leftAlign",
                                                    "accessKey": "AL",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Align your content to the left.",
                                                        "header": "Align Left"
                                                    },
                                                    "layoutData": {
                                                        "mode": "selectable",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/EwaEdit.png",
                                                            "left": "-145px",
                                                            "top": "-159px"
                                                        }
                                                    },
                                                    "stateData": {
                                                        "selected": false,
                                                        "retainSelection": false
                                                    },
                                                    "visData": {
                                                        "visible": true,
                                                        "enable": true
                                                    }
                                                },
                                                {
                                                    "type": "button",
                                                    "id": "id_centerAlign",
                                                    "accessKey": "AC",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Center your content.",
                                                        "header": "Center"
                                                    },
                                                    "layoutData": {
                                                        "mode": "selectable",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/EwaEdit.png",
                                                            "left": "-55px",
                                                            "top": "-173px"
                                                        }
                                                    },
                                                    "stateData": {
                                                        "selected": false,
                                                        "retainSelection": false
                                                    },
                                                    "visData": {
                                                        "visible": true,
                                                        "enable": true
                                                    }
                                                },
                                                {
                                                    "type": "button",
                                                    "id": "id_rightAlign",
                                                    "accessKey": "AR",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Align your content to the right.",
                                                        "header": "Align Right"
                                                    },
                                                    "layoutData": {
                                                        "mode": "selectable",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/EwaEdit.png",
                                                            "left": "-127px",
                                                            "top": "-159px"
                                                        }
                                                    },
                                                    "stateData": {
                                                        "selected": false,
                                                        "retainSelection": false
                                                    },
                                                    "visData": {
                                                        "visible": true,
                                                        "enable": true
                                                    }
                                                },
                                                {
                                                    "type": "controlSeparator"
                                                },
                                                {
                                                    "type": "button",
                                                    "id": "id_decreaseIndent",
                                                    "accessKey": "5",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Move your content closer to the cell border.",
                                                        "header": "Decrease Indent"
                                                    },
                                                    "layoutData": {
                                                        "mode": "stateless",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/rightLeftIndent.png",
                                                            "left": "-2px",
                                                            "top": "0px"
                                                        }
                                                    },
                                                    "stateData": {
                                                        "selected": false,
                                                        "retainSelection": false
                                                    },
                                                    "visData": {
                                                        "visible": true,
                                                        "enable": true
                                                    }
                                                },
                                                {
                                                    "type": "button",
                                                    "id": "id_increaseIndent",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Move your content farther away from the cell border.",
                                                        "header": "Increase Indent"
                                                    },
                                                    "accessKey": "6",
                                                    "layoutData": {
                                                        "mode": "stateless",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/rightLeftIndent.png",
                                                            "left": "-24px",
                                                            "top": "0px"
                                                        }
                                                    },
                                                    "stateData": {
                                                        "selected": false,
                                                        "retainSelection": false
                                                    },
                                                    "visData": {
                                                        "visible": true,
                                                        "enable": true
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "controlSeparator",
                                    "layoutData": {
                                        "customCls": "lrc_fullControlSeparator"
                                    },
                                },
                                {
                                    "type": "envelop",
                                    "layoutData": {
                                        "orientation": "vertical"
                                    },
                                    "items": [
                                        {
                                            "id": "id_wrapText",
                                            "accessKey": "W",
                                            "type": "button",
                                            "tooltip": {
                                                "type": "tooltip",
                                                "img": {
                                                    "type": "sprite",
                                                    "wd": "96px",
                                                    "ht": "128px",
                                                    "src": "img/tooltipSprite.png",
                                                    "top": "-0px",
                                                    "left": "-0px"
                                                },
                                                "body": "Wrap extra-long text into multiple lines so you can see all of it.",
                                                "header": "Wrap Text"
                                            },
                                            "layoutData": {
                                                "mode": "selectable",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "left": "-189px",
                                                    "top": "-19px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            },
                                            "items": []
                                        },
                                        {
                                            "id": "id_mergeAndCenter",
                                            "type": "splitButton",
                                            "accessKey": "M",
                                            "stateData": {
                                                "selectedItem": "id_mergeAndCenter|id_item_mergeAndCenter",
                                            },
                                            "tooltip": [
                                                {
                                                    "type": "tooltip",
                                                    "target": "icon",
                                                    "img": {
                                                        "type": "sprite",
                                                        "wd": "96px",
                                                        "ht": "128px",
                                                        "src": "img/tooltipSprite.png",
                                                        "top": "-384px",
                                                        "left": "-0px"
                                                    },
                                                    "body": "Combine and center the contents of the selected cells in a new larger cell.<br/><br/>This is a great way to create a label that spans multiple columns.",
                                                    "header": "Merge & Center"
                                                },
                                                {
                                                    "type": "tooltip",
                                                    "target": "arrow",
                                                    "body": "Pick how to merge cells.",
                                                    "header": "Merge & Center"
                                                }
                                            ],
                                            "layoutData": {
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/Excel/Home/Alignment/Alignment_MergeCenter.png",
                                                    "left": "-6px",
                                                    "top": "-6px"
                                                }
                                            },
                                            "items": [
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_mergeAndCenter",
                                                    "accessKey": "C",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "img": {
                                                            "type": "sprite",
                                                            "wd": "96px",
                                                            "ht": "128px",
                                                            "src": "img/tooltipSprite.png",
                                                            "top": "-384px",
                                                            "left": "-0px"
                                                        },
                                                        "body": "Combine and center the contents of the selected cells in a new larger cell.<br/><br/>This is a great way to create a label that spans multiple columns.",
                                                        "header": "Merge & Center"
                                                    },
                                                    "layoutData": {
                                                        "mode": "selectable",
                                                        "changeParentIcon": true,
                                                        "text": "Merge & ~Center",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Alignment/Alignment_MergeCenter.png",
                                                            "top": "-6px",
                                                            "left": "-6px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_MergeAcross",
                                                    "accessKey": "A",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Merge selected cells in the same row into one large cell.",
                                                        "header": "Merge Across"
                                                    },
                                                    "layoutData": {
                                                        "text": "Merge ~Across",
                                                        "mode": "stateless",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Alignment/Alignment_MergeCenter.png",
                                                            "top": "-30px",
                                                            "left": "-6px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_MergeCells",
                                                    "accessKey": "M",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Merge selected cells into one cell.",
                                                        "header": "Merge Cells"
                                                    },
                                                    "layoutData": {
                                                        "text": "~Merge Cells",
                                                        "mode": "stateless",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Alignment/Alignment_MergeCenter.png",
                                                            "top": "-54px",
                                                            "left": "-6px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_Unmerge",
                                                    "accessKey": "U",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Split the current cell into multiple cells",
                                                        "header": "Unmerge Cells"
                                                    },
                                                    "layoutData": {
                                                        "text": "~Unmerge",
                                                        "mode": "stateless",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Alignment/Alignment_MergeCenter.png",
                                                            "top": "-78px",
                                                            "left": "-6px"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "sectionseparator"
                },
                {
                    "type": "sectionWithFooter",
                    "layoutData": {
                        "name": "Number",
                        "launcher": {
                            "id": "id_number_section_launcher",
                            "type": "sectionlauncher",
                            "accessKey": "FM",
                            "tooltip": {
                                "type": "tooltip",
                                "img": {
                                    "type": "sprite",
                                    "wd": "100px",
                                    "ht": "105px",
                                    "src": "img/Excel/PageLayout/launcher_tooltip.png",
                                    "top": "0px",
                                    "left": "0px"
                                },
                                "body": "Don't see what you're looking for?  <br/> <br/>Check out the full set of page formatting options.",
                                "header": "Number Format"
                            }
                        },
                        "controlSpacingMode": "2rows"
                    },
                    "items": [
                        {
                            "type": "envelop",
                            "layoutData": {
                                "orientation": "vertical"
                            },
                            "items": [
                                {
                                    "type": "envelop",
                                    "layoutData": {
                                        "orientation": "horizontal"
                                    },
                                    "items": [
                                        {
                                            "type": "inputDropdown",
                                            "id": "id_numberFormat",
                                            "accessKey": "N",
                                            "stateData": {
                                                "selectedItemId": "id_item_General",
                                                "inputFieldValue": "General"
                                            },
                                            "visData": {
                                                "enable": true,
                                                "visible": true
                                            },
                                            "layoutData": {
                                                "mode": "fontFamilyMode",
                                                "customCls": "lrc_numberFormat",
                                                "showMenuItemTooltip": false
                                            },
                                            "tooltip": [
                                                {
                                                    "type": "tooltip",
                                                    "header": "Number Format",
                                                    "body": "Choose the format for your cells, such as percentage, currency, date or time."
                                                }
                                            ],
                                            "items": [
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_General",
                                                    "layoutData": {
                                                        "text": "General",
                                                        "subText": {
                                                            "text": "No specific format",
                                                            "mode": "mode2"
                                                        },
                                                        "customCls": "lrc_numberFormat_General",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "45px",
                                                            "ht": "36px",
                                                            "src": "img/Excel/Home/number.png",
                                                            "top": "-3px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Number",
                                                    "layoutData": {
                                                        "text": "Number",
                                                        "subText": {
                                                            "text": "11.00",
                                                            "mode": "mode2"
                                                        },
                                                        "customCls": "lrc_numberFormat_Number",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "45px",
                                                            "ht": "36px",
                                                            "src": "img/Excel/Home/number.png",
                                                            "top": "-49px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Currency",
                                                    "layoutData": {
                                                        "text": "Currency",
                                                        "customCls": "lrc_numberFormat_Currency",
                                                        "subText": {
                                                            "text": "$11.00",
                                                            "mode": "mode2"
                                                        },
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "45px",
                                                            "ht": "36px",
                                                            "src": "img/Excel/Home/number.png",
                                                            "top": "-91px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Accounting",
                                                    "layoutData": {
                                                        "text": "Accounting",
                                                        "customCls": "lrc_numberFormat_Accounting",
                                                        "subText": {
                                                            "text": "$11.00",
                                                            "mode": "mode2"
                                                        },
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "45px",
                                                            "ht": "36px",
                                                            "src": "img/Excel/Home/number.png",
                                                            "top": "-135px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_ShortDate",
                                                    "layoutData": {
                                                        "text": "Short Date",
                                                        "customCls": "lrc_numberFormat_ShortDate",
                                                        "subText": {
                                                            "text": "5/11/1900",
                                                            "mode": "mode2"
                                                        },
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "45px",
                                                            "ht": "36px",
                                                            "src": "img/Excel/Home/number.png",
                                                            "top": "-180px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_LongDate",
                                                    "layoutData": {
                                                        "text": "Long Date",
                                                        "customCls": "lrc_numberFormat_LongDate",
                                                        "subText": {
                                                            "text": "Friday, May 11, 1900",
                                                            "mode": "mode2"
                                                        },
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "45px",
                                                            "ht": "36px",
                                                            "src": "img/Excel/Home/number.png",
                                                            "top": "-224px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Time",
                                                    "layoutData": {
                                                        "text": "Time",
                                                        "customCls": "lrc_numberFormat_Time",
                                                        "subText": {
                                                            "text": "12:00:00 AM",
                                                            "mode": "mode2"
                                                        },
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "45px",
                                                            "ht": "36px",
                                                            "src": "img/Excel/Home/number.png",
                                                            "top": "-266px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Percentage",
                                                    "layoutData": {
                                                        "text": "Percentage",
                                                        "customCls": "lrc_numberFormat_Percentage",
                                                        "subText": {
                                                            "text": "1100.00%",
                                                            "mode": "mode2"
                                                        },
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "45px",
                                                            "ht": "36px",
                                                            "src": "img/Excel/Home/number.png",
                                                            "left": "0px",
                                                            "top": "-312px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Text",
                                                    "layoutData": {
                                                        "text": "Text",
                                                        "customCls": "lrc_numberFormat_Text",
                                                        "subText": {
                                                            "text": "11",
                                                            "mode": "mode2"
                                                        },
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "45px",
                                                            "ht": "36px",
                                                            "src": "img/Excel/Home/number.png",
                                                            "top": "-441px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Custom",
                                                    "layoutData": {
                                                        "text": "Custom",
                                                        "customCls": "lrc_numberFormat_Custom",
                                                        "subText": {
                                                            "text": "11",
                                                            "mode": "mode2"
                                                        },
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "45px",
                                                            "ht": "36px",
                                                            "src": "img/Excel/Home/number.png",
                                                            "top": "-441px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "envelop",
                                    "layoutData": {
                                        "orientation": "horizontal"
                                    },
                                    "items": [
                                        {
                                            "type": "button",
                                            "id": "id_AccountingNumberFormat",
                                            "accessKey": "AN",
                                            "tooltip": {
                                                "type": "tooltip",
                                                "header": "Accounting Number Format",
                                                "body": "Format as Dollar, Euros, or other currency"
                                            },
                                            "layoutData": {
                                                "mode": "stateless",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/dollar.png",
                                                    "left": "2px",
                                                    "top": "1px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            }
                                        },
                                        {
                                            "type": "button",
                                            "id": "id_PercentStyle",
                                            "accessKey": "P",
                                            "layoutData": {
                                                "mode": "stateless",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/percent.png",
                                                    "left": "2px",
                                                    "top": "1px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            },
                                            "tooltip": {
                                                "type": "tooltip",
                                                "header": "Percent Style (Ctrl+Shift+%)",
                                                "body": "Format as a percent"
                                            }
                                        },
                                        {
                                            "type": "button",
                                            "id": "id_CommaStyle",
                                            "accessKey": "K",
                                            "layoutData": {
                                                "mode": "stateless",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "left": "-91px",
                                                    "top": "-173px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            },
                                            "tooltip": {
                                                "type": "tooltip",
                                                "header": "Comma Style",
                                                "body": "Format with a thousands separator."
                                            }
                                        },
                                        {
                                            "type": "controlSeparator"
                                        },
                                        {
                                            "type": "button",
                                            "id": "id_IncreaseDecimal",
                                            "accessKey": "0",
                                            "layoutData": {
                                                "mode": "stateless",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "left": "-73px",
                                                    "top": "-173px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            },
                                            "tooltip": {
                                                "type": "tooltip",
                                                "header": "Increase Decimal",
                                                "body": "Show more decimal places for a more precise value."
                                            }
                                        },
                                        {
                                            "type": "button",
                                            "id": "id_DecreaseDecimal",
                                            "accessKey": "9",
                                            "layoutData": {
                                                "mode": "stateless",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "left": "-109px",
                                                    "top": "-173px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            },
                                            "tooltip": {
                                                "type": "tooltip",
                                                "header": "Decrease Decimal",
                                                "body": "Show fewer decimal places."
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "sectionseparator"
                },
                {
                    "type": "sectionWithFooter",
                    "layoutData": {
                        "name": "Cells",
                        "controlSpacingMode": "3rows"
                    },
                    "items": [
                        {
                            "type": "envelop",
                            "layoutData": {
                                "orientation": "vertical"
                            },
                            "items": [
                                {
                                    "type": "buttonDropdown",
                                    "id": "id_insert",
                                    "accessKey": "I",
                                    "layoutData": {
                                        "mode": "image",
                                        "icon": {
                                            "wd": "71px",
                                            "ht": "23px",
                                            "src": "img/new/cellsSectionControls_small.png",
                                            "top": "-2px",
                                            "left": "-7px"
                                        }
                                    },
                                    "tooltip": {
                                        "type": "tooltip",
                                        "header": "Insert Cells",
                                        "body": "Add cells, rows, columns or sheets to your workbook."
                                    },
                                    "items": [
                                        {
                                            "type": "menuitemWithModes",
                                            "id": "id_item_insert_sheet_rows",
                                            "accessKey": "R",
                                            "layoutData": {
                                                "mode": "stateless",
                                                "text": "Insert Sheet ~Rows",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-137px",
                                                    "left": "-55px"
                                                }
                                            }
                                        },
                                        {
                                            "type": "menuitemWithModes",
                                            "id": "id_item_insert_sheet_columns",
                                            "accessKey": "C",
                                            "layoutData": {
                                                "mode": "stateless",
                                                "text": "Insert Sheet ~Columns",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-37px",
                                                    "left": "-171px"
                                                }
                                            }
                                        },
                                        {
                                            "type": "menuitemSeparatorNew",
                                            "id": "id_insertitem_separator2",
                                            "layoutData": {
                                                "mode": "withOffset"
                                            }
                                        },
                                        {
                                            "type": "menuitemWithModes",
                                            "id": "id_item_insert_sheet",
                                            "accessKey": "S",
                                            "tooltip": {
                                                "type": "tooltip",
                                                "body": "Insert Worksheet (Shift+F11)"
                                            },
                                            "layoutData": {
                                                "mode": "stateless",
                                                "text": "In~sert Sheet",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-1px",
                                                    "left": "-171px"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "type": "buttonDropdown",
                                    "id": "id_delete",
                                    "accessKey": "D",
                                    "layoutData": {
                                        "mode": "image",
                                        "icon": {
                                            "wd": "75px",
                                            "ht": "23px",
                                            "src": "img/new/cellsSectionControls_small.png",
                                            "top": "-25px",
                                            "left": "-7px"
                                        }
                                    },
                                    "tooltip": {
                                        "type": "tooltip",
                                        "header": "Delete Cells",
                                        "body": "Delete cells, rows or columns, or sheets from your workbook.<br/><br/>FYI: To delete multiple rows or columns at a time, select multiple rows or columns in the sheet, and click Delete."
                                    },
                                    "items": [
                                        {
                                            "type": "menuitemWithModes",
                                            "id": "id_item_delete_sheet_rows",
                                            "accessKey": "R",
                                            "layoutData": {
                                                "mode": "stateless",
                                                "text": "Delete Sheet ~Rows",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-141px",
                                                    "left": "-145px"
                                                }
                                            }
                                        },
                                        {
                                            "type": "menuitemWithModes",
                                            "id": "id_item_delete_sheet_columns",
                                            "accessKey": "C",
                                            "layoutData": {
                                                "mode": "stateless",
                                                "text": "Delete Sheet ~Columns",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-137px",
                                                    "left": "-92px"
                                                }
                                            }
                                        },
                                        {
                                            "type": "menuitemSeparatorNew",
                                            "id": "id_deleteitem_separator2",
                                            "layoutData": {
                                                "mode": "withOffset"
                                            }
                                        },
                                        {
                                            "type": "menuitemWithModes",
                                            "id": "id_item_delete_sheet",
                                            "accessKey": "S",
                                            "layoutData": {
                                                "mode": "stateless",
                                                "text": "Delete ~Sheet",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-155px",
                                                    "left": "-73px"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "type": "imageButton",
                                    "id": "id_format",
                                    "accessKey": "O",
                                    "layoutData": {
                                        "icon": {
                                            "wd": "75px",
                                            "ht": "23px",
                                            "src": "img/new/cells_format.png",
                                            "top": "-3px",
                                            "left": "-2px"
                                        }
                                    },
                                    "tooltip": {
                                        "type": "tooltip",
                                        "header": "Format",
                                        "body": "Change the row height or column width, organize sheets, or protect or hide cells."
                                    },
                                    "items": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "sectionSeparator"
                },
                {
                    "type": "sectionWithFooter",
                    "layoutData": {
                        "name": "Editing",
                        "controlSpacingMode": "3rows"
                    },
                    "items": [
                        {
                            "type": "envelop",
                            "layoutData": {
                                "orientation": "horizontal"
                            },
                            "items": [
                                {
                                    "type": "envelop",
                                    "layoutData": {
                                        "orientation": "vertical"
                                    },
                                    "items": [
                                        {
                                            "id": "id_AutoSum",
                                            "type": "splitButton",
                                            "accessKey": "U",
                                            "layoutData": {
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/autosum.png",
                                                    "left": "0px",
                                                    "top": "0px"
                                                }
                                            },
                                            "tooltip": [
                                                {
                                                    "type": "tooltip",
                                                    "target": "icon",
                                                    "img": {
                                                        "type": "sprite",
                                                        "wd": "96px",
                                                        "ht": "128px",
                                                        "src": "img/Excel/Home/Editing/Autosum_tooltip.png",
                                                        "top": "0px",
                                                        "left": "0px"
                                                    },
                                                    "header": "Sum (Alt+=)",
                                                    "body": "Automatically add it up. Your total will appear after the selected cells."
                                                },
                                                {
                                                    "type": "tooltip",
                                                    "target": "arrow",
                                                    "body": "Automatically add a quick calculation to your worksheet, such as a sum or average.",
                                                    "header": "Sum (Alt+=)"
                                                }
                                            ],
                                            "items": [
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_sum",
                                                    "accessKey": "S",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "img": {
                                                            "type": "sprite",
                                                            "wd": "96px",
                                                            "ht": "128px",
                                                            "src": "img/Excel/Home/Editing/Autosum_tooltip.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        },
                                                        "header": "Sum (Alt+=)",
                                                        "body": "Automatically add it up. Your total will appear after the selected cells."
                                                    },
                                                    "layoutData": {
                                                        "mode": "stateless",
                                                        "text": "~Sum",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/autosum.png",
                                                            "left": "0px",
                                                            "top": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_average",
                                                    "accessKey": "A",
                                                    "layoutData": {
                                                        "mode": "statelessOnlyText",
                                                        "text": "~Average"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_countNumbers",
                                                    "accessKey": "C",
                                                    "layoutData": {
                                                        "mode": "statelessOnlyText",
                                                        "text": "~Count Numbers"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_max",
                                                    "accessKey": "M",
                                                    "layoutData": {
                                                        "mode": "statelessOnlyText",
                                                        "text": "~Max"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_min",
                                                    "accessKey": "I",
                                                    "layoutData": {
                                                        "mode": "statelessOnlyText",
                                                        "text": "M~in"
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            "id": "id_Fill",
                                            "type": "imageButton",
                                            "accessKey": "FI",
                                            "layoutData": {
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "33px",
                                                    "ht": "23px",
                                                    "src": "img/Excel/Home/Editing/Editing_Fill.png",
                                                    "left": "0px",
                                                    "top": "1px"
                                                }
                                            },
                                            "tooltip": {
                                                "type": "tooltip",
                                                "img": {
                                                    "type": "sprite",
                                                    "wd": "96px",
                                                    "ht": "128px",
                                                    "src": "img/tooltipSprite.png",
                                                    "top": "-256px",
                                                    "left": "-0px"
                                                },
                                                "header": "Fill",
                                                "body": "Continue a series or pattern into neighboring cells in any direction."
                                            },
                                            "items": []
                                        },
                                        {
                                            "id": "id_Clear",
                                            "accessKey": "E",
                                            "type": "buttonDropdown",
                                            "layoutData": {
                                                "mode": "image",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "33px",
                                                    "ht": "23px",
                                                    "src": "img/new/editing_clear.png",
                                                    "left": "-4px",
                                                    "top": "-1px"
                                                }
                                            },
                                            "tooltip": {
                                                "type": "tooltip",
                                                "body": "Delete everything in the cell, or remove just the formatting, contents, comments or hyperlinks.",
                                                "header": "Clear"
                                            },
                                            "items": [
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_clear_all",
                                                    "accessKey": "A",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "header": "Clear All",
                                                        "body": "Clear everything from the selected cells.<br/><br/> All contents, formatting and comments are cleared from the selected cells."
                                                    },
                                                    "layoutData": {
                                                        "mode": "stateless",
                                                        "text": "Cle~ar All",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/sprites/excel/home/editing_sectionitems.png",
                                                            "top": "-1px",
                                                            "left": "-152px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_clear_formats",
                                                    "accessKey": "F",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "header": "Clear Formats",
                                                        "body": "Clear only the formatting that is applied to the selected cells."
                                                    },
                                                    "layoutData": {
                                                        "mode": "stateless",
                                                        "text": "Clear ~Formats",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/sprites/excel/home/editing_sectionitems.png",
                                                            "top": "-1px",
                                                            "left": "-107px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_clear_contents",
                                                    "accessKey": "C",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "header": "Clear Contents (Del)",
                                                        "body": "Clear only the contents in the selected cells.<br/><br/> The formatting and the comments are not cleared."
                                                    },
                                                    "layoutData": {
                                                        "mode": "statelessOnlyText",
                                                        "text": "~Clear Contents"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_clear_comments",
                                                    "accessKey": "M",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "header": "Clear Comments",
                                                        "body": "Clear any comments that are attached to the selected cells."
                                                    },
                                                    "layoutData": {
                                                        "mode": "statelessOnlyText",
                                                        "text": "Clear Co~mments"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_clear_hyperlinks",
                                                    "accessKey": "L",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "header": "Clear Hyperlinks",
                                                        "body": "Clear hyperlinks from the selected cells.<br/><br/> The formatting is not cleared."
                                                    },
                                                    "layoutData": {
                                                        "mode": "statelessOnlyText",
                                                        "text": "Clear Hyper~links"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemSeparatorNew",
                                                    "id": "id_item_clear_separator1",
                                                    "layoutData": {
                                                        "mode": "withOffset"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_clear_remove_hyperlinks",
                                                    "accessKey": "R",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "header": "Remove Hyperlinks",
                                                        "body": "Remove the hyperlinks and the formatting from the selected cells."
                                                    },
                                                    "layoutData": {
                                                        "mode": "stateless",
                                                        "text": "~Remove Hyperlinks",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/sprites/excel/home/editing_sectionitems.png",
                                                            "top": "-18px",
                                                            "left": "-241px"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "envelop",
                                    "layoutData": {
                                        "orientation": "vertical"
                                    },
                                    "items": [
                                        {
                                            "id": "id_SortFilter",
                                            "type": "imageButton",
                                            "accessKey": "S",
                                            "layoutData": {
                                                "mode": "selectable",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "33px",
                                                    "ht": "23px",
                                                    "src": "img/new/sortfindreplace.png",
                                                    "top": "-1px",
                                                    "left": "-2px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            },
                                            "tooltip": {
                                                "type": "tooltip",
                                                "body": "Organize your data so it's easier to analyze.<br/><br/>you can sort the selected data from smallest to largest, largest to smallest, or filter out specific values.",
                                                "header": "Sort & Filter"
                                            },
                                            "items": []
                                        },
                                        {
                                            "id": "id_FindNSelect",
                                            "accessKey": "FD",
                                            "type": "imageButton",
                                            "layoutData": {
                                                "mode": "selectable",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "33px",
                                                    "ht": "23px",
                                                    "src": "img/new/sortfindreplace.png",
                                                    "top": "-24px",
                                                    "left": "-2px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            },
                                            "tooltip": {
                                                "type": "tooltip",
                                                "body": "Click to see options for finding text in your document.<br/><br/>You can use advanced search options to replace text, jump right to a specific spot, or pick other ways to narrow your search.",
                                                "header": "Find & Select"
                                            },
                                            "items": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "sectionseparator"
                }
            ]
        }
    ]
};


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.MsOfficeConfigJson_l = {
    "id": "myribbon_1",
    "type": "ribbon",
    "stateData": {},
    "layoutData": {
        "imageBaseFolder": "./sample",
        "theme": "default",
        "sectionLauncherIcon": {
            "type": "sprite",
            "wd": "7px",
            "ht": "7px",
            "src": "img/dialogLauncher.png",
            "top": "0px",
            "left": "0px"
        },
        "tabGroupsInfo": [],
        "pinInfo": {
            "id": "id_pin",
            "type": "pin",
            "stateData": {
                "pinned": true
            },
            "visData": {
                "enable": true,
                "visible": true
            },
            "layoutData": {
                "pinIcon": {
                    "type": "sprite",
                    "wd": "18px",
                    "ht": "18px",
                    "src": "img/new/pin.png",
                    "top": "-1px",
                    "left": "-5px"
                },
                "unpinIcon": {
                    "type": "sprite",
                    "wd": "18px",
                    "ht": "18px",
                    "src": "img/new/unpin.png",
                    "top": "-2px",
                    "left": "-5px"
                }
            }
        }
    },
    "items": [
        {
            "type": "tab",
            "id": "id_home",
            "accessKey": "H",
            "layoutData": {
                "text": "Home"
            },
            "items": [
                {
                    "type": "sectionWithFooter",
                    "layoutData": {
                        "name": "Clipboard",
                        "launcher": {
                            "type": "sectionlauncher",
                            "id": "id_clipboard_section_launcher",
                            "accessKey": "FO",
                            "tooltip": {
                                "type": "tooltip",
                                "img": {
                                    "type": "sprite",
                                    "wd": "62px",
                                    "ht": "128px",
                                    "src": "img/Excel/Home/clipboard_launcher.png",
                                    "top": "0px",
                                    "left": "0px"
                                },
                                "body": "See all the items you've copied to the Clipboard.",
                                "header": "Clipboard"
                            },
                            "layoutData": {
                                "ariaLabel": "This is clipboard section launcher"
                            }
                        },
                        "controlSpacingMode": "3rows"
                    },
                    "items": [
                        {
                            "type": "envelop",
                            "layoutData": {
                                "orientation": "horizontal"
                            },
                            "items": [
                                {
                                    "type": "envelop",
                                    "layoutData": {
                                        "orientation": "vertical"
                                    },
                                    "items": [
                                        {
                                            "id": "id_paste",
                                            "type": "verticalSplitButton",
                                            "accessKey": "V",
                                            "tooltip": [
                                                {
                                                    "type": "tooltip",
                                                    "target": "icon",
                                                    "body": "Add content on the Clipboard to your document.",
                                                    "header": "Paste (Ctrl+V)"
                                                },
                                                {
                                                    "type": "tooltip",
                                                    "target": "arrow",
                                                    "body": "Pick a paste option, such as keeping formatting or pasting only content.",
                                                    "header": "Paste (Ctrl+V)"
                                                }
                                            ],
                                            "layoutData": {
                                                "customCls": "lrc_paste",
                                                "text": "Paste",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "32px",
                                                    "ht": "32px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-35px",
                                                    "left": "-137px"
                                                }
                                            },
                                            "items": [
                                                {
                                                    "type": "menuitemHeaderNew",
                                                    "id": "id_pasteitem_header11",
                                                    "layoutData": {
                                                        "text": "Paste Options"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemmultiitem",
                                                    "id": "id_Paste_Options_2",
                                                    "layoutData": {},
                                                    "items": [
                                                        {
                                                            "type": "menuItemImageButton",
                                                            "id": "id_Paste_Options_3",
                                                            "accessKey": "P",
                                                            "tooltip": {
                                                                "type": "tooltip",
                                                                "body": "Paste (P)"
                                                            },
                                                            "layoutData": {
                                                                "icon": {
                                                                    "wd": "24px",
                                                                    "ht": "24px",
                                                                    "src": "img/Excel/Home/Clipboard/Paste.png",
                                                                    "top": "0px",
                                                                    "left": "0px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuItemImageButton",
                                                            "id": "id_Paste_Options_4",
                                                            "accessKey": "F",
                                                            "tooltip": {
                                                                "type": "tooltip",
                                                                "body": "Formulas (F)"
                                                            },
                                                            "layoutData": {
                                                                "icon": {
                                                                    "wd": "24px",
                                                                    "ht": "24px",
                                                                    "src": "img/Excel/Home/Clipboard/Formulas.png",
                                                                    "top": "0px",
                                                                    "left": "0px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuItemImageButton",
                                                            "id": "id_Paste_Options_5",
                                                            "accessKey": "O",
                                                            "tooltip": {
                                                                "type": "tooltip",
                                                                "body": "Formulas & Number Formatting (O)"
                                                            },
                                                            "layoutData": {
                                                                "icon": {
                                                                    "wd": "24px",
                                                                    "ht": "24px",
                                                                    "src": "img/Excel/Home/Clipboard/FormulasNumber.png",
                                                                    "top": "0px",
                                                                    "left": "0px"
                                                                }
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "menuitemmultiitem",
                                                    "id": "id_Paste_Options_33",
                                                    "layoutData": {},
                                                    "items": [
                                                        {
                                                            "type": "menuItemImageButton",
                                                            "id": "id_Paste_Options_6",
                                                            "accessKey": "B",
                                                            "tooltip": {
                                                                "type": "tooltip",
                                                                "body": "No Borders (B)"
                                                            },
                                                            "layoutData": {
                                                                "icon": {
                                                                    "wd": "24px",
                                                                    "ht": "24px",
                                                                    "src": "img/Excel/Home/Clipboard/NoBorders.png",
                                                                    "top": "0px",
                                                                    "left": "0px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuItemImageButton",
                                                            "id": "id_Paste_Options_7",
                                                            "accessKey": "W",
                                                            "tooltip": {
                                                                "type": "tooltip",
                                                                "body": "Keep Source Column Widths (W)"
                                                            },
                                                            "layoutData": {
                                                                "icon": {
                                                                    "wd": "24px",
                                                                    "ht": "24px",
                                                                    "src": "img/Excel/Home/Clipboard/KeepSourceColumn.png",
                                                                    "top": "0px",
                                                                    "left": "0px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuItemImageButton",
                                                            "id": "id_Paste_Options_8",
                                                            "accessKey": "T",
                                                            "tooltip": {
                                                                "type": "tooltip",
                                                                "body": "Keep Source Formatting (K)"
                                                            },
                                                            "layoutData": {
                                                                "icon": {
                                                                    "wd": "24px",
                                                                    "ht": "24px",
                                                                    "src": "img/Excel/Home/Clipboard/KeepSourceFormatting.png",
                                                                    "top": "0px",
                                                                    "left": "0px"
                                                                }
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "menuitemSeparatorNew",
                                                    "id": "id_paste_options_separator1",
                                                    "layoutData": {
                                                        "mode": "fullWidth"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_Paste_Options_Paste_special",
                                                    "accessKey": "S",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Paste Special (Ctrl+Alt+V)"
                                                    },
                                                    "layoutData": {
                                                        "mode": "statelessOnlyText",
                                                        "text": "Paste ~special..."
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "envelop",
                                    "layoutData": {
                                        "orientation": "vertical"
                                    },
                                    "items": [
                                        {
                                            "type": "button",
                                            "id": "id_cut",
                                            "accessKey": "X",
                                            "tooltip": {
                                                "type": "tooltip",
                                                "body": "Remove the selection and put it on the Clipboard so you can paste it somewhere else.",
                                                "header": "Cut (Ctrl+X)"
                                            },
                                            "layoutData": {
                                                "mode": "stateless",
                                                "customCls": "lrc_cut",
                                                "text": "Cut",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/home_fromword2016.png",
                                                    "top": "-225px",
                                                    "left": "-137px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            }
                                        },
                                        {
                                            "type": "button",
                                            "id": "id_copy",
                                            "accessKey": "C",
                                            "tooltip": {
                                                "type": "tooltip",
                                                "target": "icon",
                                                "body": "Put a copy of the selection on the Clipboard so you can paste it somewhere else.",
                                                "header": "Copy (Ctrl+C)"
                                            },
                                            "layoutData": {
                                                "mode": "stateless",
                                                "customCls": "lrc_copy",
                                                "text": "Copy",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-91px",
                                                    "left": "-173px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            }
                                        },
                                        {
                                            "type": "button",
                                            "id": "id_formatpainter",
                                            "accessKey": "FP",
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": true
                                            },
                                            "visData": {
                                                "enable": true,
                                                "visible": true
                                            },
                                            "tooltip": {
                                                "type": "tooltip",
                                                "body": "Like the look of a particular selection? You can apply that look to other content in the document.<br/><br/>To get started:<br/>1. Select content with the formatting you like<br/>2. Click Format Painter<br/>3. Select something else to automatically apply the formatting<br/><br/>FYI: To apply the formatting in multiple places, double-click Format Painter.",
                                                "header": "Format Painter"
                                            },
                                            "layoutData": {
                                                "mode": "retainSelection",
                                                "customCls": "lrc_formatpainter",
                                                "text": "Format Painter",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/formatpainter.png",
                                                    "top": "0px",
                                                    "left": "0px"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "sectionseparator"
                },
                {
                    "type": "sectionWithFooter",
                    "layoutData": {
                        "name": "Font",
                        "launcher": {
                            "id": "id_font_section_launcher",
                            "type": "sectionlauncher",
                            "accessKey": "FN",
                            "tooltip": {
                                "type": "tooltip",
                                "img": {
                                    "type": "sprite",
                                    "wd": "96px",
                                    "ht": "82px",
                                    "src": "img/tooltipSprite.png",
                                    "top": "-957px",
                                    "left": "-0px"
                                },
                                "body": "Customize your text to give it the exact look you want. <br/><br/> You can add a variety of styles and colors to your text, as well as visual effects such as strikethrough and superscript.",
                                "header": "Font Settings (Ctrl+Shift+F)"
                            }
                        },
                        "controlSpacingMode": "2rows"
                    },
                    "items": [
                        {
                            "type": "envelop",
                            "layoutData": {
                                "orientation": "vertical"
                            },
                            "items": [
                                {
                                    "type": "envelop",
                                    "layoutData": {
                                        "orientation": "horizontal"
                                    },
                                    "items": [
                                        {
                                            "type": "inputDropdown",
                                            "id": "id_fontFamily",
                                            "layoutData": {
                                                "mode": "fontFamilyMode",
                                                "customCls": "lrc_fontfamily",
                                                "accessKey": "FF",
                                                "showMenuItemTooltip": true
                                            },
                                            "tooltip": [
                                                {
                                                    "type": "tooltip",
                                                    "header": "Font",
                                                    "body": "Pick a new font for your text"
                                                }
                                            ],
                                            "stateData": {
                                                "selectedItemId": "id_item_Calibri",
                                                "inputFieldValue": "Calibri"
                                            },
                                            "visData": {
                                                "enable": true,
                                                "visible": true
                                            },
                                            "items": [
                                                {
                                                    "type": "menuitemHeader",
                                                    "id": "id_fontitem_header1",
                                                    "layoutData": {
                                                        "text": "Theme Fonts"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_CalibriLight",
                                                    "layoutData": {
                                                        "text": "Calibri Light",
                                                        "subText": "(Headings)",
                                                        "customCls": "lrc_font_CalibriLight",
                                                        "fontFamily": "Calibri Light",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Calibri",
                                                    "layoutData": {
                                                        "text": "Calibri",
                                                        "subText": "(Body)",
                                                        "customCls": "lrc_font_Calibri",
                                                        "fontFamily": "Calibri",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "menuitemHeader",
                                                    "id": "id_fontitem_header2",
                                                    "layoutData": {
                                                        "text": "All Fonts"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_AgencyFB",
                                                    "layoutData": {
                                                        "text": "Agency FB",
                                                        "customCls": "lrc_font_AgencyFB",
                                                        "fontFamily": "Agency FB",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Algerian",
                                                    "layoutData": {
                                                        "text": "Algerian",
                                                        "customCls": "lrc_font_Algerian",
                                                        "fontFamily": "Algerian",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Arial",
                                                    "layoutData": {
                                                        "text": "Arial",
                                                        "customCls": "lrc_font_Arial",
                                                        "fontFamily": "Arial",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_ArialBlack",
                                                    "layoutData": {
                                                        "text": "Arial Black",
                                                        "customCls": "lrc_font_ArialBlack",
                                                        "fontFamily": "Arial Black",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_BellMT",
                                                    "layoutData": {
                                                        "text": "Bell MT",
                                                        "customCls": "lrc_font_BellMT",
                                                        "fontFamily": "Bell MT",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "lrc_font_BerlinSansFb",
                                                    "layoutData": {
                                                        "text": "Berlin Sans FB",
                                                        "customCls": "lrc_font_BerlinSansFb",
                                                        "fontFamily": "Berlin Sans FB",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "lrc_font_Broadway",
                                                    "layoutData": {
                                                        "text": "Broadway",
                                                        "customCls": "lrc_font_Broadway",
                                                        "fontFamily": "Broadway",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Cambria",
                                                    "layoutData": {
                                                        "text": "Cambria",
                                                        "customCls": "lrc_font_Cambria",
                                                        "fontFamily": "Cambria",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Century",
                                                    "layoutData": {
                                                        "text": "Century",
                                                        "customCls": "lrc_font_Century",
                                                        "fontFamily": "Century",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Forte",
                                                    "layoutData": {
                                                        "text": "Forte",
                                                        "customCls": "lrc_font_Forte",
                                                        "fontFamily": "Forte",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Georgia",
                                                    "layoutData": {
                                                        "text": "Georgia",
                                                        "customCls": "lrc_font_Georgia",
                                                        "fontFamily": "Georgia",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Impact",
                                                    "layoutData": {
                                                        "text": "Impact",
                                                        "customCls": "lrc_font_Impact",
                                                        "fontFamily": "Impact",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Jokerman",
                                                    "layoutData": {
                                                        "text": "Jokerman",
                                                        "customCls": "lrc_font_Jokerman",
                                                        "fontFamily": "Jokerman",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Lucida_Sans",
                                                    "layoutData": {
                                                        "text": "Lucida Sans",
                                                        "customCls": "lrc_font_Lucida_Sans",
                                                        "fontFamily": "Lucida Sans",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Segoe_UI",
                                                    "layoutData": {
                                                        "text": "Segoe UI",
                                                        "customCls": "lrc_font_Century",
                                                        "fontFamily": "Segoe UI",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Tahoma",
                                                    "layoutData": {
                                                        "text": "Tahoma",
                                                        "customCls": "lrc_font_Century",
                                                        "fontFamily": "Tahoma",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Times_New_Roman",
                                                    "layoutData": {
                                                        "text": "Times New Roman",
                                                        "customCls": "lrc_font_Century",
                                                        "fontFamily": "Times New Roman",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Verdana",
                                                    "layoutData": {
                                                        "text": "Verdana",
                                                        "customCls": "lrc_font_Verdana",
                                                        "fontFamily": "Verdana",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            "type": "inputDropdown",
                                            "id": "id_fontsize",
                                            "layoutData": {
                                                "mode": "fontSizeMode",
                                                "customCls": "lrc_fontsize",
                                                "accessKey": "FSA",
                                                "showMenuItemTooltip": false
                                            },
                                            "tooltip": [
                                                {
                                                    "type": "tooltip",
                                                    "header": "Font Size",
                                                    "body": "Change the size of your text"
                                                }
                                            ],
                                            "stateData": {
                                                "selectedItemId": "id_item_11",
                                                "inputFieldValue": "11"
                                            },
                                            "visData": {
                                                "enable": true,
                                                "visible": true
                                            },
                                            "items": [
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_8",
                                                    "layoutData": {
                                                        "text": "8",
                                                        "customCls": "lrc_font_8"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_9",
                                                    "layoutData": {
                                                        "text": "9",
                                                        "customCls": "lrc_font_9"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_10",
                                                    "layoutData": {
                                                        "text": "10",
                                                        "customCls": "lrc_font_10"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_11",
                                                    "layoutData": {
                                                        "text": "11",
                                                        "customCls": "lrc_font_11"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_12",
                                                    "layoutData": {
                                                        "text": "12",
                                                        "customCls": "lrc_font_12"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_14",
                                                    "layoutData": {
                                                        "text": "14",
                                                        "customCls": "lrc_font_14"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_16",
                                                    "layoutData": {
                                                        "text": "16",
                                                        "customCls": "lrc_font_16"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_18",
                                                    "layoutData": {
                                                        "text": "18",
                                                        "customCls": "lrc_font_18"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_20",
                                                    "layoutData": {
                                                        "text": "20",
                                                        "customCls": "lrc_font_20"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_22",
                                                    "layoutData": {
                                                        "text": "22",
                                                        "customCls": "lrc_font_22"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_24",
                                                    "layoutData": {
                                                        "text": "24",
                                                        "customCls": "lrc_font_24"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_26",
                                                    "layoutData": {
                                                        "text": "26",
                                                        "customCls": "lrc_font_26"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_28",
                                                    "layoutData": {
                                                        "text": "28",
                                                        "customCls": "lrc_font_28"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_36",
                                                    "layoutData": {
                                                        "text": "36",
                                                        "customCls": "lrc_font_36"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_48",
                                                    "layoutData": {
                                                        "text": "48",
                                                        "customCls": "lrc_font_48"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_72",
                                                    "layoutData": {
                                                        "text": "72",
                                                        "customCls": "lrc_font_72"
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            "type": "button",
                                            "id": "id_increasefont",
                                            "accessKey": "FG",
                                            "tooltip": {
                                                "type": "tooltip",
                                                "body": "Make your text a bit bigger.",
                                                "header": "Increase Font Size"
                                            },
                                            "layoutData": {
                                                "mode": "stateless",
                                                "customCls": "lrc_increasefont",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/fontupdown.png",
                                                    "top": "0px",
                                                    "left": "2px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            }
                                        },
                                        {
                                            "type": "button",
                                            "id": "id_decreasefont",
                                            "accessKey": "FK",
                                            "tooltip": {
                                                "type": "tooltip",
                                                "body": "Make your text a bit smaller.",
                                                "header": "Decrease Font Size"
                                            },
                                            "layoutData": {
                                                "mode": "stateless",
                                                "customCls": "lrc_decreasefont",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/fontupdown.png",
                                                    "top": "0px",
                                                    "left": "-19px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            }
                                        }
                                    ]
                                },
                                {
                                    "type": "envelop",
                                    "layoutData": {
                                        "orientation": "horizontal"
                                    },
                                    "items": [
                                        {
                                            "type": "button",
                                            "id": "id_bold",
                                            "accessKey": "1",
                                            "tooltip": {
                                                "type": "tooltip",
                                                "body": "Make your text bold.",
                                                "header": "Bold (Ctrl+B)"
                                            },
                                            "layoutData": {
                                                "mode": "selectable",
                                                "customCls": "lrc_bold",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-87px",
                                                    "left": "-137px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "enable": true,
                                                "visible": true
                                            }
                                        },
                                        {
                                            "type": "button",
                                            "id": "id_italic",
                                            "accessKey": "2",
                                            "tooltip": {
                                                "type": "tooltip",
                                                "body": "Italicize your text.",
                                                "header": "Italic (Ctrl+I)"
                                            },
                                            "layoutData": {
                                                "mode": "selectable",
                                                "customCls": "lrc_italic",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-73px",
                                                    "left": "-173px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            }
                                        },
                                        {
                                            "type": "splitButton",
                                            "id": "id_underline",
                                            "accessKey": "3",
                                            "tooltip": [
                                                {
                                                    "type": "tooltip",
                                                    "target": "icon",
                                                    "body": "Underline your text.",
                                                    "header": "Underline (Ctrl+U)"
                                                },
                                                {
                                                    "type": "tooltip",
                                                    "target": "arrow",
                                                    "body": "Underline your text.",
                                                    "header": "Underline (Ctrl+U)"
                                                }
                                            ],
                                            "stateData": {
                                                "selectedItem": "id_underline|id_underline_single",
                                                "isCuttentIconToggleable": true
                                            },
                                            "layoutData": {
                                                "customCls": "lrc_underline",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-104px",
                                                    "left": "-137px"
                                                }
                                            },
                                            "items": [
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_underline_single",
                                                    "accessKey": "U",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Underline your text.",
                                                        "header": "Underline (Ctrl+U)"
                                                    },
                                                    "layoutData": {
                                                        "mode": "selectable",
                                                        "toggleGroup": "default",
                                                        "text": "~Underline",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/ULineSprite.png",
                                                            "top": "1px",
                                                            "left": "0px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_underline_double",
                                                    "accessKey": "D",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Double underline the selected text.",
                                                        "header": "Double Underline"
                                                    },
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "selectable",
                                                        "text": "~Double Underline",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/ULineSprite.png",
                                                            "top": "-23px",
                                                            "left": "0px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            "type": "controlSeparator"
                                        },
                                        {
                                            "type": "splitButton",
                                            "id": "id_border",
                                            "accessKey": "B",
                                            "tooltip": [
                                                {
                                                    "type": "tooltip",
                                                    "target": "icon",
                                                    "body": "Bottom Border"
                                                },
                                                {
                                                    "type": "tooltip",
                                                    "target": "arrow",
                                                    "body": "Apply borders to the currently selected cells.",
                                                    "header": "Bottom Border"
                                                }
                                            ],
                                            "stateData": {
                                                "selectedItem": "id_border|id_item_BottomBorder",
                                                "isCuttentIconToggleable": false
                                            },
                                            "layoutData": {
                                                "customCls": "lrc_border",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/Excel/Home/Font/Font_Borders.png",
                                                    "top": "-5px",
                                                    "left": "-6px"
                                                }
                                            },
                                            "items": [
                                                {
                                                    "type": "menuitemHeaderNew",
                                                    "id": "id_borderitem_header1",
                                                    "layoutData": {
                                                        "text": "Borders"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_BottomBorder",
                                                    "accessKey": "O",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "B~ottom Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-5px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_TopBorder",
                                                    "accessKey": "P",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "To~p Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-29px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_LeftBorder",
                                                    "accessKey": "L",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "~Left Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-53px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_RightBorder",
                                                    "accessKey": "R",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "~Right Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-77px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemSeparatorNew",
                                                    "id": "id_borderitem_separator1",
                                                    "layoutData": {
                                                        "mode": "withOffset"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_NoBorder",
                                                    "accessKey": "N",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "~No Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-103px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_AllBorders",
                                                    "accessKey": "A",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "~All Borders",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-127px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_OutsideBorders",
                                                    "accessKey": "S",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "Out~side Borders",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-151px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_ThickOutsideBorder",
                                                    "accessKey": "T",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "~Thick Outside Borders",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-175px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemSeparatorNew",
                                                    "id": "id_borderitem_separator2",
                                                    "layoutData": {
                                                        "mode": "withOffset"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_BottomDoubleBorder",
                                                    "accessKey": "B",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "~Bottom Double Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-201px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_ThickBottomBorder",
                                                    "accessKey": "H",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "T~hick Bottom Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-226px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_TopAndBottomBorder",
                                                    "accessKey": "D",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "Top an~d Bottom Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-249px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_TopAndThickBottomBorder",
                                                    "accessKey": "C",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "Top and Thi~ck Bottom Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-274px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_TopAndDoubleBottomBorder",
                                                    "accessKey": "U",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "Top and Do~uble Bottom Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-298px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemHeaderNew",
                                                    "id": "id_borderitem_header2",
                                                    "layoutData": {
                                                        "text": "Draw Borders"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_DrawBorder",
                                                    "accessKey": "W",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Draw Outside Border"
                                                    },
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "selectable",
                                                        "text": "Dra~w Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-344px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_DrawBorderGrid",
                                                    "accessKey": "G",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "selectable",
                                                        "text": "Draw Border ~Grid",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-369px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_EraseBorder",
                                                    "accessKey": "E",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "selectable",
                                                        "text": "~Erase Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-393px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithItems",
                                                    "id": "id_item_LineColor",
                                                    "accessKey": "I",
                                                    "layoutData": {
                                                        "mode": "withIcon",
                                                        "text": "L~ine Color",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-417px"
                                                        }
                                                    },
                                                    "items": [
                                                        {
                                                            "type": "colorPicker",
                                                            "id": "color_picker_2",
                                                            "layoutData": {
                                                                "theme": "OfficeExcel",
                                                                "mode": "FontColor"
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "menuitemWithItems",
                                                    "id": "id_item_LineStyle",
                                                    "accessKey": "Y",
                                                    "layoutData": {
                                                        "mode": "withoutIcon",
                                                        "text": "Line St~yle"
                                                    },
                                                    "items": [
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle0",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/1.png",
                                                                    "left": "0px",
                                                                    "top": "-6px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle1",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/2.png",
                                                                    "left": "0px",
                                                                    "top": "-6px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle2",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/3.png",
                                                                    "left": "0px",
                                                                    "top": "-3px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle3",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/4.png",
                                                                    "left": "0px",
                                                                    "top": "-3px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle4",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/5.png",
                                                                    "left": "0px",
                                                                    "top": "-3px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle5",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/6.png",
                                                                    "left": "0px",
                                                                    "top": "-3px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle6",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/7.png",
                                                                    "left": "0px",
                                                                    "top": "-3px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle7",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/8.png",
                                                                    "left": "0px",
                                                                    "top": "-6px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle8",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/9.png",
                                                                    "left": "0px",
                                                                    "top": "-4px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle9",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/10.png",
                                                                    "left": "0px",
                                                                    "top": "-3px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle10",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/11.png",
                                                                    "left": "0px",
                                                                    "top": "-5px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle11",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/12.png",
                                                                    "left": "0px",
                                                                    "top": "-3px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle12",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/13.png",
                                                                    "left": "0px",
                                                                    "top": "-5px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle13",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/14.png",
                                                                    "left": "0px",
                                                                    "top": "-3px"
                                                                }
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "menuitemSeparatorNew",
                                                    "id": "id_borderitem_separator3",
                                                    "layoutData": {
                                                        "mode": "withOffset"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_MoreBorders",
                                                    "accessKey": "M",
                                                    "layoutData": {
                                                        "mode": "stateless",
                                                        "text": "~More Borders...",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-466px"
                                                        }
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            "type": "controlSeparator"
                                        },
                                        {
                                            "type": "colorPickerControl",
                                            "id": "id_fillcolor",
                                            "accessKey": "H",
                                            "stateData": {
                                                "selectedValue": "#FFFF00",
                                                "updateColorStrip": true
                                            },
                                            "visData": {
                                                "enable": true,
                                                "visible": true,
                                            },
                                            "tooltip": [
                                                {
                                                    "type": "tooltip",
                                                    "target": "icon",
                                                    "body": "Color the background of cells to make them stand out.",
                                                    "header": "Fill Color"
                                                },
                                                {
                                                    "type": "tooltip",
                                                    "target": "arrow",
                                                    "body": "Color the background of cells to make them stand out.",
                                                    "header": "Fill Color"
                                                }
                                            ],
                                            "layoutData": {
                                                "theme": "OfficeExcel",
                                                "mode": "FillColor",
                                                "accessKey": "H",
                                                "customCls": "lrc_fillcolor",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-37px",
                                                    "left": "-189px"
                                                }
                                            }
                                        },
                                        {
                                            "type": "colorPickerControl",
                                            "id": "id_fontcolor",
                                            "accessKey": "FC",
                                            "stateData": {
                                                "selectedValue": "#FF0000",
                                                "updateColorStrip": true
                                            },
                                            "visData": {
                                                "enable": true,
                                                "visible": true,
                                            },
                                            "tooltip": [
                                                {
                                                    "type": "tooltip",
                                                    "target": "icon",
                                                    "body": "Change the color of your text.",
                                                    "header": "Font Color"
                                                },
                                                {
                                                    "type": "tooltip",
                                                    "target": "arrow",
                                                    "body": "Change the color of your text.",
                                                    "header": "Font Color"
                                                }
                                            ],
                                            "layoutData": {
                                                "theme": "OfficeExcel",
                                                "mode": "FontColor",
                                                "customCls": "lrc_fontcolor",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-137px",
                                                    "left": "-19px"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "sectionseparator"
                },
                {
                    "type": "sectionWithFooter",
                    "layoutData": {
                        "name": "Alignment",
                        "launcher": {
                            "id": "id_alignment_section_launcher",
                            "type": "sectionlauncher",
                            "accessKey": "FA",
                            "tooltip": {
                                "type": "tooltip",
                                "img": {
                                    "type": "sprite",
                                    "wd": "96px",
                                    "ht": "95px",
                                    "src": "img/tooltipSprite.png",
                                    "top": "-768px",
                                    "left": "-0px"
                                },
                                "body": "Don't see what you're looking for?<br/><br/>Check out the full set of cell alignment options.",
                                "header": "Alignment Settings"
                            }
                        },
                        "controlSpacingMode": "2rows"
                    },
                    "items": [
                        {
                            "type": "envelop",
                            "layoutData": {
                                "orientation": "horizontal"
                            },
                            "items": [
                                {
                                    "type": "envelop",
                                    "layoutData": {
                                        "orientation": "vertical"
                                    },
                                    "items": [
                                        {
                                            "type": "envelop",
                                            "layoutData": {
                                                "orientation": "horizontal"
                                            },
                                            "items": [
                                                {
                                                    "type": "button",
                                                    "id": "id_topAlign",
                                                    "accessKey": "AT",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Align text to the top.",
                                                        "header": "Top Align"
                                                    },
                                                    "layoutData": {
                                                        "mode": "selectable",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/EwaEdit.png",
                                                            "left": "-189px",
                                                            "top": "-1px"
                                                        }
                                                    },
                                                    "stateData": {
                                                        "selected": false,
                                                        "retainSelection": false
                                                    },
                                                    "visData": {
                                                        "visible": true,
                                                        "enable": true
                                                    }
                                                },
                                                {
                                                    "type": "button",
                                                    "id": "id_middlealign",
                                                    "accessKey": "AM",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Align text so that it is centered between the top and bottom of the cell.",
                                                        "header": "Middle Align"
                                                    },
                                                    "layoutData": {
                                                        "mode": "selectable",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/EwaEdit.png",
                                                            "left": "-155px",
                                                            "top": "-69px"
                                                        }
                                                    },
                                                    "stateData": {
                                                        "selected": false,
                                                        "retainSelection": false
                                                    },
                                                    "visData": {
                                                        "visible": true,
                                                        "enable": true
                                                    }
                                                },
                                                {
                                                    "type": "button",
                                                    "id": "id_bottomAlign",
                                                    "accessKey": "AB",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Align text to the bottom.",
                                                        "header": "Bottom Align"
                                                    },
                                                    "layoutData": {
                                                        "mode": "selectable",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/EwaEdit.png",
                                                            "left": "-163px",
                                                            "top": "-159px"
                                                        }
                                                    },
                                                    "stateData": {
                                                        "selected": false,
                                                        "retainSelection": false
                                                    },
                                                    "visData": {
                                                        "visible": true,
                                                        "enable": true
                                                    }
                                                },
                                                {
                                                    "type": "controlSeparator"
                                                },
                                                {
                                                    "type": "imageButton",
                                                    "id": "id_orientation",
                                                    "accessKey": "FQ",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Rotate your text diagonally or vertically. This is a great way to label narrow columns.",
                                                        "header": "Orientation"
                                                    },
                                                    "layoutData": {
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "33px",
                                                            "ht": "23px",
                                                            "src": "img/new/orientation.png",
                                                            "left": "-2px",
                                                            "top": "-1px"
                                                        }
                                                    },
                                                    "items": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "envelop",
                                            "layoutData": {
                                                "orientation": "horizontal"
                                            },
                                            "items": [
                                                {
                                                    "type": "button",
                                                    "id": "id_leftAlign",
                                                    "accessKey": "AL",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Align your content to the left.",
                                                        "header": "Align Left"
                                                    },
                                                    "layoutData": {
                                                        "mode": "selectable",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/EwaEdit.png",
                                                            "left": "-145px",
                                                            "top": "-159px"
                                                        }
                                                    },
                                                    "stateData": {
                                                        "selected": false,
                                                        "retainSelection": false
                                                    },
                                                    "visData": {
                                                        "visible": true,
                                                        "enable": true
                                                    }
                                                },
                                                {
                                                    "type": "button",
                                                    "id": "id_centerAlign",
                                                    "accessKey": "AC",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Center your content.",
                                                        "header": "Center"
                                                    },
                                                    "layoutData": {
                                                        "mode": "selectable",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/EwaEdit.png",
                                                            "left": "-55px",
                                                            "top": "-173px"
                                                        }
                                                    },
                                                    "stateData": {
                                                        "selected": false,
                                                        "retainSelection": false
                                                    },
                                                    "visData": {
                                                        "visible": true,
                                                        "enable": true
                                                    }
                                                },
                                                {
                                                    "type": "button",
                                                    "id": "id_rightAlign",
                                                    "accessKey": "AR",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Align your content to the right.",
                                                        "header": "Align Right"
                                                    },
                                                    "layoutData": {
                                                        "mode": "selectable",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/EwaEdit.png",
                                                            "left": "-127px",
                                                            "top": "-159px"
                                                        }
                                                    },
                                                    "stateData": {
                                                        "selected": false,
                                                        "retainSelection": false
                                                    },
                                                    "visData": {
                                                        "visible": true,
                                                        "enable": true
                                                    }
                                                },
                                                {
                                                    "type": "controlSeparator"
                                                },
                                                {
                                                    "type": "button",
                                                    "id": "id_decreaseIndent",
                                                    "accessKey": "5",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Move your content closer to the cell border.",
                                                        "header": "Decrease Indent"
                                                    },
                                                    "layoutData": {
                                                        "mode": "stateless",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/rightLeftIndent.png",
                                                            "left": "-2px",
                                                            "top": "0px"
                                                        }
                                                    },
                                                    "stateData": {
                                                        "selected": false,
                                                        "retainSelection": false
                                                    },
                                                    "visData": {
                                                        "visible": true,
                                                        "enable": true
                                                    }
                                                },
                                                {
                                                    "type": "button",
                                                    "id": "id_increaseIndent",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Move your content farther away from the cell border.",
                                                        "header": "Increase Indent"
                                                    },
                                                    "accessKey": "6",
                                                    "layoutData": {
                                                        "mode": "stateless",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/rightLeftIndent.png",
                                                            "left": "-24px",
                                                            "top": "0px"
                                                        }
                                                    },
                                                    "stateData": {
                                                        "selected": false,
                                                        "retainSelection": false
                                                    },
                                                    "visData": {
                                                        "visible": true,
                                                        "enable": true
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "controlSeparator",
                                    "layoutData": {
                                        "customCls": "lrc_fullControlSeparator"
                                    },
                                },
                                {
                                    "type": "envelop",
                                    "layoutData": {
                                        "orientation": "vertical"
                                    },
                                    "items": [
                                        {
                                            "id": "id_wrapText",
                                            "accessKey": "W",
                                            "type": "button",
                                            "tooltip": {
                                                "type": "tooltip",
                                                "img": {
                                                    "type": "sprite",
                                                    "wd": "96px",
                                                    "ht": "128px",
                                                    "src": "img/tooltipSprite.png",
                                                    "top": "-0px",
                                                    "left": "-0px"
                                                },
                                                "body": "Wrap extra-long text into multiple lines so you can see all of it.",
                                                "header": "Wrap Text"
                                            },
                                            "layoutData": {
                                                "mode": "selectable",
                                                "text": "Wrap Text",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "left": "-189px",
                                                    "top": "-19px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            },
                                            "items": []
                                        },
                                        {
                                            "id": "id_mergeAndCenter",
                                            "type": "splitButton",
                                            "accessKey": "M",
                                            "stateData": {
                                                "selectedItem": "id_mergeAndCenter|id_item_mergeAndCenter",
                                            },
                                            "tooltip": [
                                                {
                                                    "type": "tooltip",
                                                    "target": "icon",
                                                    "img": {
                                                        "type": "sprite",
                                                        "wd": "96px",
                                                        "ht": "128px",
                                                        "src": "img/tooltipSprite.png",
                                                        "top": "-384px",
                                                        "left": "-0px"
                                                    },
                                                    "body": "Combine and center the contents of the selected cells in a new larger cell.<br/><br/>This is a great way to create a label that spans multiple columns.",
                                                    "header": "Merge & Center"
                                                },
                                                {
                                                    "type": "tooltip",
                                                    "target": "arrow",
                                                    "body": "Pick how to merge cells.",
                                                    "header": "Merge & Center"
                                                }
                                            ],
                                            "layoutData": {
                                                "text": "Merge & Center",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/Excel/Home/Alignment/Alignment_MergeCenter.png",
                                                    "left": "-6px",
                                                    "top": "-6px"
                                                }
                                            },
                                            "items": [
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_mergeAndCenter",
                                                    "accessKey": "C",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "img": {
                                                            "type": "sprite",
                                                            "wd": "96px",
                                                            "ht": "128px",
                                                            "src": "img/tooltipSprite.png",
                                                            "top": "-384px",
                                                            "left": "-0px"
                                                        },
                                                        "body": "Combine and center the contents of the selected cells in a new larger cell.<br/><br/>This is a great way to create a label that spans multiple columns.",
                                                        "header": "Merge & Center"
                                                    },
                                                    "layoutData": {
                                                        "mode": "selectable",
                                                        "changeParentIcon": true,
                                                        "text": "Merge & ~Center",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Alignment/Alignment_MergeCenter.png",
                                                            "top": "-6px",
                                                            "left": "-6px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_MergeAcross",
                                                    "accessKey": "A",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Merge selected cells in the same row into one large cell.",
                                                        "header": "Merge Across"
                                                    },
                                                    "layoutData": {
                                                        "text": "Merge ~Across",
                                                        "mode": "stateless",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Alignment/Alignment_MergeCenter.png",
                                                            "top": "-30px",
                                                            "left": "-6px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_MergeCells",
                                                    "accessKey": "M",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Merge selected cells into one cell.",
                                                        "header": "Merge Cells"
                                                    },
                                                    "layoutData": {
                                                        "text": "~Merge Cells",
                                                        "mode": "stateless",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Alignment/Alignment_MergeCenter.png",
                                                            "top": "-54px",
                                                            "left": "-6px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_Unmerge",
                                                    "accessKey": "U",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Split the current cell into multiple cells",
                                                        "header": "Unmerge Cells"
                                                    },
                                                    "layoutData": {
                                                        "text": "~Unmerge",
                                                        "mode": "stateless",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Alignment/Alignment_MergeCenter.png",
                                                            "top": "-78px",
                                                            "left": "-6px"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "sectionseparator"
                },
                {
                    "type": "sectionWithFooter",
                    "layoutData": {
                        "name": "Number",
                        "launcher": {
                            "id": "id_number_section_launcher",
                            "type": "sectionlauncher",
                            "accessKey": "FM",
                            "tooltip": {
                                "type": "tooltip",
                                "img": {
                                    "type": "sprite",
                                    "wd": "100px",
                                    "ht": "105px",
                                    "src": "img/Excel/PageLayout/launcher_tooltip.png",
                                    "top": "0px",
                                    "left": "0px"
                                },
                                "body": "Don't see what you're looking for?  <br/> <br/>Check out the full set of page formatting options.",
                                "header": "Number Format"
                            }
                        },
                        "controlSpacingMode": "2rows"
                    },
                    "items": [
                        {
                            "type": "envelop",
                            "layoutData": {
                                "orientation": "vertical"
                            },
                            "items": [
                                {
                                    "type": "envelop",
                                    "layoutData": {
                                        "orientation": "horizontal"
                                    },
                                    "items": [
                                        {
                                            "type": "inputDropdown",
                                            "id": "id_numberFormat",
                                            "accessKey": "N",
                                            "stateData": {
                                                "selectedItemId": "id_item_General",
                                                "inputFieldValue": "General"
                                            },
                                            "visData": {
                                                "enable": true,
                                                "visible": true
                                            },
                                            "layoutData": {
                                                "mode": "fontFamilyMode",
                                                "customCls": "lrc_numberFormat",
                                                "showMenuItemTooltip": false
                                            },
                                            "tooltip": [
                                                {
                                                    "type": "tooltip",
                                                    "header": "Number Format",
                                                    "body": "Choose the format for your cells, such as percentage, currency, date or time."
                                                }
                                            ],
                                            "items": [
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_General",
                                                    "layoutData": {
                                                        "text": "General",
                                                        "subText": {
                                                            "text": "No specific format",
                                                            "mode": "mode2"
                                                        },
                                                        "customCls": "lrc_numberFormat_General",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "45px",
                                                            "ht": "36px",
                                                            "src": "img/Excel/Home/number.png",
                                                            "top": "-3px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Number",
                                                    "layoutData": {
                                                        "text": "Number",
                                                        "subText": {
                                                            "text": "11.00",
                                                            "mode": "mode2"
                                                        },
                                                        "customCls": "lrc_numberFormat_Number",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "45px",
                                                            "ht": "36px",
                                                            "src": "img/Excel/Home/number.png",
                                                            "top": "-49px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Currency",
                                                    "layoutData": {
                                                        "text": "Currency",
                                                        "customCls": "lrc_numberFormat_Currency",
                                                        "subText": {
                                                            "text": "$11.00",
                                                            "mode": "mode2"
                                                        },
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "45px",
                                                            "ht": "36px",
                                                            "src": "img/Excel/Home/number.png",
                                                            "top": "-91px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Accounting",
                                                    "layoutData": {
                                                        "text": "Accounting",
                                                        "customCls": "lrc_numberFormat_Accounting",
                                                        "subText": {
                                                            "text": "$11.00",
                                                            "mode": "mode2"
                                                        },
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "45px",
                                                            "ht": "36px",
                                                            "src": "img/Excel/Home/number.png",
                                                            "top": "-135px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_ShortDate",
                                                    "layoutData": {
                                                        "text": "Short Date",
                                                        "customCls": "lrc_numberFormat_ShortDate",
                                                        "subText": {
                                                            "text": "5/11/1900",
                                                            "mode": "mode2"
                                                        },
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "45px",
                                                            "ht": "36px",
                                                            "src": "img/Excel/Home/number.png",
                                                            "top": "-180px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_LongDate",
                                                    "layoutData": {
                                                        "text": "Long Date",
                                                        "customCls": "lrc_numberFormat_LongDate",
                                                        "subText": {
                                                            "text": "Friday, May 11, 1900",
                                                            "mode": "mode2"
                                                        },
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "45px",
                                                            "ht": "36px",
                                                            "src": "img/Excel/Home/number.png",
                                                            "top": "-224px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Time",
                                                    "layoutData": {
                                                        "text": "Time",
                                                        "customCls": "lrc_numberFormat_Time",
                                                        "subText": {
                                                            "text": "12:00:00 AM",
                                                            "mode": "mode2"
                                                        },
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "45px",
                                                            "ht": "36px",
                                                            "src": "img/Excel/Home/number.png",
                                                            "top": "-266px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Percentage",
                                                    "layoutData": {
                                                        "text": "Percentage",
                                                        "customCls": "lrc_numberFormat_Percentage",
                                                        "subText": {
                                                            "text": "1100.00%",
                                                            "mode": "mode2"
                                                        },
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "45px",
                                                            "ht": "36px",
                                                            "src": "img/Excel/Home/number.png",
                                                            "left": "0px",
                                                            "top": "-312px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Text",
                                                    "layoutData": {
                                                        "text": "Text",
                                                        "customCls": "lrc_numberFormat_Text",
                                                        "subText": {
                                                            "text": "11",
                                                            "mode": "mode2"
                                                        },
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "45px",
                                                            "ht": "36px",
                                                            "src": "img/Excel/Home/number.png",
                                                            "top": "-441px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Custom",
                                                    "layoutData": {
                                                        "text": "Custom",
                                                        "customCls": "lrc_numberFormat_Custom",
                                                        "subText": {
                                                            "text": "11",
                                                            "mode": "mode2"
                                                        },
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "45px",
                                                            "ht": "36px",
                                                            "src": "img/Excel/Home/number.png",
                                                            "top": "-441px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "envelop",
                                    "layoutData": {
                                        "orientation": "horizontal"
                                    },
                                    "items": [
                                        {
                                            "type": "button",
                                            "id": "id_AccountingNumberFormat",
                                            "accessKey": "AN",
                                            "tooltip": {
                                                "type": "tooltip",
                                                "header": "Accounting Number Format",
                                                "body": "Format as Dollar, Euros, or other currency"
                                            },
                                            "layoutData": {
                                                "mode": "stateless",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/dollar.png",
                                                    "left": "2px",
                                                    "top": "1px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            }
                                        },
                                        {
                                            "type": "button",
                                            "id": "id_PercentStyle",
                                            "accessKey": "P",
                                            "layoutData": {
                                                "mode": "stateless",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/percent.png",
                                                    "left": "2px",
                                                    "top": "1px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            },
                                            "tooltip": {
                                                "type": "tooltip",
                                                "header": "Percent Style (Ctrl+Shift+%)",
                                                "body": "Format as a percent"
                                            }
                                        },
                                        {
                                            "type": "button",
                                            "id": "id_CommaStyle",
                                            "accessKey": "K",
                                            "layoutData": {
                                                "mode": "stateless",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "left": "-91px",
                                                    "top": "-173px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            },
                                            "tooltip": {
                                                "type": "tooltip",
                                                "header": "Comma Style",
                                                "body": "Format with a thousands separator."
                                            }
                                        },
                                        {
                                            "type": "controlSeparator"
                                        },
                                        {
                                            "type": "button",
                                            "id": "id_IncreaseDecimal",
                                            "accessKey": "0",
                                            "layoutData": {
                                                "mode": "stateless",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "left": "-73px",
                                                    "top": "-173px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            },
                                            "tooltip": {
                                                "type": "tooltip",
                                                "header": "Increase Decimal",
                                                "body": "Show more decimal places for a more precise value."
                                            }
                                        },
                                        {
                                            "type": "button",
                                            "id": "id_DecreaseDecimal",
                                            "accessKey": "9",
                                            "layoutData": {
                                                "mode": "stateless",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "left": "-109px",
                                                    "top": "-173px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            },
                                            "tooltip": {
                                                "type": "tooltip",
                                                "header": "Decrease Decimal",
                                                "body": "Show fewer decimal places."
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "sectionseparator"
                },
                {
                    "type": "sectionWithFooter",
                    "layoutData": {
                        "name": "Styles",
                        "controlSpacingMode": "3rows"
                    },
                    "items": [
                        {
                            "type": "envelop",
                            "layoutData": {
                                "orientation": "horizontal"
                            },
                            "items": [
                                {
                                    "type": "imageButton",
                                    "id": "id_conditionalFormatting",
                                    "accessKey": "L",
                                    "layoutData": {
                                        "mode": "selectable",
                                        "icon": {
                                            "wd": "72px",
                                            "ht": "69px",
                                            "src": "img/stylesandcellssprite.png",
                                            "top": "0px",
                                            "left": "-1px"
                                        }
                                    },
                                    "stateData": {
                                        "selected": false,
                                        "retainSelection": false
                                    },
                                    "visData": {
                                        "visible": true,
                                        "enable": true
                                    },
                                    "items": []
                                },
                                {
                                    "type": "imageButton",
                                    "id": "id_FormatAsTable",
                                    "accessKey": "T",
                                    "layoutData": {
                                        "mode": "selectable",
                                        "icon": {
                                            "wd": "56px",
                                            "ht": "69px",
                                            "src": "img/stylesandcellssprite.png",
                                            "top": "0px",
                                            "left": "-73px"
                                        }
                                    },
                                    "stateData": {
                                        "selected": false,
                                        "retainSelection": false
                                    },
                                    "visData": {
                                        "visible": true,
                                        "enable": true
                                    },
                                    "items": []
                                },
                                {
                                    "type": "imageButton",
                                    "id": "id_CellStyles",
                                    "accessKey": "J",
                                    "layoutData": {
                                        "mode": "selectable",
                                        "icon": {
                                            "wd": "41px",
                                            "ht": "69px",
                                            "src": "img/Excel/Home/Styles/CellStyles1.png",
                                            "top": "2px",
                                            "left": "0px"
                                        }
                                    },
                                    "stateData": {
                                        "selected": false,
                                        "retainSelection": false
                                    },
                                    "visData": {
                                        "visible": true,
                                        "enable": true
                                    },
                                    "items": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "sectionSeparator"
                },
                {
                    "type": "sectionWithFooter",
                    "layoutData": {
                        "name": "Cells",
                        "controlSpacingMode": "3rows"
                    },
                    "items": [
                        {
                            "type": "envelop",
                            "layoutData": {
                                "orientation": "horizontal"
                            },
                            "items": [
                                {
                                    "type": "buttonDropdown",
                                    "id": "id_insert",
                                    "accessKey": "I",
                                    "layoutData": {
                                        "mode": "image",
                                        "icon": {
                                            "wd": "42px",
                                            "ht": "69px",
                                            "src": "img/new/cellsSectionControls_big.png",
                                            "top": "-2px",
                                            "left": "-7px"
                                        }
                                    },
                                    "tooltip": {
                                        "type": "tooltip",
                                        "header": "Insert Cells",
                                        "body": "Add cells, rows, columns or sheets to your workbook."
                                    },
                                    "items": [
                                        {
                                            "type": "menuitemWithModes",
                                            "id": "id_item_insert_sheet_rows",
                                            "accessKey": "R",
                                            "layoutData": {
                                                "mode": "stateless",
                                                "text": "Insert Sheet ~Rows",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-137px",
                                                    "left": "-55px"
                                                }
                                            }
                                        },
                                        {
                                            "type": "menuitemWithModes",
                                            "id": "id_item_insert_sheet_columns",
                                            "accessKey": "C",
                                            "layoutData": {
                                                "mode": "stateless",
                                                "text": "Insert Sheet ~Columns",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-37px",
                                                    "left": "-171px"
                                                }
                                            }
                                        },
                                        {
                                            "type": "menuitemSeparatorNew",
                                            "id": "id_insertitem_separator2",
                                            "layoutData": {
                                                "mode": "withOffset"
                                            }
                                        },
                                        {
                                            "type": "menuitemWithModes",
                                            "id": "id_item_insert_sheet",
                                            "accessKey": "S",
                                            "tooltip": {
                                                "type": "tooltip",
                                                "body": "Insert Worksheet (Shift+F11)"
                                            },
                                            "layoutData": {
                                                "mode": "stateless",
                                                "text": "In~sert Sheet",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-1px",
                                                    "left": "-171px"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "type": "buttonDropdown",
                                    "id": "id_delete",
                                    "accessKey": "D",
                                    "layoutData": {
                                        "mode": "image",
                                        "icon": {
                                            "wd": "42px",
                                            "ht": "69px",
                                            "src": "img/new/cellsSectionControls_big.png",
                                            "top": "-2px",
                                            "left": "-49px"
                                        }
                                    },
                                    "tooltip": {
                                        "type": "tooltip",
                                        "header": "Delete Cells",
                                        "body": "Delete cells, rows or columns, or sheets from your workbook.<br/><br/>FYI: To delete multiple rows or columns at a time, select multiple rows or columns in the sheet, and click Delete."
                                    },
                                    "items": [
                                        {
                                            "type": "menuitemWithModes",
                                            "id": "id_item_delete_sheet_rows",
                                            "accessKey": "R",
                                            "layoutData": {
                                                "mode": "stateless",
                                                "text": "Delete Sheet ~Rows",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-141px",
                                                    "left": "-145px"
                                                }
                                            }
                                        },
                                        {
                                            "type": "menuitemWithModes",
                                            "id": "id_item_delete_sheet_columns",
                                            "accessKey": "C",
                                            "layoutData": {
                                                "mode": "stateless",
                                                "text": "Delete Sheet ~Columns",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-137px",
                                                    "left": "-92px"
                                                }
                                            }
                                        },
                                        {
                                            "type": "menuitemSeparatorNew",
                                            "id": "id_deleteitem_separator2",
                                            "layoutData": {
                                                "mode": "withOffset"
                                            }
                                        },
                                        {
                                            "type": "menuitemWithModes",
                                            "id": "id_item_delete_sheet",
                                            "accessKey": "S",
                                            "layoutData": {
                                                "mode": "stateless",
                                                "text": "Delete ~Sheet",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-155px",
                                                    "left": "-73px"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "type": "imageButton",
                                    "id": "id_format",
                                    "accessKey": "O",
                                    "layoutData": {
                                        "icon": {
                                            "wd": "43px",
                                            "ht": "69px",
                                            "src": "img/new/cellFormat.png",
                                            "top": "-2px",
                                            "left": "-2px"
                                        }
                                    },
                                    "tooltip": {
                                        "type": "tooltip",
                                        "header": "Format",
                                        "body": "Change the row height or column width, organize sheets, or protect or hide cells."
                                    },
                                    "items": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "sectionSeparator"
                },
                {
                    "type": "sectionWithFooter",
                    "layoutData": {
                        "name": "Editing",
                        "controlSpacingMode": "3rows"
                    },
                    "items": [
                        {
                            "type": "envelop",
                            "layoutData": {
                                "orientation": "horizontal"
                            },
                            "items": [
                                {
                                    "type": "envelop",
                                    "layoutData": {
                                        "orientation": "vertical"
                                    },
                                    "items": [
                                        {
                                            "id": "id_AutoSum",
                                            "type": "splitButton",
                                            "accessKey": "U",
                                            "layoutData": {
                                                "text": "AutoSum",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/autosum.png",
                                                    "left": "0px",
                                                    "top": "0px"
                                                }
                                            },
                                            "tooltip": [
                                                {
                                                    "type": "tooltip",
                                                    "target": "icon",
                                                    "img": {
                                                        "type": "sprite",
                                                        "wd": "96px",
                                                        "ht": "128px",
                                                        "src": "img/Excel/Home/Editing/Autosum_tooltip.png",
                                                        "top": "0px",
                                                        "left": "0px"
                                                    },
                                                    "header": "Sum (Alt+=)",
                                                    "body": "Automatically add it up. Your total will appear after the selected cells."
                                                },
                                                {
                                                    "type": "tooltip",
                                                    "target": "arrow",
                                                    "body": "Automatically add a quick calculation to your worksheet, such as a sum or average.",
                                                    "header": "Sum (Alt+=)"
                                                }
                                            ],
                                            "items": [
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_sum",
                                                    "accessKey": "S",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "img": {
                                                            "type": "sprite",
                                                            "wd": "96px",
                                                            "ht": "128px",
                                                            "src": "img/Excel/Home/Editing/Autosum_tooltip.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        },
                                                        "header": "Sum (Alt+=)",
                                                        "body": "Automatically add it up. Your total will appear after the selected cells."
                                                    },
                                                    "layoutData": {
                                                        "mode": "stateless",
                                                        "text": "~Sum",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/autosum.png",
                                                            "left": "0px",
                                                            "top": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_average",
                                                    "accessKey": "A",
                                                    "layoutData": {
                                                        "mode": "statelessOnlyText",
                                                        "text": "~Average"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_countNumbers",
                                                    "accessKey": "C",
                                                    "layoutData": {
                                                        "mode": "statelessOnlyText",
                                                        "text": "~Count Numbers"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_max",
                                                    "accessKey": "M",
                                                    "layoutData": {
                                                        "mode": "statelessOnlyText",
                                                        "text": "~Max"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_min",
                                                    "accessKey": "I",
                                                    "layoutData": {
                                                        "mode": "statelessOnlyText",
                                                        "text": "M~in"
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            "id": "id_Fill",
                                            "type": "imageButton",
                                            "accessKey": "FI",
                                            "layoutData": {
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "52px",
                                                    "ht": "23px",
                                                    "src": "img/new/editing_fill_withtext.png",
                                                    "left": "-3px",
                                                    "top": "-1px"
                                                }
                                            },
                                            "tooltip": {
                                                "type": "tooltip",
                                                "img": {
                                                    "type": "sprite",
                                                    "wd": "96px",
                                                    "ht": "128px",
                                                    "src": "img/tooltipSprite.png",
                                                    "top": "-256px",
                                                    "left": "-0px"
                                                },
                                                "header": "Fill",
                                                "body": "Continue a series or pattern into neighboring cells in any direction."
                                            },
                                            "items": []
                                        },
                                        {
                                            "id": "id_Clear",
                                            "accessKey": "E",
                                            "type": "buttonDropdown",
                                            "layoutData": {
                                                "mode": "image",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "64px",
                                                    "ht": "23px",
                                                    "src": "img/new/editing_clear_withtext.png",
                                                    "left": "-4px",
                                                    "top": "-3px"
                                                }
                                            },
                                            "tooltip": {
                                                "type": "tooltip",
                                                "body": "Delete everything in the cell, or remove just the formatting, contents, comments or hyperlinks.",
                                                "header": "Clear"
                                            },
                                            "items": [
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_clear_all",
                                                    "accessKey": "A",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "header": "Clear All",
                                                        "body": "Clear everything from the selected cells.<br/><br/> All contents, formatting and comments are cleared from the selected cells."
                                                    },
                                                    "layoutData": {
                                                        "mode": "stateless",
                                                        "text": "Cle~ar All",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/sprites/excel/home/editing_sectionitems.png",
                                                            "top": "-1px",
                                                            "left": "-152px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_clear_formats",
                                                    "accessKey": "F",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "header": "Clear Formats",
                                                        "body": "Clear only the formatting that is applied to the selected cells."
                                                    },
                                                    "layoutData": {
                                                        "mode": "stateless",
                                                        "text": "Clear ~Formats",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/sprites/excel/home/editing_sectionitems.png",
                                                            "top": "-1px",
                                                            "left": "-107px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_clear_contents",
                                                    "accessKey": "C",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "header": "Clear Contents (Del)",
                                                        "body": "Clear only the contents in the selected cells.<br/><br/> The formatting and the comments are not cleared."
                                                    },
                                                    "layoutData": {
                                                        "mode": "statelessOnlyText",
                                                        "text": "~Clear Contents"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_clear_comments",
                                                    "accessKey": "M",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "header": "Clear Comments",
                                                        "body": "Clear any comments that are attached to the selected cells."
                                                    },
                                                    "layoutData": {
                                                        "mode": "statelessOnlyText",
                                                        "text": "Clear Co~mments"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_clear_hyperlinks",
                                                    "accessKey": "L",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "header": "Clear Hyperlinks",
                                                        "body": "Clear hyperlinks from the selected cells.<br/><br/> The formatting is not cleared."
                                                    },
                                                    "layoutData": {
                                                        "mode": "statelessOnlyText",
                                                        "text": "Clear Hyper~links"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemSeparatorNew",
                                                    "id": "id_item_clear_separator1",
                                                    "layoutData": {
                                                        "mode": "withOffset"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_clear_remove_hyperlinks",
                                                    "accessKey": "R",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "header": "Remove Hyperlinks",
                                                        "body": "Remove the hyperlinks and the formatting from the selected cells."
                                                    },
                                                    "layoutData": {
                                                        "mode": "stateless",
                                                        "text": "~Remove Hyperlinks",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/sprites/excel/home/editing_sectionitems.png",
                                                            "top": "-18px",
                                                            "left": "-241px"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "envelop",
                                    "layoutData": {
                                        "orientation": "horizontal"
                                    },
                                    "items": [
                                        {
                                            "id": "id_SortFilter",
                                            "type": "imageButton",
                                            "accessKey": "S",
                                            "layoutData": {
                                                "mode": "selectable",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "42px",
                                                    "ht": "69px",
                                                    "src": "img/editingsectionsprite.png",
                                                    "top": "0px",
                                                    "left": "-1px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            },
                                            "tooltip": {
                                                "type": "tooltip",
                                                "body": "Organize your data so it's easier to analyze.<br/><br/>you can sort the selected data from smallest to largest, largest to smallest, or filter out specific values.",
                                                "header": "Sort & Filter"
                                            },
                                            "items": []
                                        },
                                        {
                                            "id": "id_FindNSelect",
                                            "accessKey": "FD",
                                            "type": "imageButton",
                                            "layoutData": {
                                                "mode": "selectable",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "44px",
                                                    "ht": "69px",
                                                    "src": "img/Excel/Home/Editing/find_select_16.png",
                                                    "top": "3px",
                                                    "left": "2px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            },
                                            "tooltip": {
                                                "type": "tooltip",
                                                "body": "Click to see options for finding text in your document.<br/><br/>You can use advanced search options to replace text, jump right to a specific spot, or pick other ways to narrow your search.",
                                                "header": "Find & Select"
                                            },
                                            "items": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "sectionseparator"
                }
            ]
        }
    ]
};


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.MsOfficeConfigJson_m = {
    "id": "myribbon_1",
    "type": "ribbon",
    "stateData": {},
    "layoutData": {
        "imageBaseFolder": "./sample",
        "theme": "default",
        "sectionLauncherIcon": {
            "type": "sprite",
            "wd": "7px",
            "ht": "7px",
            "src": "img/dialogLauncher.png",
            "top": "0px",
            "left": "0px"
        },
        "tabGroupsInfo": [],
        "pinInfo": {
            "id": "id_pin",
            "type": "pin",
            "stateData": {
                "pinned": true
            },
            "visData": {
                "enable": true,
                "visible": true
            },
            "layoutData": {
                "pinIcon": {
                    "type": "sprite",
                    "wd": "18px",
                    "ht": "18px",
                    "src": "img/new/pin.png",
                    "top": "-1px",
                    "left": "-5px"
                },
                "unpinIcon": {
                    "type": "sprite",
                    "wd": "18px",
                    "ht": "18px",
                    "src": "img/new/unpin.png",
                    "top": "-2px",
                    "left": "-5px"
                }
            }
        }
    },
    "items": [
        {
            "type": "tab",
            "id": "id_home",
            "accessKey": "H",
            "layoutData": {
                "text": "Home"
            },
            "items": [
                {
                    "type": "sectionWithFooter",
                    "layoutData": {
                        "name": "Clipboard",
                        "launcher": {
                            "type": "sectionlauncher",
                            "id": "id_clipboard_section_launcher",
                            "accessKey": "FO",
                            "tooltip": {
                                "type": "tooltip",
                                "img": {
                                    "type": "sprite",
                                    "wd": "62px",
                                    "ht": "128px",
                                    "src": "img/Excel/Home/clipboard_launcher.png",
                                    "top": "0px",
                                    "left": "0px"
                                },
                                "body": "See all the items you've copied to the Clipboard.",
                                "header": "Clipboard"
                            },
                            "layoutData": {
                                "ariaLabel": "This is clipboard section launcher"
                            }
                        },
                        "controlSpacingMode": "3rows"
                    },
                    "items": [
                        {
                            "type": "envelop",
                            "layoutData": {
                                "orientation": "horizontal"
                            },
                            "items": [
                                {
                                    "type": "envelop",
                                    "layoutData": {
                                        "orientation": "vertical"
                                    },
                                    "items": [
                                        {
                                            "id": "id_paste",
                                            "type": "verticalSplitButton",
                                            "accessKey": "V",
                                            "tooltip": [
                                                {
                                                    "type": "tooltip",
                                                    "target": "icon",
                                                    "body": "Add content on the Clipboard to your document.",
                                                    "header": "Paste (Ctrl+V)"
                                                },
                                                {
                                                    "type": "tooltip",
                                                    "target": "arrow",
                                                    "body": "Pick a paste option, such as keeping formatting or pasting only content.",
                                                    "header": "Paste (Ctrl+V)"
                                                }
                                            ],
                                            "layoutData": {
                                                "customCls": "lrc_paste",
                                                "text": "Paste",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "32px",
                                                    "ht": "32px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-35px",
                                                    "left": "-137px"
                                                }
                                            },
                                            "items": [
                                                {
                                                    "type": "menuitemHeaderNew",
                                                    "id": "id_pasteitem_header11",
                                                    "layoutData": {
                                                        "text": "Paste Options"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemmultiitem",
                                                    "id": "id_Paste_Options_2",
                                                    "layoutData": {},
                                                    "items": [
                                                        {
                                                            "type": "menuItemImageButton",
                                                            "id": "id_Paste_Options_3",
                                                            "accessKey": "P",
                                                            "tooltip": {
                                                                "type": "tooltip",
                                                                "body": "Paste (P)"
                                                            },
                                                            "layoutData": {
                                                                "icon": {
                                                                    "wd": "24px",
                                                                    "ht": "24px",
                                                                    "src": "img/Excel/Home/Clipboard/Paste.png",
                                                                    "top": "0px",
                                                                    "left": "0px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuItemImageButton",
                                                            "id": "id_Paste_Options_4",
                                                            "accessKey": "F",
                                                            "tooltip": {
                                                                "type": "tooltip",
                                                                "body": "Formulas (F)"
                                                            },
                                                            "layoutData": {
                                                                "icon": {
                                                                    "wd": "24px",
                                                                    "ht": "24px",
                                                                    "src": "img/Excel/Home/Clipboard/Formulas.png",
                                                                    "top": "0px",
                                                                    "left": "0px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuItemImageButton",
                                                            "id": "id_Paste_Options_5",
                                                            "accessKey": "O",
                                                            "tooltip": {
                                                                "type": "tooltip",
                                                                "body": "Formulas & Number Formatting (O)"
                                                            },
                                                            "layoutData": {
                                                                "icon": {
                                                                    "wd": "24px",
                                                                    "ht": "24px",
                                                                    "src": "img/Excel/Home/Clipboard/FormulasNumber.png",
                                                                    "top": "0px",
                                                                    "left": "0px"
                                                                }
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "menuitemmultiitem",
                                                    "id": "id_Paste_Options_33",
                                                    "layoutData": {},
                                                    "items": [
                                                        {
                                                            "type": "menuItemImageButton",
                                                            "id": "id_Paste_Options_6",
                                                            "accessKey": "B",
                                                            "tooltip": {
                                                                "type": "tooltip",
                                                                "body": "No Borders (B)"
                                                            },
                                                            "layoutData": {
                                                                "icon": {
                                                                    "wd": "24px",
                                                                    "ht": "24px",
                                                                    "src": "img/Excel/Home/Clipboard/NoBorders.png",
                                                                    "top": "0px",
                                                                    "left": "0px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuItemImageButton",
                                                            "id": "id_Paste_Options_7",
                                                            "accessKey": "W",
                                                            "tooltip": {
                                                                "type": "tooltip",
                                                                "body": "Keep Source Column Widths (W)"
                                                            },
                                                            "layoutData": {
                                                                "icon": {
                                                                    "wd": "24px",
                                                                    "ht": "24px",
                                                                    "src": "img/Excel/Home/Clipboard/KeepSourceColumn.png",
                                                                    "top": "0px",
                                                                    "left": "0px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuItemImageButton",
                                                            "id": "id_Paste_Options_8",
                                                            "accessKey": "T",
                                                            "tooltip": {
                                                                "type": "tooltip",
                                                                "body": "Keep Source Formatting (K)"
                                                            },
                                                            "layoutData": {
                                                                "icon": {
                                                                    "wd": "24px",
                                                                    "ht": "24px",
                                                                    "src": "img/Excel/Home/Clipboard/KeepSourceFormatting.png",
                                                                    "top": "0px",
                                                                    "left": "0px"
                                                                }
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "menuitemSeparatorNew",
                                                    "id": "id_paste_options_separator1",
                                                    "layoutData": {
                                                        "mode": "fullWidth"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_Paste_Options_Paste_special",
                                                    "accessKey": "S",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Paste Special (Ctrl+Alt+V)"
                                                    },
                                                    "layoutData": {
                                                        "mode": "statelessOnlyText",
                                                        "text": "Paste ~special..."
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "envelop",
                                    "layoutData": {
                                        "orientation": "vertical"
                                    },
                                    "items": [
                                        {
                                            "type": "button",
                                            "id": "id_cut",
                                            "accessKey": "X",
                                            "tooltip": {
                                                "type": "tooltip",
                                                "body": "Remove the selection and put it on the Clipboard so you can paste it somewhere else.",
                                                "header": "Cut (Ctrl+X)"
                                            },
                                            "layoutData": {
                                                "mode": "stateless",
                                                "customCls": "lrc_cut",
                                                "text": "Cut",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/home_fromword2016.png",
                                                    "top": "-225px",
                                                    "left": "-137px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            }
                                        },
                                        {
                                            "type": "button",
                                            "id": "id_copy",
                                            "accessKey": "C",
                                            "tooltip": {
                                                "type": "tooltip",
                                                "target": "icon",
                                                "body": "Put a copy of the selection on the Clipboard so you can paste it somewhere else.",
                                                "header": "Copy (Ctrl+C)"
                                            },
                                            "layoutData": {
                                                "mode": "stateless",
                                                "customCls": "lrc_copy",
                                                "text": "Copy",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-91px",
                                                    "left": "-173px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            }
                                        },
                                        {
                                            "type": "button",
                                            "id": "id_formatpainter",
                                            "accessKey": "FP",
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": true
                                            },
                                            "visData": {
                                                "enable": true,
                                                "visible": true
                                            },
                                            "tooltip": {
                                                "type": "tooltip",
                                                "body": "Like the look of a particular selection? You can apply that look to other content in the document.<br/><br/>To get started:<br/>1. Select content with the formatting you like<br/>2. Click Format Painter<br/>3. Select something else to automatically apply the formatting<br/><br/>FYI: To apply the formatting in multiple places, double-click Format Painter.",
                                                "header": "Format Painter"
                                            },
                                            "layoutData": {
                                                "mode": "retainSelection",
                                                "customCls": "lrc_formatpainter",
                                                "text": "Format Painter",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/formatpainter.png",
                                                    "top": "0px",
                                                    "left": "0px"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "sectionseparator"
                },
                {
                    "type": "sectionWithFooter",
                    "layoutData": {
                        "name": "Font",
                        "launcher": {
                            "id": "id_font_section_launcher",
                            "type": "sectionlauncher",
                            "accessKey": "FN",
                            "tooltip": {
                                "type": "tooltip",
                                "img": {
                                    "type": "sprite",
                                    "wd": "96px",
                                    "ht": "82px",
                                    "src": "img/tooltipSprite.png",
                                    "top": "-957px",
                                    "left": "-0px"
                                },
                                "body": "Customize your text to give it the exact look you want. <br/><br/> You can add a variety of styles and colors to your text, as well as visual effects such as strikethrough and superscript.",
                                "header": "Font Settings (Ctrl+Shift+F)"
                            }
                        },
                        "controlSpacingMode": "2rows"
                    },
                    "items": [
                        {
                            "type": "envelop",
                            "layoutData": {
                                "orientation": "vertical"
                            },
                            "items": [
                                {
                                    "type": "envelop",
                                    "layoutData": {
                                        "orientation": "horizontal"
                                    },
                                    "items": [
                                        {
                                            "type": "inputDropdown",
                                            "id": "id_fontFamily",
                                            "layoutData": {
                                                "mode": "fontFamilyMode",
                                                "customCls": "lrc_fontfamily",
                                                "accessKey": "FF",
                                                "showMenuItemTooltip": true
                                            },
                                            "tooltip": [
                                                {
                                                    "type": "tooltip",
                                                    "header": "Font",
                                                    "body": "Pick a new font for your text"
                                                }
                                            ],
                                            "stateData": {
                                                "selectedItemId": "id_item_Calibri",
                                                "inputFieldValue": "Calibri"
                                            },
                                            "visData": {
                                                "enable": true,
                                                "visible": true
                                            },
                                            "items": [
                                                {
                                                    "type": "menuitemHeader",
                                                    "id": "id_fontitem_header1",
                                                    "layoutData": {
                                                        "text": "Theme Fonts"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_CalibriLight",
                                                    "layoutData": {
                                                        "text": "Calibri Light",
                                                        "subText": "(Headings)",
                                                        "customCls": "lrc_font_CalibriLight",
                                                        "fontFamily": "Calibri Light",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Calibri",
                                                    "layoutData": {
                                                        "text": "Calibri",
                                                        "subText": "(Body)",
                                                        "customCls": "lrc_font_Calibri",
                                                        "fontFamily": "Calibri",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "menuitemHeader",
                                                    "id": "id_fontitem_header2",
                                                    "layoutData": {
                                                        "text": "All Fonts"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_AgencyFB",
                                                    "layoutData": {
                                                        "text": "Agency FB",
                                                        "customCls": "lrc_font_AgencyFB",
                                                        "fontFamily": "Agency FB",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Algerian",
                                                    "layoutData": {
                                                        "text": "Algerian",
                                                        "customCls": "lrc_font_Algerian",
                                                        "fontFamily": "Algerian",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Arial",
                                                    "layoutData": {
                                                        "text": "Arial",
                                                        "customCls": "lrc_font_Arial",
                                                        "fontFamily": "Arial",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_ArialBlack",
                                                    "layoutData": {
                                                        "text": "Arial Black",
                                                        "customCls": "lrc_font_ArialBlack",
                                                        "fontFamily": "Arial Black",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_BellMT",
                                                    "layoutData": {
                                                        "text": "Bell MT",
                                                        "customCls": "lrc_font_BellMT",
                                                        "fontFamily": "Bell MT",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "lrc_font_BerlinSansFb",
                                                    "layoutData": {
                                                        "text": "Berlin Sans FB",
                                                        "customCls": "lrc_font_BerlinSansFb",
                                                        "fontFamily": "Berlin Sans FB",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "lrc_font_Broadway",
                                                    "layoutData": {
                                                        "text": "Broadway",
                                                        "customCls": "lrc_font_Broadway",
                                                        "fontFamily": "Broadway",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Cambria",
                                                    "layoutData": {
                                                        "text": "Cambria",
                                                        "customCls": "lrc_font_Cambria",
                                                        "fontFamily": "Cambria",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Century",
                                                    "layoutData": {
                                                        "text": "Century",
                                                        "customCls": "lrc_font_Century",
                                                        "fontFamily": "Century",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Forte",
                                                    "layoutData": {
                                                        "text": "Forte",
                                                        "customCls": "lrc_font_Forte",
                                                        "fontFamily": "Forte",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Georgia",
                                                    "layoutData": {
                                                        "text": "Georgia",
                                                        "customCls": "lrc_font_Georgia",
                                                        "fontFamily": "Georgia",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Impact",
                                                    "layoutData": {
                                                        "text": "Impact",
                                                        "customCls": "lrc_font_Impact",
                                                        "fontFamily": "Impact",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Jokerman",
                                                    "layoutData": {
                                                        "text": "Jokerman",
                                                        "customCls": "lrc_font_Jokerman",
                                                        "fontFamily": "Jokerman",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Lucida_Sans",
                                                    "layoutData": {
                                                        "text": "Lucida Sans",
                                                        "customCls": "lrc_font_Lucida_Sans",
                                                        "fontFamily": "Lucida Sans",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Segoe_UI",
                                                    "layoutData": {
                                                        "text": "Segoe UI",
                                                        "customCls": "lrc_font_Century",
                                                        "fontFamily": "Segoe UI",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Tahoma",
                                                    "layoutData": {
                                                        "text": "Tahoma",
                                                        "customCls": "lrc_font_Century",
                                                        "fontFamily": "Tahoma",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Times_New_Roman",
                                                    "layoutData": {
                                                        "text": "Times New Roman",
                                                        "customCls": "lrc_font_Century",
                                                        "fontFamily": "Times New Roman",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Verdana",
                                                    "layoutData": {
                                                        "text": "Verdana",
                                                        "customCls": "lrc_font_Verdana",
                                                        "fontFamily": "Verdana",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/fontList_icon.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            "type": "inputDropdown",
                                            "id": "id_fontsize",
                                            "layoutData": {
                                                "mode": "fontSizeMode",
                                                "customCls": "lrc_fontsize",
                                                "accessKey": "FSA",
                                                "showMenuItemTooltip": false
                                            },
                                            "tooltip": [
                                                {
                                                    "type": "tooltip",
                                                    "header": "Font Size",
                                                    "body": "Change the size of your text"
                                                }
                                            ],
                                            "stateData": {
                                                "selectedItemId": "id_item_11",
                                                "inputFieldValue": "11"
                                            },
                                            "visData": {
                                                "enable": true,
                                                "visible": true
                                            },
                                            "items": [
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_8",
                                                    "layoutData": {
                                                        "text": "8",
                                                        "customCls": "lrc_font_8"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_9",
                                                    "layoutData": {
                                                        "text": "9",
                                                        "customCls": "lrc_font_9"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_10",
                                                    "layoutData": {
                                                        "text": "10",
                                                        "customCls": "lrc_font_10"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_11",
                                                    "layoutData": {
                                                        "text": "11",
                                                        "customCls": "lrc_font_11"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_12",
                                                    "layoutData": {
                                                        "text": "12",
                                                        "customCls": "lrc_font_12"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_14",
                                                    "layoutData": {
                                                        "text": "14",
                                                        "customCls": "lrc_font_14"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_16",
                                                    "layoutData": {
                                                        "text": "16",
                                                        "customCls": "lrc_font_16"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_18",
                                                    "layoutData": {
                                                        "text": "18",
                                                        "customCls": "lrc_font_18"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_20",
                                                    "layoutData": {
                                                        "text": "20",
                                                        "customCls": "lrc_font_20"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_22",
                                                    "layoutData": {
                                                        "text": "22",
                                                        "customCls": "lrc_font_22"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_24",
                                                    "layoutData": {
                                                        "text": "24",
                                                        "customCls": "lrc_font_24"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_26",
                                                    "layoutData": {
                                                        "text": "26",
                                                        "customCls": "lrc_font_26"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_28",
                                                    "layoutData": {
                                                        "text": "28",
                                                        "customCls": "lrc_font_28"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_36",
                                                    "layoutData": {
                                                        "text": "36",
                                                        "customCls": "lrc_font_36"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_48",
                                                    "layoutData": {
                                                        "text": "48",
                                                        "customCls": "lrc_font_48"
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_72",
                                                    "layoutData": {
                                                        "text": "72",
                                                        "customCls": "lrc_font_72"
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            "type": "button",
                                            "id": "id_increasefont",
                                            "accessKey": "FG",
                                            "tooltip": {
                                                "type": "tooltip",
                                                "body": "Make your text a bit bigger.",
                                                "header": "Increase Font Size"
                                            },
                                            "layoutData": {
                                                "mode": "stateless",
                                                "customCls": "lrc_increasefont",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/fontupdown.png",
                                                    "top": "0px",
                                                    "left": "2px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            }
                                        },
                                        {
                                            "type": "button",
                                            "id": "id_decreasefont",
                                            "accessKey": "FK",
                                            "tooltip": {
                                                "type": "tooltip",
                                                "body": "Make your text a bit smaller.",
                                                "header": "Decrease Font Size"
                                            },
                                            "layoutData": {
                                                "mode": "stateless",
                                                "customCls": "lrc_decreasefont",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/fontupdown.png",
                                                    "top": "0px",
                                                    "left": "-19px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            }
                                        }
                                    ]
                                },
                                {
                                    "type": "envelop",
                                    "layoutData": {
                                        "orientation": "horizontal"
                                    },
                                    "items": [
                                        {
                                            "type": "button",
                                            "id": "id_bold",
                                            "accessKey": "1",
                                            "tooltip": {
                                                "type": "tooltip",
                                                "body": "Make your text bold.",
                                                "header": "Bold (Ctrl+B)"
                                            },
                                            "layoutData": {
                                                "mode": "selectable",
                                                "customCls": "lrc_bold",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-87px",
                                                    "left": "-137px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "enable": true,
                                                "visible": true
                                            }
                                        },
                                        {
                                            "type": "button",
                                            "id": "id_italic",
                                            "accessKey": "2",
                                            "tooltip": {
                                                "type": "tooltip",
                                                "body": "Italicize your text.",
                                                "header": "Italic (Ctrl+I)"
                                            },
                                            "layoutData": {
                                                "mode": "selectable",
                                                "customCls": "lrc_italic",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-73px",
                                                    "left": "-173px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            }
                                        },
                                        {
                                            "type": "splitButton",
                                            "id": "id_underline",
                                            "accessKey": "3",
                                            "tooltip": [
                                                {
                                                    "type": "tooltip",
                                                    "target": "icon",
                                                    "body": "Underline your text.",
                                                    "header": "Underline (Ctrl+U)"
                                                },
                                                {
                                                    "type": "tooltip",
                                                    "target": "arrow",
                                                    "body": "Underline your text.",
                                                    "header": "Underline (Ctrl+U)"
                                                }
                                            ],
                                            "stateData": {
                                                "selectedItem": "id_underline|id_underline_single",
                                                "isCuttentIconToggleable": true
                                            },
                                            "layoutData": {
                                                "customCls": "lrc_underline",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-104px",
                                                    "left": "-137px"
                                                }
                                            },
                                            "items": [
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_underline_single",
                                                    "accessKey": "U",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Underline your text.",
                                                        "header": "Underline (Ctrl+U)"
                                                    },
                                                    "layoutData": {
                                                        "mode": "selectable",
                                                        "toggleGroup": "default",
                                                        "text": "~Underline",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/ULineSprite.png",
                                                            "top": "1px",
                                                            "left": "0px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_underline_double",
                                                    "accessKey": "D",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Double underline the selected text.",
                                                        "header": "Double Underline"
                                                    },
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "selectable",
                                                        "text": "~Double Underline",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/ULineSprite.png",
                                                            "top": "-23px",
                                                            "left": "0px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            "type": "controlSeparator"
                                        },
                                        {
                                            "type": "splitButton",
                                            "id": "id_border",
                                            "accessKey": "B",
                                            "tooltip": [
                                                {
                                                    "type": "tooltip",
                                                    "target": "icon",
                                                    "body": "Bottom Border"
                                                },
                                                {
                                                    "type": "tooltip",
                                                    "target": "arrow",
                                                    "body": "Apply borders to the currently selected cells.",
                                                    "header": "Bottom Border"
                                                }
                                            ],
                                            "stateData": {
                                                "selectedItem": "id_border|id_item_BottomBorder",
                                                "isCuttentIconToggleable": false
                                            },
                                            "layoutData": {
                                                "customCls": "lrc_border",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/Excel/Home/Font/Font_Borders.png",
                                                    "top": "-5px",
                                                    "left": "-6px"
                                                }
                                            },
                                            "items": [
                                                {
                                                    "type": "menuitemHeaderNew",
                                                    "id": "id_borderitem_header1",
                                                    "layoutData": {
                                                        "text": "Borders"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_BottomBorder",
                                                    "accessKey": "O",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "B~ottom Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-5px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_TopBorder",
                                                    "accessKey": "P",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "To~p Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-29px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_LeftBorder",
                                                    "accessKey": "L",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "~Left Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-53px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_RightBorder",
                                                    "accessKey": "R",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "~Right Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-77px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemSeparatorNew",
                                                    "id": "id_borderitem_separator1",
                                                    "layoutData": {
                                                        "mode": "withOffset"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_NoBorder",
                                                    "accessKey": "N",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "~No Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-103px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_AllBorders",
                                                    "accessKey": "A",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "~All Borders",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-127px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_OutsideBorders",
                                                    "accessKey": "S",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "Out~side Borders",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-151px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_ThickOutsideBorder",
                                                    "accessKey": "T",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "~Thick Outside Borders",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-175px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemSeparatorNew",
                                                    "id": "id_borderitem_separator2",
                                                    "layoutData": {
                                                        "mode": "withOffset"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_BottomDoubleBorder",
                                                    "accessKey": "B",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "~Bottom Double Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-201px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_ThickBottomBorder",
                                                    "accessKey": "H",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "T~hick Bottom Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-226px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_TopAndBottomBorder",
                                                    "accessKey": "D",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "Top an~d Bottom Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-249px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_TopAndThickBottomBorder",
                                                    "accessKey": "C",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "Top and Thi~ck Bottom Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-274px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_TopAndDoubleBottomBorder",
                                                    "accessKey": "U",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "stateless",
                                                        "text": "Top and Do~uble Bottom Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-298px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemHeaderNew",
                                                    "id": "id_borderitem_header2",
                                                    "layoutData": {
                                                        "text": "Draw Borders"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_DrawBorder",
                                                    "accessKey": "W",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Draw Outside Border"
                                                    },
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "selectable",
                                                        "text": "Dra~w Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-344px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_DrawBorderGrid",
                                                    "accessKey": "G",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "selectable",
                                                        "text": "Draw Border ~Grid",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-369px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_EraseBorder",
                                                    "accessKey": "E",
                                                    "layoutData": {
                                                        "toggleGroup": "default",
                                                        "mode": "selectable",
                                                        "text": "~Erase Border",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-393px"
                                                        },
                                                        "changeParentIcon": true
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithItems",
                                                    "id": "id_item_LineColor",
                                                    "accessKey": "I",
                                                    "layoutData": {
                                                        "mode": "withIcon",
                                                        "text": "L~ine Color",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-417px"
                                                        }
                                                    },
                                                    "items": [
                                                        {
                                                            "type": "colorPicker",
                                                            "id": "color_picker_2",
                                                            "layoutData": {
                                                                "theme": "OfficeExcel",
                                                                "mode": "FontColor"
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "menuitemWithItems",
                                                    "id": "id_item_LineStyle",
                                                    "accessKey": "Y",
                                                    "layoutData": {
                                                        "mode": "withoutIcon",
                                                        "text": "Line St~yle"
                                                    },
                                                    "items": [
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle0",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/1.png",
                                                                    "left": "0px",
                                                                    "top": "-6px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle1",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/2.png",
                                                                    "left": "0px",
                                                                    "top": "-6px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle2",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/3.png",
                                                                    "left": "0px",
                                                                    "top": "-3px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle3",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/4.png",
                                                                    "left": "0px",
                                                                    "top": "-3px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle4",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/5.png",
                                                                    "left": "0px",
                                                                    "top": "-3px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle5",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/6.png",
                                                                    "left": "0px",
                                                                    "top": "-3px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle6",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/7.png",
                                                                    "left": "0px",
                                                                    "top": "-3px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle7",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/8.png",
                                                                    "left": "0px",
                                                                    "top": "-6px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle8",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/9.png",
                                                                    "left": "0px",
                                                                    "top": "-4px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle9",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/10.png",
                                                                    "left": "0px",
                                                                    "top": "-3px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle10",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/11.png",
                                                                    "left": "0px",
                                                                    "top": "-5px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle11",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/12.png",
                                                                    "left": "0px",
                                                                    "top": "-3px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle12",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/13.png",
                                                                    "left": "0px",
                                                                    "top": "-5px"
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": "menuitemWithModes",
                                                            "id": "id_linestyle13",
                                                            "layoutData": {
                                                                "mode": "linestyle",
                                                                "toggleGroup": "linestyle",
                                                                "pressThisItemOnClick": "id_border|id_item_DrawBorder",
                                                                "icon": {
                                                                    "type": "sprite",
                                                                    "wd": "110px",
                                                                    "ht": "16px",
                                                                    "src": "img/new/borderLinestyles/14.png",
                                                                    "left": "0px",
                                                                    "top": "-3px"
                                                                }
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "menuitemSeparatorNew",
                                                    "id": "id_borderitem_separator3",
                                                    "layoutData": {
                                                        "mode": "withOffset"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_MoreBorders",
                                                    "accessKey": "M",
                                                    "layoutData": {
                                                        "mode": "stateless",
                                                        "text": "~More Borders...",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Font/Font_Borders.png",
                                                            "left": "-4px",
                                                            "top": "-466px"
                                                        }
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            "type": "controlSeparator"
                                        },
                                        {
                                            "type": "colorPickerControl",
                                            "id": "id_fillcolor",
                                            "accessKey": "H",
                                            "stateData": {
                                                "selectedValue": "#FFFF00",
                                                "updateColorStrip": true
                                            },
                                            "visData": {
                                                "enable": true,
                                                "visible": true,
                                            },
                                            "tooltip": [
                                                {
                                                    "type": "tooltip",
                                                    "target": "icon",
                                                    "body": "Color the background of cells to make them stand out.",
                                                    "header": "Fill Color"
                                                },
                                                {
                                                    "type": "tooltip",
                                                    "target": "arrow",
                                                    "body": "Color the background of cells to make them stand out.",
                                                    "header": "Fill Color"
                                                }
                                            ],
                                            "layoutData": {
                                                "theme": "OfficeExcel",
                                                "mode": "FillColor",
                                                "accessKey": "H",
                                                "customCls": "lrc_fillcolor",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-37px",
                                                    "left": "-189px"
                                                }
                                            }
                                        },
                                        {
                                            "type": "colorPickerControl",
                                            "id": "id_fontcolor",
                                            "accessKey": "FC",
                                            "stateData": {
                                                "selectedValue": "#FF0000",
                                                "updateColorStrip": true
                                            },
                                            "visData": {
                                                "enable": true,
                                                "visible": true,
                                            },
                                            "tooltip": [
                                                {
                                                    "type": "tooltip",
                                                    "target": "icon",
                                                    "body": "Change the color of your text.",
                                                    "header": "Font Color"
                                                },
                                                {
                                                    "type": "tooltip",
                                                    "target": "arrow",
                                                    "body": "Change the color of your text.",
                                                    "header": "Font Color"
                                                }
                                            ],
                                            "layoutData": {
                                                "theme": "OfficeExcel",
                                                "mode": "FontColor",
                                                "customCls": "lrc_fontcolor",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-137px",
                                                    "left": "-19px"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "sectionseparator"
                },
                {
                    "type": "sectionWithFooter",
                    "layoutData": {
                        "name": "Alignment",
                        "launcher": {
                            "id": "id_alignment_section_launcher",
                            "type": "sectionlauncher",
                            "accessKey": "FA",
                            "tooltip": {
                                "type": "tooltip",
                                "img": {
                                    "type": "sprite",
                                    "wd": "96px",
                                    "ht": "95px",
                                    "src": "img/tooltipSprite.png",
                                    "top": "-768px",
                                    "left": "-0px"
                                },
                                "body": "Don't see what you're looking for?<br/><br/>Check out the full set of cell alignment options.",
                                "header": "Alignment Settings"
                            }
                        },
                        "controlSpacingMode": "2rows"
                    },
                    "items": [
                        {
                            "type": "envelop",
                            "layoutData": {
                                "orientation": "horizontal"
                            },
                            "items": [
                                {
                                    "type": "envelop",
                                    "layoutData": {
                                        "orientation": "vertical"
                                    },
                                    "items": [
                                        {
                                            "type": "envelop",
                                            "layoutData": {
                                                "orientation": "horizontal"
                                            },
                                            "items": [
                                                {
                                                    "type": "button",
                                                    "id": "id_topAlign",
                                                    "accessKey": "AT",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Align text to the top.",
                                                        "header": "Top Align"
                                                    },
                                                    "layoutData": {
                                                        "mode": "selectable",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/EwaEdit.png",
                                                            "left": "-189px",
                                                            "top": "-1px"
                                                        }
                                                    },
                                                    "stateData": {
                                                        "selected": false,
                                                        "retainSelection": false
                                                    },
                                                    "visData": {
                                                        "visible": true,
                                                        "enable": true
                                                    }
                                                },
                                                {
                                                    "type": "button",
                                                    "id": "id_middlealign",
                                                    "accessKey": "AM",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Align text so that it is centered between the top and bottom of the cell.",
                                                        "header": "Middle Align"
                                                    },
                                                    "layoutData": {
                                                        "mode": "selectable",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/EwaEdit.png",
                                                            "left": "-155px",
                                                            "top": "-69px"
                                                        }
                                                    },
                                                    "stateData": {
                                                        "selected": false,
                                                        "retainSelection": false
                                                    },
                                                    "visData": {
                                                        "visible": true,
                                                        "enable": true
                                                    }
                                                },
                                                {
                                                    "type": "button",
                                                    "id": "id_bottomAlign",
                                                    "accessKey": "AB",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Align text to the bottom.",
                                                        "header": "Bottom Align"
                                                    },
                                                    "layoutData": {
                                                        "mode": "selectable",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/EwaEdit.png",
                                                            "left": "-163px",
                                                            "top": "-159px"
                                                        }
                                                    },
                                                    "stateData": {
                                                        "selected": false,
                                                        "retainSelection": false
                                                    },
                                                    "visData": {
                                                        "visible": true,
                                                        "enable": true
                                                    }
                                                },
                                                {
                                                    "type": "controlSeparator"
                                                },
                                                {
                                                    "type": "imageButton",
                                                    "id": "id_orientation",
                                                    "accessKey": "FQ",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Rotate your text diagonally or vertically. This is a great way to label narrow columns.",
                                                        "header": "Orientation"
                                                    },
                                                    "layoutData": {
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "33px",
                                                            "ht": "23px",
                                                            "src": "img/new/orientation.png",
                                                            "left": "-2px",
                                                            "top": "-1px"
                                                        }
                                                    },
                                                    "items": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "envelop",
                                            "layoutData": {
                                                "orientation": "horizontal"
                                            },
                                            "items": [
                                                {
                                                    "type": "button",
                                                    "id": "id_leftAlign",
                                                    "accessKey": "AL",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Align your content to the left.",
                                                        "header": "Align Left"
                                                    },
                                                    "layoutData": {
                                                        "mode": "selectable",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/EwaEdit.png",
                                                            "left": "-145px",
                                                            "top": "-159px"
                                                        }
                                                    },
                                                    "stateData": {
                                                        "selected": false,
                                                        "retainSelection": false
                                                    },
                                                    "visData": {
                                                        "visible": true,
                                                        "enable": true
                                                    }
                                                },
                                                {
                                                    "type": "button",
                                                    "id": "id_centerAlign",
                                                    "accessKey": "AC",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Center your content.",
                                                        "header": "Center"
                                                    },
                                                    "layoutData": {
                                                        "mode": "selectable",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/EwaEdit.png",
                                                            "left": "-55px",
                                                            "top": "-173px"
                                                        }
                                                    },
                                                    "stateData": {
                                                        "selected": false,
                                                        "retainSelection": false
                                                    },
                                                    "visData": {
                                                        "visible": true,
                                                        "enable": true
                                                    }
                                                },
                                                {
                                                    "type": "button",
                                                    "id": "id_rightAlign",
                                                    "accessKey": "AR",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Align your content to the right.",
                                                        "header": "Align Right"
                                                    },
                                                    "layoutData": {
                                                        "mode": "selectable",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/EwaEdit.png",
                                                            "left": "-127px",
                                                            "top": "-159px"
                                                        }
                                                    },
                                                    "stateData": {
                                                        "selected": false,
                                                        "retainSelection": false
                                                    },
                                                    "visData": {
                                                        "visible": true,
                                                        "enable": true
                                                    }
                                                },
                                                {
                                                    "type": "controlSeparator"
                                                },
                                                {
                                                    "type": "button",
                                                    "id": "id_decreaseIndent",
                                                    "accessKey": "5",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Move your content closer to the cell border.",
                                                        "header": "Decrease Indent"
                                                    },
                                                    "layoutData": {
                                                        "mode": "stateless",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/rightLeftIndent.png",
                                                            "left": "-2px",
                                                            "top": "0px"
                                                        }
                                                    },
                                                    "stateData": {
                                                        "selected": false,
                                                        "retainSelection": false
                                                    },
                                                    "visData": {
                                                        "visible": true,
                                                        "enable": true
                                                    }
                                                },
                                                {
                                                    "type": "button",
                                                    "id": "id_increaseIndent",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Move your content farther away from the cell border.",
                                                        "header": "Increase Indent"
                                                    },
                                                    "accessKey": "6",
                                                    "layoutData": {
                                                        "mode": "stateless",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/rightLeftIndent.png",
                                                            "left": "-24px",
                                                            "top": "0px"
                                                        }
                                                    },
                                                    "stateData": {
                                                        "selected": false,
                                                        "retainSelection": false
                                                    },
                                                    "visData": {
                                                        "visible": true,
                                                        "enable": true
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "controlSeparator",
                                    "layoutData": {
                                        "customCls": "lrc_fullControlSeparator"
                                    },
                                },
                                {
                                    "type": "envelop",
                                    "layoutData": {
                                        "orientation": "vertical"
                                    },
                                    "items": [
                                        {
                                            "id": "id_wrapText",
                                            "accessKey": "W",
                                            "type": "button",
                                            "tooltip": {
                                                "type": "tooltip",
                                                "img": {
                                                    "type": "sprite",
                                                    "wd": "96px",
                                                    "ht": "128px",
                                                    "src": "img/tooltipSprite.png",
                                                    "top": "-0px",
                                                    "left": "-0px"
                                                },
                                                "body": "Wrap extra-long text into multiple lines so you can see all of it.",
                                                "header": "Wrap Text"
                                            },
                                            "layoutData": {
                                                "mode": "selectable",
                                                "text": "Wrap Text",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "left": "-189px",
                                                    "top": "-19px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            },
                                            "items": []
                                        },
                                        {
                                            "id": "id_mergeAndCenter",
                                            "type": "splitButton",
                                            "accessKey": "M",
                                            "stateData": {
                                                "selectedItem": "id_mergeAndCenter|id_item_mergeAndCenter",
                                            },
                                            "tooltip": [
                                                {
                                                    "type": "tooltip",
                                                    "target": "icon",
                                                    "img": {
                                                        "type": "sprite",
                                                        "wd": "96px",
                                                        "ht": "128px",
                                                        "src": "img/tooltipSprite.png",
                                                        "top": "-384px",
                                                        "left": "-0px"
                                                    },
                                                    "body": "Combine and center the contents of the selected cells in a new larger cell.<br/><br/>This is a great way to create a label that spans multiple columns.",
                                                    "header": "Merge & Center"
                                                },
                                                {
                                                    "type": "tooltip",
                                                    "target": "arrow",
                                                    "body": "Pick how to merge cells.",
                                                    "header": "Merge & Center"
                                                }
                                            ],
                                            "layoutData": {
                                                "text": "Merge & Center",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/Excel/Home/Alignment/Alignment_MergeCenter.png",
                                                    "left": "-6px",
                                                    "top": "-6px"
                                                }
                                            },
                                            "items": [
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_mergeAndCenter",
                                                    "accessKey": "C",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "img": {
                                                            "type": "sprite",
                                                            "wd": "96px",
                                                            "ht": "128px",
                                                            "src": "img/tooltipSprite.png",
                                                            "top": "-384px",
                                                            "left": "-0px"
                                                        },
                                                        "body": "Combine and center the contents of the selected cells in a new larger cell.<br/><br/>This is a great way to create a label that spans multiple columns.",
                                                        "header": "Merge & Center"
                                                    },
                                                    "layoutData": {
                                                        "mode": "selectable",
                                                        "changeParentIcon": true,
                                                        "text": "Merge & ~Center",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Alignment/Alignment_MergeCenter.png",
                                                            "top": "-6px",
                                                            "left": "-6px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_MergeAcross",
                                                    "accessKey": "A",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Merge selected cells in the same row into one large cell.",
                                                        "header": "Merge Across"
                                                    },
                                                    "layoutData": {
                                                        "text": "Merge ~Across",
                                                        "mode": "stateless",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Alignment/Alignment_MergeCenter.png",
                                                            "top": "-30px",
                                                            "left": "-6px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_MergeCells",
                                                    "accessKey": "M",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Merge selected cells into one cell.",
                                                        "header": "Merge Cells"
                                                    },
                                                    "layoutData": {
                                                        "text": "~Merge Cells",
                                                        "mode": "stateless",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Alignment/Alignment_MergeCenter.png",
                                                            "top": "-54px",
                                                            "left": "-6px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_Unmerge",
                                                    "accessKey": "U",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "body": "Split the current cell into multiple cells",
                                                        "header": "Unmerge Cells"
                                                    },
                                                    "layoutData": {
                                                        "text": "~Unmerge",
                                                        "mode": "stateless",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/Excel/Home/Alignment/Alignment_MergeCenter.png",
                                                            "top": "-78px",
                                                            "left": "-6px"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "sectionseparator"
                },
                {
                    "type": "sectionWithFooter",
                    "layoutData": {
                        "name": "Number",
                        "launcher": {
                            "id": "id_number_section_launcher",
                            "type": "sectionlauncher",
                            "accessKey": "FM",
                            "tooltip": {
                                "type": "tooltip",
                                "img": {
                                    "type": "sprite",
                                    "wd": "100px",
                                    "ht": "105px",
                                    "src": "img/Excel/PageLayout/launcher_tooltip.png",
                                    "top": "0px",
                                    "left": "0px"
                                },
                                "body": "Don't see what you're looking for?  <br/> <br/>Check out the full set of page formatting options.",
                                "header": "Number Format"
                            }
                        },
                        "controlSpacingMode": "2rows"
                    },
                    "items": [
                        {
                            "type": "envelop",
                            "layoutData": {
                                "orientation": "vertical"
                            },
                            "items": [
                                {
                                    "type": "envelop",
                                    "layoutData": {
                                        "orientation": "horizontal"
                                    },
                                    "items": [
                                        {
                                            "type": "inputDropdown",
                                            "id": "id_numberFormat",
                                            "accessKey": "N",
                                            "stateData": {
                                                "selectedItemId": "id_item_General",
                                                "inputFieldValue": "General"
                                            },
                                            "visData": {
                                                "enable": true,
                                                "visible": true
                                            },
                                            "layoutData": {
                                                "mode": "fontFamilyMode",
                                                "customCls": "lrc_numberFormat",
                                                "showMenuItemTooltip": false
                                            },
                                            "tooltip": [
                                                {
                                                    "type": "tooltip",
                                                    "header": "Number Format",
                                                    "body": "Choose the format for your cells, such as percentage, currency, date or time."
                                                }
                                            ],
                                            "items": [
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_General",
                                                    "layoutData": {
                                                        "text": "General",
                                                        "subText": {
                                                            "text": "No specific format",
                                                            "mode": "mode2"
                                                        },
                                                        "customCls": "lrc_numberFormat_General",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "45px",
                                                            "ht": "36px",
                                                            "src": "img/Excel/Home/number.png",
                                                            "top": "-3px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Number",
                                                    "layoutData": {
                                                        "text": "Number",
                                                        "subText": {
                                                            "text": "11.00",
                                                            "mode": "mode2"
                                                        },
                                                        "customCls": "lrc_numberFormat_Number",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "45px",
                                                            "ht": "36px",
                                                            "src": "img/Excel/Home/number.png",
                                                            "top": "-49px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Currency",
                                                    "layoutData": {
                                                        "text": "Currency",
                                                        "customCls": "lrc_numberFormat_Currency",
                                                        "subText": {
                                                            "text": "$11.00",
                                                            "mode": "mode2"
                                                        },
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "45px",
                                                            "ht": "36px",
                                                            "src": "img/Excel/Home/number.png",
                                                            "top": "-91px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Accounting",
                                                    "layoutData": {
                                                        "text": "Accounting",
                                                        "customCls": "lrc_numberFormat_Accounting",
                                                        "subText": {
                                                            "text": "$11.00",
                                                            "mode": "mode2"
                                                        },
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "45px",
                                                            "ht": "36px",
                                                            "src": "img/Excel/Home/number.png",
                                                            "top": "-135px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_ShortDate",
                                                    "layoutData": {
                                                        "text": "Short Date",
                                                        "customCls": "lrc_numberFormat_ShortDate",
                                                        "subText": {
                                                            "text": "5/11/1900",
                                                            "mode": "mode2"
                                                        },
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "45px",
                                                            "ht": "36px",
                                                            "src": "img/Excel/Home/number.png",
                                                            "top": "-180px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_LongDate",
                                                    "layoutData": {
                                                        "text": "Long Date",
                                                        "customCls": "lrc_numberFormat_LongDate",
                                                        "subText": {
                                                            "text": "Friday, May 11, 1900",
                                                            "mode": "mode2"
                                                        },
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "45px",
                                                            "ht": "36px",
                                                            "src": "img/Excel/Home/number.png",
                                                            "top": "-224px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Time",
                                                    "layoutData": {
                                                        "text": "Time",
                                                        "customCls": "lrc_numberFormat_Time",
                                                        "subText": {
                                                            "text": "12:00:00 AM",
                                                            "mode": "mode2"
                                                        },
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "45px",
                                                            "ht": "36px",
                                                            "src": "img/Excel/Home/number.png",
                                                            "top": "-266px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Percentage",
                                                    "layoutData": {
                                                        "text": "Percentage",
                                                        "customCls": "lrc_numberFormat_Percentage",
                                                        "subText": {
                                                            "text": "1100.00%",
                                                            "mode": "mode2"
                                                        },
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "45px",
                                                            "ht": "36px",
                                                            "src": "img/Excel/Home/number.png",
                                                            "left": "0px",
                                                            "top": "-312px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Text",
                                                    "layoutData": {
                                                        "text": "Text",
                                                        "customCls": "lrc_numberFormat_Text",
                                                        "subText": {
                                                            "text": "11",
                                                            "mode": "mode2"
                                                        },
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "45px",
                                                            "ht": "36px",
                                                            "src": "img/Excel/Home/number.png",
                                                            "top": "-441px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "inputDropdownMenuItem",
                                                    "id": "id_item_Custom",
                                                    "layoutData": {
                                                        "text": "Custom",
                                                        "customCls": "lrc_numberFormat_Custom",
                                                        "subText": {
                                                            "text": "11",
                                                            "mode": "mode2"
                                                        },
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "45px",
                                                            "ht": "36px",
                                                            "src": "img/Excel/Home/number.png",
                                                            "top": "-441px",
                                                            "left": "0px"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "envelop",
                                    "layoutData": {
                                        "orientation": "horizontal"
                                    },
                                    "items": [
                                        {
                                            "type": "button",
                                            "id": "id_AccountingNumberFormat",
                                            "accessKey": "AN",
                                            "tooltip": {
                                                "type": "tooltip",
                                                "header": "Accounting Number Format",
                                                "body": "Format as Dollar, Euros, or other currency"
                                            },
                                            "layoutData": {
                                                "mode": "stateless",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/dollar.png",
                                                    "left": "2px",
                                                    "top": "1px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            }
                                        },
                                        {
                                            "type": "button",
                                            "id": "id_PercentStyle",
                                            "accessKey": "P",
                                            "layoutData": {
                                                "mode": "stateless",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/percent.png",
                                                    "left": "2px",
                                                    "top": "1px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            },
                                            "tooltip": {
                                                "type": "tooltip",
                                                "header": "Percent Style (Ctrl+Shift+%)",
                                                "body": "Format as a percent"
                                            }
                                        },
                                        {
                                            "type": "button",
                                            "id": "id_CommaStyle",
                                            "accessKey": "K",
                                            "layoutData": {
                                                "mode": "stateless",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "left": "-91px",
                                                    "top": "-173px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            },
                                            "tooltip": {
                                                "type": "tooltip",
                                                "header": "Comma Style",
                                                "body": "Format with a thousands separator."
                                            }
                                        },
                                        {
                                            "type": "controlSeparator"
                                        },
                                        {
                                            "type": "button",
                                            "id": "id_IncreaseDecimal",
                                            "accessKey": "0",
                                            "layoutData": {
                                                "mode": "stateless",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "left": "-73px",
                                                    "top": "-173px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            },
                                            "tooltip": {
                                                "type": "tooltip",
                                                "header": "Increase Decimal",
                                                "body": "Show more decimal places for a more precise value."
                                            }
                                        },
                                        {
                                            "type": "button",
                                            "id": "id_DecreaseDecimal",
                                            "accessKey": "9",
                                            "layoutData": {
                                                "mode": "stateless",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "left": "-109px",
                                                    "top": "-173px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            },
                                            "tooltip": {
                                                "type": "tooltip",
                                                "header": "Decrease Decimal",
                                                "body": "Show fewer decimal places."
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "sectionSeparator"
                },
                {
                    "type": "sectionWithFooter",
                    "layoutData": {
                        "name": "Cells",
                        "controlSpacingMode": "3rows"
                    },
                    "items": [
                        {
                            "type": "envelop",
                            "layoutData": {
                                "orientation": "horizontal"
                            },
                            "items": [
                                {
                                    "type": "buttonDropdown",
                                    "id": "id_insert",
                                    "accessKey": "I",
                                    "layoutData": {
                                        "mode": "image",
                                        "icon": {
                                            "wd": "42px",
                                            "ht": "69px",
                                            "src": "img/new/cellsSectionControls_big.png",
                                            "top": "-2px",
                                            "left": "-7px"
                                        }
                                    },
                                    "tooltip": {
                                        "type": "tooltip",
                                        "header": "Insert Cells",
                                        "body": "Add cells, rows, columns or sheets to your workbook."
                                    },
                                    "items": [
                                        {
                                            "type": "menuitemWithModes",
                                            "id": "id_item_insert_sheet_rows",
                                            "accessKey": "R",
                                            "layoutData": {
                                                "mode": "stateless",
                                                "text": "Insert Sheet ~Rows",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-137px",
                                                    "left": "-55px"
                                                }
                                            }
                                        },
                                        {
                                            "type": "menuitemWithModes",
                                            "id": "id_item_insert_sheet_columns",
                                            "accessKey": "C",
                                            "layoutData": {
                                                "mode": "stateless",
                                                "text": "Insert Sheet ~Columns",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-37px",
                                                    "left": "-171px"
                                                }
                                            }
                                        },
                                        {
                                            "type": "menuitemSeparatorNew",
                                            "id": "id_insertitem_separator2",
                                            "layoutData": {
                                                "mode": "withOffset"
                                            }
                                        },
                                        {
                                            "type": "menuitemWithModes",
                                            "id": "id_item_insert_sheet",
                                            "accessKey": "S",
                                            "tooltip": {
                                                "type": "tooltip",
                                                "body": "Insert Worksheet (Shift+F11)"
                                            },
                                            "layoutData": {
                                                "mode": "stateless",
                                                "text": "In~sert Sheet",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-1px",
                                                    "left": "-171px"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "type": "buttonDropdown",
                                    "id": "id_delete",
                                    "accessKey": "D",
                                    "layoutData": {
                                        "mode": "image",
                                        "icon": {
                                            "wd": "42px",
                                            "ht": "69px",
                                            "src": "img/new/cellsSectionControls_big.png",
                                            "top": "-2px",
                                            "left": "-49px"
                                        }
                                    },
                                    "tooltip": {
                                        "type": "tooltip",
                                        "header": "Delete Cells",
                                        "body": "Delete cells, rows or columns, or sheets from your workbook.<br/><br/>FYI: To delete multiple rows or columns at a time, select multiple rows or columns in the sheet, and click Delete."
                                    },
                                    "items": [
                                        {
                                            "type": "menuitemWithModes",
                                            "id": "id_item_delete_sheet_rows",
                                            "accessKey": "R",
                                            "layoutData": {
                                                "mode": "stateless",
                                                "text": "Delete Sheet ~Rows",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-141px",
                                                    "left": "-145px"
                                                }
                                            }
                                        },
                                        {
                                            "type": "menuitemWithModes",
                                            "id": "id_item_delete_sheet_columns",
                                            "accessKey": "C",
                                            "layoutData": {
                                                "mode": "stateless",
                                                "text": "Delete Sheet ~Columns",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-137px",
                                                    "left": "-92px"
                                                }
                                            }
                                        },
                                        {
                                            "type": "menuitemSeparatorNew",
                                            "id": "id_deleteitem_separator2",
                                            "layoutData": {
                                                "mode": "withOffset"
                                            }
                                        },
                                        {
                                            "type": "menuitemWithModes",
                                            "id": "id_item_delete_sheet",
                                            "accessKey": "S",
                                            "layoutData": {
                                                "mode": "stateless",
                                                "text": "Delete ~Sheet",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/EwaEdit.png",
                                                    "top": "-155px",
                                                    "left": "-73px"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "type": "imageButton",
                                    "id": "id_format",
                                    "accessKey": "O",
                                    "layoutData": {
                                        "icon": {
                                            "wd": "43px",
                                            "ht": "69px",
                                            "src": "img/new/cellFormat.png",
                                            "top": "-2px",
                                            "left": "-2px"
                                        }
                                    },
                                    "tooltip": {
                                        "type": "tooltip",
                                        "header": "Format",
                                        "body": "Change the row height or column width, organize sheets, or protect or hide cells."
                                    },
                                    "items": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "sectionSeparator"
                },
                {
                    "type": "sectionWithFooter",
                    "layoutData": {
                        "name": "Editing",
                        "controlSpacingMode": "3rows"
                    },
                    "items": [
                        {
                            "type": "envelop",
                            "layoutData": {
                                "orientation": "horizontal"
                            },
                            "items": [
                                {
                                    "type": "envelop",
                                    "layoutData": {
                                        "orientation": "vertical"
                                    },
                                    "items": [
                                        {
                                            "id": "id_AutoSum",
                                            "type": "splitButton",
                                            "accessKey": "U",
                                            "layoutData": {
                                                "text": "AutoSum",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "16px",
                                                    "ht": "16px",
                                                    "src": "img/autosum.png",
                                                    "left": "0px",
                                                    "top": "0px"
                                                }
                                            },
                                            "tooltip": [
                                                {
                                                    "type": "tooltip",
                                                    "target": "icon",
                                                    "img": {
                                                        "type": "sprite",
                                                        "wd": "96px",
                                                        "ht": "128px",
                                                        "src": "img/Excel/Home/Editing/Autosum_tooltip.png",
                                                        "top": "0px",
                                                        "left": "0px"
                                                    },
                                                    "header": "Sum (Alt+=)",
                                                    "body": "Automatically add it up. Your total will appear after the selected cells."
                                                },
                                                {
                                                    "type": "tooltip",
                                                    "target": "arrow",
                                                    "body": "Automatically add a quick calculation to your worksheet, such as a sum or average.",
                                                    "header": "Sum (Alt+=)"
                                                }
                                            ],
                                            "items": [
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_sum",
                                                    "accessKey": "S",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "img": {
                                                            "type": "sprite",
                                                            "wd": "96px",
                                                            "ht": "128px",
                                                            "src": "img/Excel/Home/Editing/Autosum_tooltip.png",
                                                            "top": "0px",
                                                            "left": "0px"
                                                        },
                                                        "header": "Sum (Alt+=)",
                                                        "body": "Automatically add it up. Your total will appear after the selected cells."
                                                    },
                                                    "layoutData": {
                                                        "mode": "stateless",
                                                        "text": "~Sum",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/autosum.png",
                                                            "left": "0px",
                                                            "top": "0px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_average",
                                                    "accessKey": "A",
                                                    "layoutData": {
                                                        "mode": "statelessOnlyText",
                                                        "text": "~Average"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_countNumbers",
                                                    "accessKey": "C",
                                                    "layoutData": {
                                                        "mode": "statelessOnlyText",
                                                        "text": "~Count Numbers"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_max",
                                                    "accessKey": "M",
                                                    "layoutData": {
                                                        "mode": "statelessOnlyText",
                                                        "text": "~Max"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_min",
                                                    "accessKey": "I",
                                                    "layoutData": {
                                                        "mode": "statelessOnlyText",
                                                        "text": "M~in"
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            "id": "id_Fill",
                                            "type": "imageButton",
                                            "accessKey": "FI",
                                            "layoutData": {
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "52px",
                                                    "ht": "23px",
                                                    "src": "img/new/editing_fill_withtext.png",
                                                    "left": "-3px",
                                                    "top": "-1px"
                                                }
                                            },
                                            "tooltip": {
                                                "type": "tooltip",
                                                "img": {
                                                    "type": "sprite",
                                                    "wd": "96px",
                                                    "ht": "128px",
                                                    "src": "img/tooltipSprite.png",
                                                    "top": "-256px",
                                                    "left": "-0px"
                                                },
                                                "header": "Fill",
                                                "body": "Continue a series or pattern into neighboring cells in any direction."
                                            },
                                            "items": []
                                        },
                                        {
                                            "id": "id_Clear",
                                            "accessKey": "E",
                                            "type": "buttonDropdown",
                                            "layoutData": {
                                                "mode": "image",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "64px",
                                                    "ht": "23px",
                                                    "src": "img/new/editing_clear_withtext.png",
                                                    "left": "-4px",
                                                    "top": "-3px"
                                                }
                                            },
                                            "tooltip": {
                                                "type": "tooltip",
                                                "body": "Delete everything in the cell, or remove just the formatting, contents, comments or hyperlinks.",
                                                "header": "Clear"
                                            },
                                            "items": [
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_clear_all",
                                                    "accessKey": "A",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "header": "Clear All",
                                                        "body": "Clear everything from the selected cells.<br/><br/> All contents, formatting and comments are cleared from the selected cells."
                                                    },
                                                    "layoutData": {
                                                        "mode": "stateless",
                                                        "text": "Cle~ar All",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/sprites/excel/home/editing_sectionitems.png",
                                                            "top": "-1px",
                                                            "left": "-152px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_clear_formats",
                                                    "accessKey": "F",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "header": "Clear Formats",
                                                        "body": "Clear only the formatting that is applied to the selected cells."
                                                    },
                                                    "layoutData": {
                                                        "mode": "stateless",
                                                        "text": "Clear ~Formats",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/sprites/excel/home/editing_sectionitems.png",
                                                            "top": "-1px",
                                                            "left": "-107px"
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_clear_contents",
                                                    "accessKey": "C",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "header": "Clear Contents (Del)",
                                                        "body": "Clear only the contents in the selected cells.<br/><br/> The formatting and the comments are not cleared."
                                                    },
                                                    "layoutData": {
                                                        "mode": "statelessOnlyText",
                                                        "text": "~Clear Contents"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_clear_comments",
                                                    "accessKey": "M",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "header": "Clear Comments",
                                                        "body": "Clear any comments that are attached to the selected cells."
                                                    },
                                                    "layoutData": {
                                                        "mode": "statelessOnlyText",
                                                        "text": "Clear Co~mments"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_clear_hyperlinks",
                                                    "accessKey": "L",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "header": "Clear Hyperlinks",
                                                        "body": "Clear hyperlinks from the selected cells.<br/><br/> The formatting is not cleared."
                                                    },
                                                    "layoutData": {
                                                        "mode": "statelessOnlyText",
                                                        "text": "Clear Hyper~links"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemSeparatorNew",
                                                    "id": "id_item_clear_separator1",
                                                    "layoutData": {
                                                        "mode": "withOffset"
                                                    }
                                                },
                                                {
                                                    "type": "menuitemWithModes",
                                                    "id": "id_item_clear_remove_hyperlinks",
                                                    "accessKey": "R",
                                                    "tooltip": {
                                                        "type": "tooltip",
                                                        "header": "Remove Hyperlinks",
                                                        "body": "Remove the hyperlinks and the formatting from the selected cells."
                                                    },
                                                    "layoutData": {
                                                        "mode": "stateless",
                                                        "text": "~Remove Hyperlinks",
                                                        "icon": {
                                                            "type": "sprite",
                                                            "wd": "16px",
                                                            "ht": "16px",
                                                            "src": "img/sprites/excel/home/editing_sectionitems.png",
                                                            "top": "-18px",
                                                            "left": "-241px"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "envelop",
                                    "layoutData": {
                                        "orientation": "horizontal"
                                    },
                                    "items": [
                                        {
                                            "id": "id_SortFilter",
                                            "type": "imageButton",
                                            "accessKey": "S",
                                            "layoutData": {
                                                "mode": "selectable",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "42px",
                                                    "ht": "69px",
                                                    "src": "img/editingsectionsprite.png",
                                                    "top": "0px",
                                                    "left": "-1px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            },
                                            "tooltip": {
                                                "type": "tooltip",
                                                "body": "Organize your data so it's easier to analyze.<br/><br/>you can sort the selected data from smallest to largest, largest to smallest, or filter out specific values.",
                                                "header": "Sort & Filter"
                                            },
                                            "items": []
                                        },
                                        {
                                            "id": "id_FindNSelect",
                                            "accessKey": "FD",
                                            "type": "imageButton",
                                            "layoutData": {
                                                "mode": "selectable",
                                                "icon": {
                                                    "type": "sprite",
                                                    "wd": "44px",
                                                    "ht": "69px",
                                                    "src": "img/Excel/Home/Editing/find_select_16.png",
                                                    "top": "3px",
                                                    "left": "2px"
                                                }
                                            },
                                            "stateData": {
                                                "selected": false,
                                                "retainSelection": false
                                            },
                                            "visData": {
                                                "visible": true,
                                                "enable": true
                                            },
                                            "tooltip": {
                                                "type": "tooltip",
                                                "body": "Click to see options for finding text in your document.<br/><br/>You can use advanced search options to replace text, jump right to a specific spot, or pick other ways to narrow your search.",
                                                "header": "Find & Select"
                                            },
                                            "items": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "sectionseparator"
                }
            ]
        }
    ]
};


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var IdEnum_1 = __webpack_require__(12);
exports.inactiveControls = [
    IdEnum_1.IdEnum.CONTROL_ORIENTATION,
    IdEnum_1.IdEnum.CONTROL_CONDITIONAL_FORMATTING,
    IdEnum_1.IdEnum.CONTROL_FORMAT_AS_TABLE,
    IdEnum_1.IdEnum.CONTROL_STYLES,
    IdEnum_1.IdEnum.CONTROL_FORMAT,
    IdEnum_1.IdEnum.CONTROL_FILL,
    IdEnum_1.IdEnum.CONTROL_SORT_AND_FILTER,
    IdEnum_1.IdEnum.CONTROL_FIND_AND_SELECT,
    IdEnum_1.IdEnum.CONTROL_INSERT_FUNCTION,
    IdEnum_1.IdEnum.CONTROL_FORMULA_AUTOSUM,
    IdEnum_1.IdEnum.CONTROL_RECENTLY_USED,
    IdEnum_1.IdEnum.CONTROL_FINANCIAL,
    IdEnum_1.IdEnum.CONTROL_LOGICAL,
    IdEnum_1.IdEnum.CONTROL_TEXT,
    IdEnum_1.IdEnum.CONTROL_DATE_AND_TIME,
    IdEnum_1.IdEnum.CONTROL_LOOKUP_AND_REFERENCE,
    IdEnum_1.IdEnum.CONTROL_MATH_AND_TRIGONOMETRY,
    IdEnum_1.IdEnum.CONTROL_MORE_FUNCTIONS
];
exports.inactiveControlsWithDropdown = [
    IdEnum_1.IdEnum.CONTROL_FORMAT,
    IdEnum_1.IdEnum.CONTROL_FILL,
    IdEnum_1.IdEnum.CONTROL_SORT_AND_FILTER,
    IdEnum_1.IdEnum.CONTROL_FIND_AND_SELECT,
    IdEnum_1.IdEnum.CONTROL_INSERT_FUNCTION,
    IdEnum_1.IdEnum.CONTROL_FORMULA_AUTOSUM,
    IdEnum_1.IdEnum.CONTROL_RECENTLY_USED,
    IdEnum_1.IdEnum.CONTROL_FINANCIAL,
    IdEnum_1.IdEnum.CONTROL_LOGICAL,
    IdEnum_1.IdEnum.CONTROL_TEXT,
    IdEnum_1.IdEnum.CONTROL_DATE_AND_TIME,
    IdEnum_1.IdEnum.CONTROL_LOOKUP_AND_REFERENCE,
    IdEnum_1.IdEnum.CONTROL_MATH_AND_TRIGONOMETRY,
    IdEnum_1.IdEnum.CONTROL_MORE_FUNCTIONS
];


/***/ })
/******/ ]);
//# sourceMappingURL=ribbon-bundle-msOfficeRibbon.js.map